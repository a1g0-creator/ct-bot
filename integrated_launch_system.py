#!/usr/bin/env python3
"""
–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê - –≠–¢–ê–ü–´ 1 + 2
–í–µ—Ä—Å–∏—è 2.1 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ TELEGRAM BOT

üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- ‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≠—Ç–∞–ø 1)
- ‚úÖ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (–≠—Ç–∞–ø 2)  
- ‚úÖ Kelly Criterion –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–æ–º
- ‚úÖ Trailing Stop-Loss –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏
- ‚úÖ Telegram Bot –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Stage2TelegramBot
- ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
- ‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã
"""

import asyncio
import sys
import os
import signal
import socket
import time
import traceback
from datetime import datetime, timezone
from typing import Optional, List, Set, Any
import logging
from contextlib import suppress
import inspect
import importlib

# =========================
#  –ü–û–î–ì–û–¢–û–í–ö–ê –ü–£–¢–ï–ô/–ò–ú–ü–û–†–¢–û–í
# =========================
import os
import sys
import logging
from datetime import datetime
from pathlib import Path
import importlib.util

ROOT = Path(__file__).resolve().parent
APP_DIR = ROOT / "app"

try:
    from app.sys_events_logger import sys_logger  # noqa: F401
except Exception:
    sys_logger = None  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ

# –î–æ–±–∞–≤–ª—è–µ–º –∏ –∫–æ—Ä–µ–Ω—å, –∏ app/ ‚Äî —á—Ç–æ–±—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏
for p in (ROOT, APP_DIR):
    p_str = str(p)
    if p_str not in sys.path:
        sys.path.insert(0, p_str)

# --- –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞—à –º–æ–¥—É–ª—å)
# –§–∞–π–ª trading_bot/log_rotation_system.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—è–¥–æ–º —Å —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º
try:
    from .log_rotation_system import setup_logging, enforce_retention  # type: ignore
except Exception:
    # fallback, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ –∏–º–ø–æ—Ä—Ç-—ç—Ç–∞–ø–µ –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ä–µ–¥–µ
    def setup_logging(*args, **kwargs):
        logging.basicConfig(level=logging.INFO)
        return logging.getLogger("trading_bot")
    def enforce_retention(*args, **kwargs):
        return 0

logger = logging.getLogger(__name__)


logger = logging.getLogger("bybit_trading_system")
logging.getLogger("httpx").setLevel(logging.WARNING)

def _has_module(name: str) -> bool:
    try:
        return importlib.util.find_spec(name) is not None
    except Exception:
        return False

# -------------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏ (–ñ–Å–°–¢–ö–ò–ï –ò–ú–ü–û–†–¢–´)
# -------------------------
from datetime import datetime

try:
    from app.database_security_implementation import CredentialsStore  # –±–æ–µ–≤–æ–π —Å—Ç–æ—Ä (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ + SQLAlchemy)
    from app.db_session import SessionLocal
    from app.db_models import SysEvents, EventLevelEnum
    logger.info("Database components imported successfully (secure store)")

    # –ü–∏—à–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ Enum
    try:
        with SessionLocal() as s:
            s.add(SysEvents(
                level=EventLevelEnum.INFO.value,
                component="IntegratedLauncher",
                message="Launcher started",
                details_json={"timestamp": datetime.now(timezone.utc).isoformat()},
            ))
            s.commit()
    except Exception as e:
        logger.warning("Could not log to DB at startup: %s", e)

except Exception as e:
    logger.exception("Critical: cannot import secure DB components")
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –º–æ–≥—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ë–î")
    raise

# -------------------------
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
# -------------------------
try:
    from config import get_api_credentials, TARGET_ACCOUNT_ID, DONOR_ACCOUNT_ID
    tgt = bool(get_api_credentials(TARGET_ACCOUNT_ID))
    dnr = bool(get_api_credentials(DONOR_ACCOUNT_ID))
    logger.info("Startup creds check: TARGET(id=%s)=%s, DONOR(id=%s)=%s",
                TARGET_ACCOUNT_ID, tgt, DONOR_ACCOUNT_ID, dnr)
except Exception as e:
    logger.warning("Startup creds check failed: %s", e)

# -------------------------
# –≠—Ç–∞–ø 1 ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
# -------------------------
try:
    from enhanced_trading_system_final_fixed import (
        FinalTradingMonitor,
        ConnectionStatus,
        send_telegram_alert,
        get_websockets_version,
        logger as ets_logger,  # —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å –Ω–∞—à–∏–º
    )
    print("‚úÖ –≠—Ç–∞–ø 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    try:
        ws_version = get_websockets_version()
    except Exception:
        # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å ‚Äî –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–∫–µ—Ç–∞ websockets, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import websockets  # type: ignore
            ws_version = getattr(websockets, "__version__", "unknown")
        except Exception:
            ws_version = "unknown"
    print(f"üì¶ WebSockets –≤–µ—Ä—Å–∏—è: {ws_version}")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ enhanced_trading_system_final_fixed: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ enhanced_trading_system_final_fixed.py")
    sys.exit(1)

# -------------------------
# –≠—Ç–∞–ø 2 ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
try:
    print("‚è≥ –ò–º–ø–æ—Ä—Ç –≠—Ç–∞–ø–∞ 2...")
    from stage2_copy_system import Stage2CopyTradingSystem
    print("‚úÖ –≠—Ç–∞–ø 2: –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
except ImportError:
    # fallback: –∫–ª–∞—Å—Å –º–æ–∂–µ—Ç –∂–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ enhanced_trading_system_final_fixed
    try:
        from enhanced_trading_system_final_fixed import Stage2CopyTradingSystem
        print("‚úÖ –≠—Ç–∞–ø 2: –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ enhanced_trading_system_final_fixed")
    except ImportError as e2:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Stage2CopyTradingSystem: {e2}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ stage2_copy_system.py –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –≤ enhanced_trading_system_final_fixed.py")
        sys.exit(1)

# -------------------------
# Telegram Bot
# -------------------------
try:
    print("‚è≥ –ò–º–ø–æ—Ä—Ç Telegram Bot...")
    from stage2_telegram_bot import Stage2TelegramBot, run_stage2_telegram_bot  # noqa
    print("‚úÖ Telegram Bot: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è Telegram Bot –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    Stage2TelegramBot = None
    run_stage2_telegram_bot = None

# -------------------------
# Network Supervisor (–ø–∞—Ç—á–∏)
# -------------------------

# –§—É–Ω–∫—Ü–∏—è-–ø–∞—Ç—á–µ—Ä, –µ—Å–ª–∏ –µ—ë —É–¥–∞—Å—Ç—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
patch_network_supervisor = None
_last_ns_err = None
_loaded_module_name = None

# –ü—Ä–æ–±—É–µ–º –ø–æ –¥–≤—É–º –∏–º–µ–Ω–∞–º –º–æ–¥—É–ª–µ–π: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî network_supervisor_fix
for _mod_name in ("network_supervisor_fix", "network_supervisor"):
    try:
        _mod = importlib.import_module(_mod_name)
        _loaded_module_name = _mod_name

        # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ–∂–∏–¥–∞—é—Ç import network_supervisor ‚Äî –¥–µ–ª–∞–µ–º –∞–ª–∏–∞—Å
        sys.modules.setdefault("network_supervisor", _mod)

        # –ò—â–µ–º —Ö–æ—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ç—á–∞
        for _fn_name in (
            "patch_trading_system_with_supervisor",  # ¬´–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ¬ª –∏–º—è –∏–∑ fix-–º–æ–¥—É–ª—è
            "patch_trading_system",                  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Ç–∞–∫ –Ω–∞–∑–≤–∞–Ω–æ
        ):
            _fn = getattr(_mod, _fn_name, None)
            if callable(_fn):
                patch_network_supervisor = _fn
                logger.info("%s imported; will patch via %s()", _mod_name, _fn_name)
                break

        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –º–æ–¥—É–ª—å –ø–∞—Ç—á–∏—Ç –ø–æ —Å–∞–π–¥‚Äë—ç—Ñ—Ñ–µ–∫—Ç—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        if not patch_network_supervisor:
            logger.info("%s loaded; no explicit patch function found ‚Äî assuming side-effect patching", _mod_name)

        break  # –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    except Exception as e:
        _last_ns_err = e

# –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á (–µ—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é)
try:
    if patch_network_supervisor:
        patch_network_supervisor()
        logger.info("Network Supervisor patch applied (module=%s)", _loaded_module_name)
    elif _loaded_module_name:
        # –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –Ω–æ —è–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ —Å–∞–π–¥‚Äë—ç—Ñ—Ñ–µ–∫—Ç
        logger.info("Network Supervisor module '%s' loaded without explicit patch function", _loaded_module_name)
    else:
        # –Ω–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        if _last_ns_err:
            logger.warning("network_supervisor not available for patching (last error: %s)", _last_ns_err)
        else:
            logger.info("network_supervisor patch skipped (no module present)")
except Exception as e:
    logger.warning("Failed to apply network supervisor patch: %s", e)


# -------------------------
# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (config.py)
# -------------------------
try:
    import config  # –∫–∞–∫ –º–æ–¥—É–ª—å ‚Äî –Ω—É–∂–µ–Ω –¥–∞–ª–µ–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π
    DEFAULT_TRADE_ACCOUNT_ID = getattr(config, "DEFAULT_TRADE_ACCOUNT_ID", 1)
    
except Exception as e:
    logger.warning("config.py not found or failed to import (%s), using defaults", e)
    config = None  # —á—Ç–æ–±—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ –º–æ–¥—É–ª—è –Ω–µ—Ç
    DEFAULT_TRADE_ACCOUNT_ID = 1


# -------------------------
# Telegram cfg (–∞–¥–º–∏–Ω—ã)
# -------------------------
# –ò–º–ø–æ—Ä—Ç telegram_cfg: –º—è–≥–∫–∏–π, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ —Ä–∞–∑–Ω—ã–º –≤–µ—Ä—Å–∏—è–º –º–æ–¥—É–ª—è
try:
    import telegram_cfg as _tgcfg
    TELEGRAM_TOKEN = getattr(config, "TELEGRAM_BOT_TOKEN", os.getenv("TELEGRAM_BOT_TOKEN"))
    TELEGRAM_CHAT_ID = getattr(config, "TELEGRAM_CHAT_ID", os.getenv("TELEGRAM_CHAT_ID"))
    logger.info("telegram_cfg module loaded")
except Exception as e:
    _tgcfg = None
    logger.warning("telegram_cfg not available or invalid (%s); using ENV fallback", e)
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# -------------------------
# Telegram settings resolver (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã)
# -------------------------
import os as _os
import logging as _logging
_logger = logging.getLogger("bybit_trading_system")

# –º—è–≥–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
try:
    import telegram_cfg as _tgcfg
    _logger.info("telegram_cfg module loaded")
except Exception as _e:
    _tgcfg = None
    _logger.warning("telegram_cfg not available or invalid (%s); using ENV/config fallback", _e)

try:
    import config as _cfg
except Exception:
    _cfg = None  # –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ

def _resolve_telegram_token() -> str:
    """
    –ü–æ—Ä—è–¥–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
      1) ENV TELEGRAM_TOKEN  (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π)
      2) telegram_cfg.TELEGRAM_TOKEN
      3) config.TELEGRAM_TOKEN
      4) LEGACY: ENV TELEGRAM_BOT_TOKEN
      5) LEGACY: config.TELEGRAM_BOT_TOKEN
    """
    candidates = [
        _os.getenv("TELEGRAM_TOKEN"),
        getattr(_tgcfg, "TELEGRAM_TOKEN", None) if _tgcfg else None,
        getattr(_cfg,   "TELEGRAM_TOKEN", None) if _cfg   else None,
        _os.getenv("TELEGRAM_BOT_TOKEN"),  # ‚Üê —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∞–ª–∏–∞—Å
        getattr(_cfg,   "TELEGRAM_BOT_TOKEN", None) if _cfg else None,
    ]
    token = next((t for t in candidates if t), None)
    if not token:
        _logger.warning("Telegram token not resolved. Set TELEGRAM_TOKEN in environment.")
        return ""
    # –Ω–µ–±–æ–ª—å—à–æ–π –ª–æ–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if token == _os.getenv("TELEGRAM_TOKEN"):
        _logger.info("‚úÖ TELEGRAM_TOKEN loaded from: ENV")
    elif _tgcfg and token == getattr(_tgcfg, "TELEGRAM_TOKEN", None):
        _logger.info("‚úÖ TELEGRAM_TOKEN loaded from: telegram_cfg")
    elif _cfg and token == getattr(_cfg, "TELEGRAM_TOKEN", None):
        _logger.info("‚úÖ TELEGRAM_TOKEN loaded from: config")
    elif token == _os.getenv("TELEGRAM_BOT_TOKEN"):
        _logger.info("‚ö†Ô∏è  TELEGRAM_TOKEN loaded from legacy ENV TELEGRAM_BOT_TOKEN")
    else:
        _logger.info("‚ö†Ô∏è  TELEGRAM_TOKEN loaded from legacy config TELEGRAM_BOT_TOKEN")
    return token

def _resolve_telegram_chat_id():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ chat_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ENV ‚Üí telegram_cfg ‚Üí config.
    """
    for raw in (
        _os.getenv("TELEGRAM_CHAT_ID"),
        str(getattr(_tgcfg, "TELEGRAM_CHAT_ID", "") or "") if _tgcfg else "",
        str(getattr(_cfg,   "TELEGRAM_CHAT_ID", "") or "") if _cfg   else "",
    ):
        v = (raw or "").strip()
        if v and v.lstrip("-").isdigit():
            return int(v)
    return None

def _parse_int_list(src: str) -> list[int]:
    return [int(p.strip()) for p in (src or "").replace(";", ",").split(",") if p.strip().lstrip("-").isdigit()]

def get_admin_ids() -> list[int]:
    """
    –ï–¥–∏–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:
      1) telegram_cfg.get_admin_ids() –µ—Å–ª–∏ –µ—Å—Ç—å
      2) telegram_cfg.ADMIN_ONLY_IDS
      3) ENV ADMIN_ONLY_IDS="123,456"
    """
    try:
        if _tgcfg and hasattr(_tgcfg, "get_admin_ids") and callable(_tgcfg.get_admin_ids):
            ids = _tgcfg.get_admin_ids()
        elif _tgcfg and hasattr(_tgcfg, "ADMIN_ONLY_IDS"):
            ids = getattr(_tgcfg, "ADMIN_ONLY_IDS") or []
        else:
            ids = _parse_int_list(_os.getenv("ADMIN_ONLY_IDS", ""))
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ list[int]
        if isinstance(ids, (set, tuple)):
            ids = list(ids)
        out: list[int] = []
        for x in ids:
            if isinstance(x, int):
                out.append(x)
            elif isinstance(x, str) and x.strip().lstrip("-").isdigit():
                out.append(int(x.strip()))
        _logger.info("‚úÖ ADMIN_IDS count: %d (sources: %s)", len(out), "telegram_cfg + ENV" if _tgcfg else "ENV")
        return out
    except Exception as e:
        _logger.warning("Failed to read admin ids from telegram_cfg: %s; using ENV fallback", e)
        return _parse_int_list(_os.getenv("ADMIN_ONLY_IDS", ""))

# –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TELEGRAM_TOKEN   = _resolve_telegram_token()
TELEGRAM_CHAT_ID = _resolve_telegram_chat_id()
ADMIN_IDS        = get_admin_ids()


def _parse_int_list(src: str) -> list[int]:
    return [int(p.strip()) for p in src.replace(";", ",").split(",") if p.strip().isdigit()]

def get_admin_ids() -> list[int]:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:
    1) –µ—Å–ª–∏ –≤ telegram_cfg –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è get_admin_ids() ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    2) –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ ADMIN_ONLY_IDS ‚Äî —á–∏—Ç–∞–µ–º –µ—ë
    3) –∏–Ω–∞—á–µ —á–∏—Ç–∞–µ–º –∏–∑ ENV ADMIN_ONLY_IDS="123,456"
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ int.
    """
    try:
        if _tgcfg and hasattr(_tgcfg, "get_admin_ids") and callable(_tgcfg.get_admin_ids):
            ids = _tgcfg.get_admin_ids()
        elif _tgcfg and hasattr(_tgcfg, "ADMIN_ONLY_IDS"):
            ids = getattr(_tgcfg, "ADMIN_ONLY_IDS") or []
        else:
            ids = _parse_int_list(os.getenv("ADMIN_ONLY_IDS", ""))

        # —Å–∞–Ω–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∫ list[int]
        if isinstance(ids, (set, tuple)):
            ids = list(ids)

        sanitized: list[int] = []
        for x in ids:
            if isinstance(x, int):
                sanitized.append(x)
            elif isinstance(x, str) and x.strip().isdigit():
                sanitized.append(int(x.strip()))
        return sanitized
    except Exception as e:
        logger.warning("Failed to read admin ids from telegram_cfg: %s; using ENV fallback", e)
        return _parse_int_list(os.getenv("ADMIN_ONLY_IDS", ""))


# -------------------------
# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
# -------------------------
print("\nüöÄ BYBIT COPY TRADING SYSTEM - –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–£–°–ö")
print("=" * 80)
print("–ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:")
print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (WebSocket + API)")
print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 2: –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (Kelly + Trailing + Orders)")
print("‚îú‚îÄ‚îÄ Telegram Bot: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" if Stage2TelegramBot else "‚îú‚îÄ‚îÄ Telegram Bot: –ù–ï –ó–ê–ì–†–£–ñ–ï–ù")
print("‚îî‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
print("=" * 80)
print()


try:
    import uvicorn
except Exception:
    uvicorn = None

class WebAPIService:
    def __init__(self, host: str = "0.0.0.0", port: int = 8080, reload: bool = False):
        self.host = host
        self.port = port
        self.reload = reload
        self.server = None
        self.task: asyncio.Task | None = None
        self.logger = logging.getLogger("bybit_trading_system")

    async def start(self):
        if uvicorn is None:
            self.logger.error("WEB API: uvicorn is not installed. Run: pip install 'uvicorn[standard]' fastapi")
            return
        if self.task and not self.task.done():
            return  # already running

        config = uvicorn.Config(
            app="web_api:app",          # <-- –Ω–∞—à web_api.py –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            host=self.host,
            port=int(self.port),
            reload=bool(self.reload),   # –≤ prod –æ–±—ã—á–Ω–æ False
            loop="asyncio",
            log_level="info",
        )
        self.server = uvicorn.Server(config=config)
        self.task = asyncio.create_task(self.server.serve(), name="WebAPI")
        self.logger.info(f"WEB API started on http://{self.host}:{self.port}")

    async def stop(self):
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ uvicorn
        try:
            if self.server:
                self.server.should_exit = True
            if self.task:
                await asyncio.wait_for(self.task, timeout=10)
        except Exception as e:
            self.logger.warning(f"WEB API graceful stop timeout/err: {e}")


class IntegratedTradingSystem:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≠—Ç–∞–ø—ã 1 –∏ 2
    """

    def __init__(self):
        self.stage1_monitor = None  # FinalTradingMonitor
        self.stage2_system  = None  # Stage2CopyTradingSystem
        self.telegram_bot   = None  # Stage2TelegramBot

        self.system_active = False
        self.start_time = 0
        self.active_tasks = set()

        self.integrated_stats = {
            'total_uptime': 0,
            'stage1_restarts': 0,
            'stage2_restarts': 0,
            'critical_errors': 0,
            'successful_starts': 0,
        }

        # –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        self._stopping: bool = False
        # –§–ª–∞–≥ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ –≤ __init__ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop)
        self._defer_signal_setup: bool = True

        # >>> logging init (–µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ./logs/)
        # - –ª–æ–∫–∞–ª—å–Ω–æ: ~/Documents/trading_bot/logs/
        # - –Ω–∞ –ø—Ä–æ–¥–µ: /opt/trading_bot/logs/
        project_root = Path(__file__).resolve().parent  # —Å–∞–º –∫–∞—Ç–∞–ª–æ–≥ trading_bot/
        default_log_dir = project_root.parent / "logs"
        log_dir = os.getenv("LOG_BASE_DIR", str(default_log_dir))
        retention = int(os.getenv("LOG_ROTATION_DAYS", "30"))
        level = os.getenv("LOG_LEVEL", "INFO")
        setup_logging(log_dir, level=level, retention_days=retention)
        logging.getLogger(__name__).info("Logs ‚Üí %s", log_dir)

        logger.info("Integrated Trading System initialized")

    # ---------- FIXED: instance methods + safe logging ----------
    def _warn_proxy_env(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ proxy-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
        for k in ("HTTP_PROXY", "http_proxy", "HTTPS_PROXY", "https_proxy", "NO_PROXY", "no_proxy"):
            v = os.getenv(k)
            if v:
                logger.warning("‚ö†Ô∏è Proxy env set: %s=%s", k, v)

    def _dns_check(self, hosts: tuple[str, ...] = ("api.bybit.com", "api-demo.bybit.com")) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS-—Ä–µ–∑–æ–ª–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ö–æ—Å—Ç–æ–≤ Bybit.
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è.
        """
        ok = False
        for h in hosts:
            try:
                socket.gethostbyname(h)
                logger.info("‚úÖ DNS resolution check passed: %s", h)
                ok = True
                break
            except Exception as e:
                logger.error("‚ùå DNS resolution check failed for %s: %s", h, e)
        return ok
    # ------------------------------------------------------------

    async def _reload_ws_credentials(self) -> bool:
        ws = getattr(self.stage1_monitor, "websocket_manager", None)
        if not ws:
            return False
        try:
            from app.crypto_store import CredentialsStore
            store = CredentialsStore()
            # Donor id=2, fallback id=1
            src = store.get_account_credentials(2) or store.get_account_credentials(1)
            if not src:
                # fallback –Ω–∞ –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if getattr(ws, "_stored_api_key", None) and getattr(ws, "_stored_api_secret", None):
                    ws.api_key    = ws._stored_api_key
                    ws.api_secret = ws._stored_api_secret
                    logger.warning("WS creds reloaded from cache (no DB creds)")
                    return True
                logger.error("WS creds reload failed: no creds in DB and no cache")
                return False
            ws.api_key, ws.api_secret = src
            ws._stored_api_key    = ws.api_key
            ws._stored_api_secret = ws.api_secret
            logger.info("WS creds (re)applied from DB (2‚Üí1) before connect")
            return True
        except Exception as e:
            logger.error("WS creds reload error: %s", e)
            return False

    def _patch_ws_connect(self) -> None:
        ws = getattr(self.stage1_monitor, "websocket_manager", None)
        if not ws or getattr(ws, "_connect_patched", False):
            return

        original_connect = ws.connect

        async def connect_wrapper(*args, **kwargs):
            # –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –ø–æ–¥–ª–æ–∂–∏–º –∏–∑ –ë–î/–∫—ç—à–∞
            if not getattr(ws, "api_key", None) or not getattr(ws, "api_secret", None):
                ok = await self._reload_ws_credentials()
                if not ok:
                    logger.error("Abort WS connect: no creds available")
                    return
            # —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–≤
            ws._stored_api_key    = ws.api_key
            ws._stored_api_secret = ws.api_secret
            return await original_connect(*args, **kwargs)

        ws.connect = connect_wrapper
        ws._connect_patched = True
        logger.info("WebSocket connect() patched with DB-guard (2‚Üí1).")


    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ + –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π proxy/DNS sanity."""
        try:
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
            logger.info("Signal handlers configured")

            # –í—ã–ø–æ–ª–Ω—è–µ–º sanity-–ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä–æ–≥–æ 1 —Ä–∞–∑ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
            if os.environ.get("BOT_NET_SANITY_DONE") != "1":
                try:
                    self._warn_proxy_env()
                    self._dns_check()
                except Exception as e:
                    logger.debug("Network sanity check error (non-fatal): %s", e)
                finally:
                    os.environ["BOT_NET_SANITY_DONE"] = "1"

        except Exception as e:
            logger.warning(f"Cannot setup signal handlers: {e}")

    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"Received signal {signum}, initiating graceful shutdown")
        self.system_active = False
    
    def _is_telegram_task(self, t: asyncio.Task) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–∞—Å–∫–∞ –∫ Telegram-–±–æ—Ç—É (—á—Ç–æ–±—ã –Ω–µ –≥–∞—Å–∏—Ç—å –µ–≥–æ)."""
        try:
            name = t.get_name()
        except Exception:
            name = str(t)
        n = (name or "").lower()
        return ("telegram" in n) or (name in {"Stage2_TelegramBot", "TelegramBot"})


    async def apply_new_credentials(self, account_id: int) -> bool:
        """
        –ì–æ—Ä—è—á–µ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram:
        - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–∞—Å–∏–º —Å—Ç–∞—Ä—ã–µ Stage1/Stage2
        - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏—Ö ¬´–∫–∞–∫ —Å –Ω—É–ª—è¬ª
        - —á–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –ò–ó –ï–î–ò–ù–û–ì–û STOREA (database_security_implementation)
        - –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–ª—é—á–∏ –∫–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        - —Å—Ç–∞—Ä—Ç—É–µ–º Stage1/Stage2
        """
        logger.info("[HotReload] Starting trading systems after keys update")

        # --- 1) –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –ü–†–ê–í–ò–õ–¨–ù–´–ú —Å–ø–æ—Å–æ–±–æ–º (–Ω–∏–∫–∞–∫–æ–≥–æ app.crypto_store) ---
        try:
            try:
                from app.database_security_implementation import CredentialsStore
            except Exception:
                from database_security_implementation import CredentialsStore
            store = CredentialsStore()

            # TARGET/DONOR –±–µ—Ä—ë–º –∏–∑ self –∏–ª–∏ self.config (—á—Ç–æ –µ—Å—Ç—å)
            target_id = (
                getattr(self, "TARGET_ACCOUNT_ID", None)
                or getattr(getattr(self, "config", object()), "TARGET_ACCOUNT_ID", None)
                or 1
            )
            donor_id = (
                getattr(self, "DONOR_ACCOUNT_ID", None)
                or getattr(getattr(self, "config", object()), "DONOR_ACCOUNT_ID", None)
            )

            main_creds = store.get_account_credentials(int(target_id))
            donor_creds = store.get_account_credentials(int(donor_id)) if donor_id else None

            if not main_creds or not all(main_creds):
                logger.warning("[HotReload] Keys for TARGET account_id=%s not found in DB", target_id)
                return False

            main_api_key, main_api_secret = main_creds
            source_api_key, source_api_secret = (donor_creds or (None, None))

            logger.info("[HotReload] Found keys: TARGET=%s, DONOR=%s",
                    target_id, donor_id if donor_creds else "‚Äî")
        except Exception as e:
            logger.error("[HotReload] Failed to load credentials from DB: %s", e, exc_info=True)
            return False

        try:
            # --- 2) –Ω–µ —Ç—Ä–æ–≥–∞–µ–º Telegram, –≥–∞—Å–∏–º —Ç–æ–ª—å–∫–æ Stage1/Stage2 ---
            await self._cancel_active_tasks(names_to_keep=frozenset({"Stage2_TelegramBot"}))

            # --- 3) –ø–æ–≥–∞—Å–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ) ---
            if hasattr(self, "_stop_existing_systems"):
                await self._stop_existing_systems()

            # --- 4) –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
            import asyncio
            await asyncio.sleep(0.5)

            # --- 5) –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã ¬´–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ¬ª ---
            self.stage1_monitor = FinalTradingMonitor()
            if hasattr(self, "_patch_ws_connect"):
                self._patch_ws_connect()  # –∑–∞—â–∏—â—ë–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è WS
            if hasattr(self, "_refresh_bot_refs"):
                self._refresh_bot_refs()

            # –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ‚Äî base_monitor
            self.stage2_system = Stage2CopyTradingSystem(base_monitor=self.stage1_monitor)
            if hasattr(self, "_refresh_bot_refs"):
                self._refresh_bot_refs()  # –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Stage2 –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –±–æ—Ç–∞

            logger.info("[HotReload] Stage 1/2 instances re-created")

            # --- 6) –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–ª—é—á–∏ –∫–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–æ–∞–¥–µ—Ä–æ–≤) ---
            await self._apply_credentials_to_all_components(
                source_api_key=source_api_key,
                source_api_secret=source_api_secret,
                main_api_key=main_api_key,
                main_api_secret=main_api_secret,
            )
            logger.info("[HotReload] Credentials applied to all components")

            # --- 7) –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stage2 –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ LIVE-—Ñ–ª–∞–≥–æ–≤ ---
            await self.stage2_system.initialize()
            self.stage2_system.system_active = True
            self.stage2_system.copy_enabled = True

            # --- 8) —Å—Ç–∞—Ä—Ç Stage1 ---
            t1 = asyncio.create_task(self.stage1_monitor.start(), name="Stage1_Monitor")
            self.active_tasks.add(t1)
            logger.info("[HotReload] Stage 1 monitoring task created")

            # --- 9) —Å—Ç–∞—Ä—Ç Stage2 (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ—Ä—É—Ç–∏–Ω—ã) ---
            t2_coro = self._pick_stage2_start_coro(self.stage2_system)
            t2 = asyncio.create_task(t2_coro, name="Stage2_CopySystem")
            self.active_tasks.add(t2)
            logger.info("[HotReload] Stage 2 copy system task created")

            # --- 10) —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ Telegram-–±–æ—Ç –∂–∏–≤ ---
            if hasattr(self, "_ensure_telegram_running"):
                await self._ensure_telegram_running()

            self.integrated_stats["successful_starts"] += 1
            logger.info("[HotReload] Trading systems started successfully with new credentials")
            return True

        except Exception as e:
            logger.error("[HotReload] Failed to apply credentials: %s", e, exc_info=True)
            self.integrated_stats["critical_errors"] += 1
            from contextlib import suppress
            with suppress(Exception):
                await send_telegram_alert(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π!**\n"
                    f"üìä –ê–∫–∫–∞—É–Ω—Ç: {account_id}\n"
                    f"‚ö†Ô∏è {e}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –≤ –ë–î."
                )
            return False

    
    async def _apply_credentials_to_all_components(
        self,
        source_api_key: Optional[str],
        source_api_secret: Optional[str],
        main_api_key: str,
        main_api_secret: str
    ):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫–ª—é—á–∏ –∫–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã.
        SOURCE ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å None), MAIN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.
        """
        components_to_check = [
            self.stage1_monitor,
            self.stage2_system
        ]

        for component in components_to_check:
            if not component:
                continue

            for attr_name in dir(component):
                if attr_name.startswith('_'):
                    continue

                try:
                    attr = getattr(component, attr_name)
                    if not attr:
                        continue

                    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏: –º–µ–Ω–µ–¥–∂–µ—Ä—ã/–∫–ª–∏–µ–Ω—Ç—ã/–≤–µ–±—Å–æ–∫–µ—Ç—ã
                    name = attr_name.lower()
                    is_client = any(k in name for k in ['client', 'manager', 'websocket', 'ws'])
                    if not is_client:
                        continue

                    # –í—ã–±–æ—Ä –ø–∞—Ä—ã –∫–ª—é—á–µ–π
                    is_source = 'source' in name
                    is_main = ('main' in name) or ('target' in name)

                    if is_source and source_api_key and source_api_secret:
                        api_key, api_secret = source_api_key, source_api_secret
                    else:
                        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî MAIN
                        api_key, api_secret = main_api_key, main_api_secret

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                    if hasattr(attr, 'api_key'):
                        attr.api_key = api_key
                    if hasattr(attr, 'api_secret'):
                        attr.api_secret = api_secret

                    # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ (—á–∞—Å—Ç—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
                    if hasattr(attr, '_http_client'):
                        http_client = attr._http_client
                        if hasattr(http_client, 'api_key'):
                            http_client.api_key = api_key
                        if hasattr(http_client, 'api_secret'):
                            http_client.api_secret = api_secret

                    logger.debug(
                        "[HotReload] Applied credentials to %s.%s",
                        component.__class__.__name__, attr_name
                    )

                except Exception as e:
                    logger.debug(f"[HotReload] Could not process {attr_name}: {e}")


    async def _run_component(self, coro, component_name: str):
        """
        –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            await coro
        except asyncio.CancelledError:
            logger.info(f"{component_name} cancelled")
            raise
        except Exception as e:
            logger.error(f"{component_name} error: {e}")
            self.integrated_stats['critical_errors'] += 1
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if 'Stage1' in component_name:
                self.integrated_stats['stage1_restarts'] += 1
            elif 'Stage2' in component_name:
                self.integrated_stats['stage2_restarts'] += 1
                
            raise

        # --- –ù–û–í–û–ï: –≤—ã–±–æ—Ä account_id –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –≤ –ë–î ---
    def _target_account_id(self) -> int:
        """
        –ë–µ—Ä—ë–º TARGET_ACCOUNT_ID –∏–∑ ENV, –∏–Ω–∞—á–µ DEFAULT_TRADE_ACCOUNT_ID (–∫–∞–∫ –º–∏–Ω–∏–º—É–º 1).
        –ù–µ —Ç—è–Ω–µ–º config –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤ ‚Äî ENV —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
        """
        for k in ("TARGET_ACCOUNT_ID", "DEFAULT_TRADE_ACCOUNT_ID"):
            v = os.getenv(k)
            if v and str(v).isdigit():
                return int(v)
        return 1

    def _have_keys(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã –∫–ª—é—á–µ–π –≤ –ë–î —á–µ—Ä–µ–∑ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CredentialsStore.
        –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ True/False.
        """
        try:
            store = CredentialsStore()
            creds = store.get_account_credentials(self._target_account_id())
            return bool(creds and all(creds))
        except Exception:
            return False

    async def _wait_for_keys(self, poll_seconds: int = 3) -> None:
        """
        –¢–∏—Ö–æ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π (—á–µ—Ä–µ–∑ /keys). –ü–∏—à–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –ª–æ–≥ —Ä–∞–∑–æ–≤–æ.
        """
        if not self._have_keys():
            logger.warning("SETUP MODE: –∫–ª—é—á–µ–π –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /keys –≤ Telegram.")
            try:
                await send_telegram_alert(
                    "‚öôÔ∏è SETUP MODE: –∫–ª—é—á–µ–π –Ω–µ—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ /keys, –≤–≤–µ–¥–∏—Ç–µ KEY/SECRET –∏ –Ω–∞–∂–º–∏—Ç–µ "
                    "¬´–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞¬ª. –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ä—Ç–∞–Ω—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
            except Exception:
                pass

        while not self._have_keys():
            await asyncio.sleep(poll_seconds)

    def _pick_stage2_start_coro(self, stage2):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ —É Stage2:
        start_system() ‚Üí start_copying() ‚Üí start()
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É.
        """
        for name in ("start_system", "start_copying", "start"):
            fn = getattr(stage2, name, None)
            if callable(fn):
                coro = fn()
                if inspect.isawaitable(coro):
                    return coro
        raise AttributeError(
            "Stage2CopyTradingSystem: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ "
            "(–æ–∂–∏–¥–∞–ª–∏—Å—å start_system()/start_copying()/start())."
        )


    async def _cancel_active_tasks(self, names_to_keep=frozenset()):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ —è–≤–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏ Telegram-–±–æ—Ç–∞.
        """
        keep = set(names_to_keep) | {"Stage2_TelegramBot", "TelegramBot", "Telegram"}
        tasks_to_cancel = [
            t for t in list(self.active_tasks)
            if (not t.done())
            and (getattr(t, "get_name", lambda: "")() not in keep)
            and (not self._is_telegram_task(t))
        ]

        for t in tasks_to_cancel:
            t.cancel()
            with suppress(asyncio.CancelledError):
                await t

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∂–∏–≤—ã–µ
        self.active_tasks = {t for t in self.active_tasks if not t.done()}

    async def _stop_existing_systems(self):
        """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≥–∞—Å–∏–º —Å—Ç–∞—Ä—ã–µ Stage1/Stage2, —á—Ç–æ–±—ã –ø—Ä–∏–±–∏—Ç—å –∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏."""
        if getattr(self, "stage1_monitor", None) and hasattr(self.stage1_monitor, "stop"):
            with suppress(Exception):
                await self.stage1_monitor.stop()
        if getattr(self, "stage2_system", None) and hasattr(self.stage2_system, "stop"):
            with suppress(Exception):
                await self.stage2_system.stop()

    async def _ensure_telegram_running(self):
        """–ï—Å–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å."""
        if any(self._is_telegram_task(t) and not t.done() for t in self.active_tasks):
            return  # —É–∂–µ –∑–∞–ø—É—â–µ–Ω

        if getattr(self, "telegram_bot", None) and hasattr(self.telegram_bot, "start"):
            tbot = asyncio.create_task(self.telegram_bot.start(), name="Stage2_TelegramBot")
            self.active_tasks.add(tbot)
            logger.info("[HotReload] Telegram bot (re)started")

    def _resolve_account_ids(self):
        """
        –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è TARGET/DONOR ID.
        –ü–æ—Ä—è–¥–æ–∫: config -> –∞—Ç—Ä–∏–±—É—Ç—ã self -> –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -> –¥–µ—Ñ–æ–ª—Ç—ã.
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ 'None'/'"None"' –Ω–µ –ø—Ä–æ–ª–µ–∑—É—Ç.
        """
        import os

        target_id = donor_id = None

        # 1) config
        try:
            from config import TARGET_ACCOUNT_ID as _T
            target_id = _T
        except Exception:
            pass
        try:
            from config import DONOR_ACCOUNT_ID as _D
            donor_id = _D
        except Exception:
            pass

        # 2) –∞—Ç—Ä–∏–±—É—Ç—ã self
        if target_id is None:
            target_id = getattr(self, "TARGET_ACCOUNT_ID", None)
        if donor_id is None:
            donor_id = getattr(self, "DONOR_ACCOUNT_ID", None)

        # 3) –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if target_id is None:
            target_id = os.getenv("TARGET_ACCOUNT_ID")
        if donor_id is None:
            donor_id = os.getenv("DONOR_ACCOUNT_ID")

        # 4) –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Ñ–æ–ª—Ç—ã
        try:
            target_id = int(target_id) if target_id not in (None, "", "None") else 1
        except Exception:
            target_id = 1

        try:
            donor_id = int(donor_id) if donor_id not in (None, "", "None") else None
        except Exception:
            donor_id = None

        # 5) –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Å–µ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ ¬´—Ç–µ—Ä—è–ª–∏—Å—å¬ª)
        self.TARGET_ACCOUNT_ID = target_id
        self.DONOR_ACCOUNT_ID = donor_id

        return target_id, donor_id

    async def _load_and_apply_credentials(self) -> bool:
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç TARGET/DONOR id, –≥—Ä—É–∑–∏—Ç –∫–ª—é—á–∏ –∏–∑ –ë–î
        –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Stage1/Stage2.
        """
        try:
            target_id, donor_id = self._resolve_account_ids()

            # store
            try:
                from app.database_security_implementation import CredentialsStore
            except Exception:
                from database_security_implementation import CredentialsStore
            store = CredentialsStore()

            main_creds = store.get_account_credentials(target_id)
            donor_creds = store.get_account_credentials(donor_id) if donor_id else None

            if not main_creds or not all(main_creds):
                logger.error("[HotReload] No TARGET credentials in DB for id=%s", target_id)
                return False

            main_key, main_secret = main_creds

            if donor_creds and all(donor_creds):
                source_key, source_secret = donor_creds
                logger.info("[HotReload] Credentials loaded: TARGET(id=%s)=True, DONOR(id=%s)=True",
                            target_id, donor_id)
            else:
                # –º–æ–Ω–∏—Ç–æ—Ä–∏–º TARGET, –µ—Å–ª–∏ –¥–æ–Ω–æ—Ä–∞ –Ω–µ—Ç
                source_key, source_secret = main_key, main_secret
                logger.warning("[HotReload] DONOR credentials missing for id=%s ‚Äî using TARGET for monitoring",
                               donor_id)

            # ---- Stage1 (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥) ----
            if getattr(self, "stage1_monitor", None):
                ws = getattr(self.stage1_monitor, "websocket_manager", None)
                if ws:
                    ws.api_key = source_key
                    ws.api_secret = source_secret
                    setattr(ws, "_stored_api_key", source_key)
                    setattr(ws, "_stored_api_secret", source_secret)
                    logger.info("[HotReload] WS credentials applied (SOURCE)")

                source_client = getattr(self.stage1_monitor, "source_client", None)
                if source_client:
                    source_client.api_key = source_key
                    source_client.api_secret = source_secret
                    if hasattr(source_client, "connector"):
                        source_client.connector.api_key = source_key
                        source_client.connector.api_secret = source_secret
                        if hasattr(source_client.connector, "session") and hasattr(source_client.connector.session, "headers"):
                            source_client.connector.session.headers.update({"X-BAPI-API-KEY": source_key})
                    if hasattr(source_client, "_http_client"):
                        source_client._http_client.api_key = source_key
                        source_client._http_client.api_secret = source_secret
                    logger.info("[HotReload] SOURCE client credentials applied (id=%s)",
                                donor_id if donor_creds else f"{target_id}-fallback")

                main_client = getattr(self.stage1_monitor, "main_client", None)
                if main_client:
                    main_client.api_key = main_key
                    main_client.api_secret = main_secret
                    if hasattr(main_client, "connector"):
                        main_client.connector.api_key = main_key
                        main_client.connector.api_secret = main_secret
                        if hasattr(main_client.connector, "session") and hasattr(main_client.connector.session, "headers"):
                            main_client.connector.session.headers.update({"X-BAPI-API-KEY": main_key})
                    if hasattr(main_client, "_http_client"):
                        main_client._http_client.api_key = main_key
                        main_client._http_client.api_secret = main_secret
                    logger.info("[HotReload] MAIN client credentials applied (TARGET id=%s)", target_id)

            # ---- Stage2 (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ) ‚Äî –≤—Å–µ–≥–¥–∞ TARGET ----
            if getattr(self, "stage2_system", None):
                s2 = self.stage2_system

                # –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(s2, "api_key"):
                    s2.api_key = main_key
                    s2.api_secret = main_secret

                # –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è copy_manager.client –∏ —Ç.–ø.)
                if hasattr(s2, "client"):
                    s2.client.api_key = main_key
                    s2.client.api_secret = main_secret

                if hasattr(s2, "copy_manager") and s2.copy_manager:
                    cm = s2.copy_manager
                    if hasattr(cm, "api_key"):
                        cm.api_key = main_key
                        cm.api_secret = main_secret
                    if hasattr(cm, "client"):
                        cm.client.api_key = main_key
                        cm.client.api_secret = main_secret

                logger.info("[HotReload] Stage2 credentials applied (TARGET)")

            # ---- –æ–±–Ω–æ–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ETS (–∫–∞–∫ –±—ã–ª–æ) ----
            try:
                import enhanced_trading_system_final_fixed as ets
                ets.SOURCE_API_KEY = source_key
                ets.SOURCE_API_SECRET = source_secret
                ets.MAIN_API_KEY = main_key
                ets.MAIN_API_SECRET = main_secret
                logger.info("[HotReload] ETS module globals updated with creds")
            except Exception as e:
                logger.warning("[HotReload] Could not update ETS globals: %s", e)

            return True

        except Exception as e:
            logger.error("[HotReload] Failed to load/apply credentials: %s", e, exc_info=True)
            return False



    # ---- PATCHED ----
    async def _on_keys_saved(self):
        """
        –ì–æ—Ä—è—á–∞—è –∑–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–π:
        ‚Ä¢ –ù–ï —Ä–µ—Å—Ç–∞—Ä—Ç–∏–º Telegram
        ‚Ä¢ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stage‚Äë1/Stage‚Äë2
        ‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ë–î –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
        ‚Ä¢ –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û –ø–∞—Ç—á–∏–º Supervisor
        ‚Ä¢ –ê–≤—Ç–æ‚Äë–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Stage‚Äë2
        """
        import sys, importlib, asyncio
        from contextlib import suppress

        logger.info("[HotReload] Starting trading systems after keys update")
        try:
            # 0) –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ TARGET –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏–ª—Å—è –≤ –ë–î
            try:
                try:
                    from app.database_security_implementation import CredentialsStore
                except Exception:
                    from database_security_implementation import CredentialsStore
                store = CredentialsStore()

                target_id = (getattr(self, "TARGET_ACCOUNT_ID", None)
                             or getattr(getattr(self, "config", object()), "TARGET_ACCOUNT_ID", None)
                             or 1)
                have_main = store.get_account_credentials(int(target_id))
                if not have_main or not all(have_main):
                    logger.warning("[HotReload] Keys still not found after save (TARGET id=%s)", target_id)
                    return
            except Exception as e:
                logger.error("[HotReload] Failed to verify keys in DB: %s", e, exc_info=True)
                return

            # 1) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            with suppress(Exception):
                await send_telegram_alert("üîë **–ö–õ–Æ–ß–ò –°–û–•–†–ê–ù–ï–ù–´**\n\n–ó–∞–ø—É—Å–∫–∞—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã...")

            # 2) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –ø–∞—Ç—á
            with suppress(Exception):
                try:
                    ns_mod = (sys.modules.get("network_supervisor")
                              or sys.modules.get("network_supervisor_fix")
                              or importlib.import_module("network_supervisor_fix"))
                except Exception:
                    ns_mod = importlib.import_module("network_supervisor")

                ns_fn = (getattr(ns_mod, "patch_trading_system_with_supervisor", None)
                         or getattr(ns_mod, "patch_trading_system", None))
                if callable(ns_fn):
                    ns_fn()
                    logger.info("[HotReload] Network Supervisor patch applied")
                else:
                    logger.info("[HotReload] Network Supervisor patch skipped (module/func not present)")

            # 3) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏ –ö–†–û–ú–ï Telegram
            await self._cancel_active_tasks(names_to_keep=frozenset({"Stage2_TelegramBot"}))

            # 4) –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç–æ–ø–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
            if getattr(self, "stage1_monitor", None) and hasattr(self.stage1_monitor, "stop"):
                with suppress(Exception):
                    await self.stage1_monitor.stop()
                    logger.info("[HotReload] Stage‚Äë1 stopped")

            if getattr(self, "stage2_system", None) and hasattr(self.stage2_system, "stop"):
                with suppress(Exception):
                    await self.stage2_system.stop()
                    logger.info("[HotReload] Stage‚Äë2 stopped")

            # –ù–µ–±–æ–ª—å—à–æ–π –¥—Ä–µ–Ω–∞–∂ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await asyncio.sleep(0.5)

            # 5) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
            await self._initialize_stage1_monitor()
            logger.info("[HotReload] Stage‚Äë1 monitor initialized")

            await self._initialize_stage2_system()
            logger.info("[HotReload] Stage‚Äë2 system initialized")

            # >>> –í–ê–ñ–ù–û: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –±–æ—Ç–∞
            try:
                self._refresh_bot_refs("after Stage1/Stage2 reinit")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after Stage1/Stage2 reinit)")

            # Pass the copy_state object from stage2 to stage1
            if self.stage1_monitor and self.stage2_system and hasattr(self.stage1_monitor, 'set_copy_state_ref'):
                state_ref = getattr(self.stage2_system, 'copy_state', None)
                if state_ref:
                    self.stage1_monitor.set_copy_state_ref(state_ref)
                    logger.info("‚úÖ Propagated copy_state from Stage2 to Stage1.")

            # 6) –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–ª—é—á–∏
            if not await self._load_and_apply_credentials():
                raise RuntimeError("Failed to load/apply credentials to systems")
            logger.info("[HotReload] Credentials loaded and applied to all systems")

            # –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π ‚Äî –µ—â—ë —Ä–∞–∑
            try:
                self._refresh_bot_refs("after credentials apply (hot)")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after credentials apply)")

            # 6b) –ê–í–¢–û‚Äë–ê–ö–¢–ò–í–ê–¶–ò–Ø Stage‚Äë2 (–∫–ª—é—á–µ–≤–æ–π —Ñ–∏–∫—Å)
            try:
                self.system_active = True
                s2 = getattr(self, "stage2_system", None)
                if s2:
                    if hasattr(s2, "copy_enabled"):
                        s2.copy_enabled = True
                    if hasattr(s2, "active"):
                        s2.active = True

                    start_coro = (getattr(s2, "start_copying", None)
                                  or getattr(s2, "enable_copying", None))
                    if callable(start_coro):
                        res = start_coro()
                        if hasattr(res, "__await__"):
                            await res
                    logger.info("[HotReload] Stage‚Äë2 auto‚Äëactivated (active=True, copy_enabled=True)")
                else:
                    logger.warning("[HotReload] Stage‚Äë2 instance is missing ‚Äî auto‚Äëactivation skipped")
            except Exception:
                logger.exception("[HotReload] Failed to auto‚Äëactivate Stage‚Äë2")

            # –ò –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            try:
                self._refresh_bot_refs("after Stage2 auto-activation (hot)")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after Stage2 auto-activation)")

            # 7) –ó–∞–ø—É—Å–∫–∞–µ–º Stage‚Äë1
            if self.stage1_monitor:
                t1 = asyncio.create_task(self.stage1_monitor.start(), name="Stage1_Monitor")
                self.active_tasks.add(t1)
                logger.info("[HotReload] Stage‚Äë1 monitoring task created")

            # 8) –ó–∞–ø—É—Å–∫–∞–µ–º Stage‚Äë2
            if self.stage2_system:
                t2 = asyncio.create_task(self._pick_stage2_start_coro(self.stage2_system),
                                         name="Stage2_CopySystem")
                self.active_tasks.add(t2)
                logger.info("[HotReload] Stage‚Äë2 copy system task created")

            # 9) Health monitor ‚Äî —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç
            if not any(t.get_name() == "SystemMonitor" and not t.done() for t in self.active_tasks):
                hm = asyncio.create_task(self._system_health_monitor(), name="SystemMonitor")
                self.active_tasks.add(hm)
                logger.info("[HotReload] System health monitor task created")

            # 10) –§–∏–Ω–∞–ª
            self.system_active = True
            logger.info("[HotReload] Trading systems started successfully with credentials")

            # –î–∞–¥–∏–º WebSocket‚Äô—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await asyncio.sleep(2)

            with suppress(Exception):
                await send_telegram_alert(
                    "‚úÖ **–¢–û–†–ì–û–í–´–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´**\n\n"
                    "‚Ä¢ –ö–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úÖ\n"
                    "‚Ä¢ Stage‚Äë1: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ\n"
                    "‚Ä¢ Stage‚Äë2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–û ‚úÖ\n"
                    "‚Ä¢ Telegram Bot: —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª ‚úÖ\n"
                    "‚Ä¢ WebSocket: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è... ‚è≥"
                )

        except Exception as e:
            logger.error("[HotReload] Error during systems start: %s", e, exc_info=True)
            with suppress(Exception):
                await send_telegram_alert(
                    "‚ö†Ô∏è **–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú**\n\n"
                    f"{str(e)}\n\n"
                    "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞."
                )


    async def _auto_activate_stage2(self) -> None:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è Stage‚Äë2 –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫:
          - –∫–ª—é—á–∏ –µ—Å—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã,
          - Stage‚Äë1/Stage‚Äë2 –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã,
          - Telegram —É–∂–µ –ø–æ–¥–Ω—è—Ç.

        –ü–æ–Ω–∏–º–∞–µ—Ç –æ–±–µ —Å—Ö–µ–º—ã —Ñ–ª–∞–≥–æ–≤: (active, copy_enabled) –∏ (active, enabled).
        –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–µ–Ω ‚Äî –º–æ–∂–Ω–æ –∑–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
        """
        s2 = getattr(self, "stage2_system", None)
        if not s2:
            return

        # –í—ã—è—Å–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        active = bool(getattr(s2, "active", False))
        copy_enabled = (
            getattr(s2, "copy_enabled", None)
            if hasattr(s2, "copy_enabled") else
            getattr(s2, "enabled", None)
        )

        # –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if active:
            return

        # –í–∫–ª—é—á–∞–µ–º ¬´—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –≤—ã–∫–ª—é—á–µ–Ω
        if isinstance(copy_enabled, bool) and copy_enabled is False:
            try:
                setattr(s2, "copy_enabled", True)
            except Exception:
                # –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .enabled ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ
                try:
                    setattr(s2, "enabled", True)
                except Exception:
                    pass

        # –ü—Ä–æ–±—É–µ–º —à—Ç–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        start_like = None
        for name in ("enable", "activate", "start_copying", "start"):
            fn = getattr(s2, name, None)
            if callable(fn):
                start_like = fn
                break

        if start_like:
            with suppress(Exception):
                rv = start_like()              # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π?
                if asyncio.iscoroutine(rv):
                    await rv                   # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
                # –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å–∞–º –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç active=True ‚Äî –æ—Ç–ª–∏—á–Ω–æ
                if getattr(s2, "active", False):
                    return

        # –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∫ fall‚Äëback
        with suppress(Exception):
            setattr(s2, "active", True)

        self.system_active = True
        # —á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å WS/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
        await asyncio.sleep(0.1)

    async def start_integrated_system(self):
        """
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bootstrap:
        1) –í—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º Telegram, —á—Ç–æ–±—ã /keys –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω.
        2) –ï—Å–ª–∏ –∫–ª—é—á–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º; –∏–Ω–∞—á–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–π.
        3) –ü–∞—Ç—á–∏–º Network Supervisor (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ, –±–µ–∑ –∂—ë—Å—Ç–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è).
        4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stage-1/Stage-2.
        5) –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –≤ –æ–±–∞ Stage'–∞ –∏ –ê–í–¢–û-–ê–ö–¢–ò–í–ò–†–£–ï–ú Stage-2.
        6) –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        # >>> signal handlers (Ctrl+C / SIGTERM ‚Üí –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π event loop
        loop = asyncio.get_running_loop()
        try:
            for sig in (signal.SIGINT, signal.SIGTERM):
                loop.add_signal_handler(
                    sig, lambda s=sig: asyncio.create_task(self._initiate_shutdown(s))
                )
            self._defer_signal_setup = False
            logger.debug("Signal handlers installed for SIGINT/SIGTERM")
        except (NotImplementedError, RuntimeError):
            # Windows/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è/–Ω–µ main-thread ‚Üí –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π KeyboardInterrupt
            logger.debug("Signal handlers not supported in this environment")

        try:
            self.start_time = time.time()  # –ù–û–í–û–ï: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            self.system_active = True

            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –≤ –ë–î
            if sys_logger:
                with suppress(Exception):
                    sys_logger.log_startup("IntegratedSystem", {
                        "environment": os.getenv("ENVIRONMENT", "unknown"),
                        "start_time": datetime.now().isoformat()
                    })

            # –®–∞–ø–∫–∞
            print("\nüöÄ BYBIT COPY TRADING SYSTEM - –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–£–°–ö")
            print("=" * 80)
            print("–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
            print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (WebSocket + API)")
            print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 2: –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (Kelly + Trailing + Orders)")
            print("‚îú‚îÄ‚îÄ Telegram Bot: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            print("‚îî‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            print("=" * 80)

            # 0) Telegram ‚Äî –≤—Å–µ–≥–¥–∞ (—á—Ç–æ–±—ã –±—ã–ª /keys)
            if sys_logger:
                with suppress(Exception):
                    sys_logger.log_startup("TelegramBot")
            await self._initialize_telegram_bot()

            # 1) –ù–µ—Ç –∫–ª—é—á–µ–π? ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏—Ö ¬´–≥–æ—Ä—è—á—É—é¬ª –∑–∞–ø–∏—Å—å
            if not self._have_keys():
                await self._wait_for_keys()

            # 2) –ü–∞—Ç—á Supervisor (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏)
            try:
                ns_mod = (sys.modules.get("network_supervisor")
                          or sys.modules.get("network_supervisor_fix")
                          or importlib.import_module("network_supervisor_fix"))
            except Exception:
                ns_mod = importlib.import_module("network_supervisor")  # –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–ª–∏–∞—Å

            ns_fn = (getattr(ns_mod, "patch_trading_system_with_supervisor", None)
                     or getattr(ns_mod, "patch_trading_system", None))
            if callable(ns_fn):
                ns_fn()  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                logger.info("Network Supervisor patch applied")
            else:
                logger.info("Network Supervisor patch skipped (module/func not present)")

            # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stage'–æ–≤
            if sys_logger:
                with suppress(Exception):
                    sys_logger.log_startup("Stage1Monitor")
            await self._initialize_stage1_monitor()

            if sys_logger:
                with suppress(Exception):
                    sys_logger.log_startup("Stage2System")
            await self._initialize_stage2_system()

            # >>> –í–ê–ñ–ù–û: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ
            try:
                self._refresh_bot_refs("after Stage1/Stage2 init")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after Stage1/Stage2 init)")

            # 4) –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –∑–∞–≥—Ä—É–∑–∏–º –∏ –ø—Ä–∏–º–µ–Ω–∏–º –∫–ª—é—á–∏ –≤ –æ–±–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
            with suppress(Exception):
                applied = await self._load_and_apply_credentials()
                logger.info("Startup credentials applied: %s", applied)
                if sys_logger and applied:
                    with suppress(Exception):
                        sys_logger.log_event(
                            "INFO", "IntegratedSystem",
                            "Credentials applied at startup",
                            {"accounts_count": len(applied) if isinstance(applied, list) else 1}
                        )

            # –ü–æ–¥—Ç—è–Ω–µ–º —Å—Å—ã–ª–∫–∏ –µ—â—ë —Ä–∞–∑ (–ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –æ–Ω–∏ —Ç–æ—á–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã)
            try:
                self._refresh_bot_refs("after credentials apply")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after credentials apply)")

            # 5) –ê–í–¢–û-–ê–ö–¢–ò–í–ê–¶–ò–Ø Stage-2 —Å –û–¢–õ–û–ñ–ï–ù–ù–û–ô —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
            try:
                self.system_active = True

                s2 = getattr(self, "stage2_system", None)
                if s2:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–ª—Å—è –Ω–∞ active=False
                    if hasattr(s2, "copy_enabled"):
                        s2.copy_enabled = True
                    if hasattr(s2, "active"):
                        s2.active = True

                    async def delayed_handler_registration(system_ref, stage2_ref, retries=10, delay=0.5):
                        """
                        –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Stage2 –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ + —Å—Ç–∞—Ä—Ç–æ–≤—ã–π reconcile.
                        –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞: stage1_monitor.websocket_manager –∏ handle_position_signal.
                        """
                        await asyncio.sleep(3.0)  # –¥–∞—ë–º —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–Ω—è—Ç—å—Å—è

                        attempt = 0
                        ws_mgr = None

                        while attempt <= retries:
                            attempt += 1

                            ws_mgr = getattr(getattr(system_ref, "stage1_monitor", None), "websocket_manager", None)

                            # –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ —É Stage2?
                            if ws_mgr and hasattr(stage2_ref, "handle_position_signal"):
                                try:
                                    # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
                                    exists = False
                                    try:
                                        lst = ws_mgr.message_handlers.get("position_update", [])
                                        # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ bound-–º–µ—Ç–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                                        exists = any(h is stage2_ref.handle_position_signal for h in lst)
                                    except Exception:
                                        pass

                                    if not exists:
                                        ws_mgr.register_handler("position_update", stage2_ref.handle_position_signal)
                                        logger.info("‚úÖ DELAYED FIX: Stage2 handler registered for 'position_update'")
                                    else:
                                        logger.info("‚ÑπÔ∏è Stage2 handler already registered for 'position_update'")

                                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                                    try:
                                        handlers_cnt = len(ws_mgr.message_handlers.get("position_update", []))
                                    except Exception:
                                        handlers_cnt = "N/A"
                                    logger.info(
                                        "üéØ CRITICAL SUCCESS: Stage2 handler READY ‚Äî copying WILL work! "
                                        f"(handlers={handlers_cnt}, active={getattr(stage2_ref, 'active', 'N/A')}, "
                                        f"copy_enabled={getattr(stage2_ref, 'copy_enabled', 'N/A')})"
                                    )

                                    # --- –°—Ç–∞—Ä—Ç–æ–≤—ã–π reconcile: –ø—Ä–æ–≥–Ω–∞—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                                    try:
                                        source_client = getattr(getattr(system_ref, "stage1_monitor", None), "source_client", None)
                                        if source_client and hasattr(source_client, "get_positions"):
                                            src_positions = await source_client.get_positions()
                                            if src_positions:
                                                logger.info(f"üîÑ Initial SOURCE‚ÜíMAIN reconcile: {len(src_positions)} positions")
                                                for pos in src_positions:
                                                    position_data = {
                                                        "symbol": pos.get("symbol"),
                                                        "side": pos.get("side"),
                                                        "size": str(pos.get("size", 0)),
                                                        "markPrice": str(pos.get("markPrice", pos.get("avgPrice", 0))),
                                                        "unrealisedPnl": str(pos.get("unrealisedPnl", 0)),
                                                    }
                                                    await stage2_ref.handle_position_signal(position_data)
                                                    logger.info(f"Reconciled: {position_data['symbol']} {position_data['side']} size={position_data['size']}")
                                            else:
                                                logger.info("Initial reconcile: no source positions found")
                                    except Exception as e:
                                        logger.error(f"Initial reconcile failed: {e}")

                                    return  # –≤—Å—ë –æ–∫, –≤—ã—Ö–æ–¥–∏–º
                                except Exception as e:
                                    logger.error(f"Delayed registration failed on attempt {attempt}: {e}")

                            await asyncio.sleep(delay)

                        logger.error("‚ùå CRITICAL FAILURE: Stage2 handler NOT registered ‚Äî positions WON'T copy!")
                        if not ws_mgr:
                            logger.error("   Reason: stage1_monitor.websocket_manager is not available after retries")

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –° –ü–ï–†–ï–î–ê–ß–ï–ô –°–°–´–õ–û–ö
                    asyncio.create_task(delayed_handler_registration(self, s2))

                    # –í—ã–∑—ã–≤–∞–µ–º start_copying/enable_copying –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    start_coro = getattr(s2, "start_copying", None) or getattr(s2, "enable_copying", None)
                    if callable(start_coro):
                        with suppress(Exception):
                            res = start_coro()
                            if hasattr(res, "__await__"):
                                await res

                    logger.info("Stage-2 activated, handler registration scheduled with correct context")
                    if sys_logger:
                        with suppress(Exception):
                            sys_logger.log_event(
                                "INFO", "Stage2System",
                                "Auto-activated with delayed handler registration"
                            )
                else:
                    logger.warning("Stage-2 instance is missing")

            except Exception as e:
                logger.exception("Failed to activate Stage-2: %s", e)
                if sys_logger:
                    with suppress(Exception):
                        sys_logger.log_error("Stage2System", f"Auto-activation failed: {str(e)}")

            # –ï—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∞–ª–∏—Å—å —É–∂–µ –Ω–∞ ¬´–∂–∏–≤–æ–π¬ª Stage2
            try:
                self._refresh_bot_refs("after Stage2 auto-activation")
            except TypeError:
                self._refresh_bot_refs()
            logger.info("Telegram bot references refreshed (after Stage2 auto-activation)")

            # 6) –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            with suppress(Exception):
                await send_telegram_alert(
                    "üöÄ **–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê**\n"
                    "‚úÖ –≠—Ç–∞–ø 1: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω\n"
                    "‚úÖ –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
                    "‚úÖ Telegram Bot: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ\n"
                    "üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
                )

            # 7) –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤–Ω—É—Ç—Ä–∏)
            await self._run_integrated_monitoring_loop()

        except Exception as e:
            logger.error("Integrated system startup error: %s", e)
            logger.error("Full traceback: %s", traceback.format_exc())
            if sys_logger:
                with suppress(Exception):
                    sys_logger.log_error("IntegratedSystem", str(e), {
                        "traceback": traceback.format_exc()[:500],
                        "phase": "startup"
                    })
            with suppress(Exception):
                await send_telegram_alert(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    async def _initialize_stage1_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 1 ‚Äî —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (FinalTradingMonitor)."""
        try:
            print("\nüì° –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
            print("-" * 50)

            # 1) –°–æ–∑–¥–∞—ë–º –º–æ–Ω–∏—Ç–æ—Ä Stage1
            self.stage1_monitor = FinalTradingMonitor()

            # 2) –ü–∞—Ç—á –ø–æ—á–∏–Ω–∫–∏ WebSocket-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
            if hasattr(self, "_patch_ws_connect"):
                self._patch_ws_connect()

            # 3) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —É Telegram-–±–æ—Ç–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∞–ª–∏—Å—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if hasattr(self, "_refresh_bot_refs"):
                self._refresh_bot_refs()

            print("‚úÖ WebSocket Manager —Å–æ–∑–¥–∞–Ω")
            print("‚úÖ API Clients –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            print("‚úÖ Signal Processor –≥–æ—Ç–æ–≤")
            print("‚úÖ Final Trading Monitor –∞–∫—Ç–∏–≤–µ–Ω")

            logger.info("Stage 1 Monitor initialization completed")

        except Exception as e:
            logger.error(f"Stage 1 initialization error: {e}", exc_info=True)
            try:
                await send_telegram_alert(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≠—Ç–∞–ø–∞ 1: {e}")
            finally:
                raise


    async def _initialize_stage2_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 2 ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞."""
        try:
            print("\nüîÑ –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
            print("-" * 50)

            # 1) –°–æ–∑–¥–∞—ë–º Stage2 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            try:
                from config import MAIN_API_KEY, MAIN_API_SECRET, MAIN_API_URL
            except ImportError:
                MAIN_API_KEY, MAIN_API_SECRET, MAIN_API_URL = None, None, None

            try:
                from stage2_copy_system import COPY_CONFIG, KELLY_CONFIG, TRAILING_CONFIG, RISK_CONFIG
            except ImportError:
                COPY_CONFIG, KELLY_CONFIG, TRAILING_CONFIG, RISK_CONFIG = {}, {}, {}, {}

            self.stage2_system = Stage2CopyTradingSystem(
                base_monitor=self.stage1_monitor,
                main_api_key=MAIN_API_KEY,
                main_api_secret=MAIN_API_SECRET,
                main_api_url=MAIN_API_URL,
                copy_config=COPY_CONFIG,
                kelly_config=KELLY_CONFIG,
                trailing_config=TRAILING_CONFIG,
                risk_config=RISK_CONFIG,
            )

            # Link Stage 2 system to Stage 1 monitor
            if self.stage1_monitor:
                self.stage1_monitor.stage2_system = self.stage2_system

            # 2) –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ —É Telegram-–±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∏/–º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç stage2)
            if hasattr(self, "_refresh_bot_refs"):
                self._refresh_bot_refs()

            # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Stage2
            await self.stage2_system.initialize()

            # ===================================================================
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º Telegram bot —Å —Å–∏—Å—Ç–µ–º–∞–º–∏
            # ===================================================================
            self.integrate_telegram_bot_with_systems()
            # ===================================================================

            # 4) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å LIVE, –µ—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å
            if hasattr(self, "_have_keys") and callable(self._have_keys) and self._have_keys():
                self.stage2_system.system_active = True
                self.stage2_system.copy_enabled = True

            # 5) –û—Ç—á—ë—Ç –æ —Ä–µ–∂–∏–º–µ
            demo_mode = getattr(self.stage2_system, "demo_mode", None)
            if demo_mode is True:
                print("üß™ –†–ï–ñ–ò–ú: DEMO (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
                print("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ù–ï —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è")
            elif demo_mode is False or (getattr(self.stage2_system, "system_active", False) and getattr(self.stage2_system, "copy_enabled", False)):
                print("üî• –†–ï–ñ–ò–ú: LIVE (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)")
                print("üí∞ –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –†–ê–ó–ú–ï–©–ê–Æ–¢–°–Ø")
            else:
                # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥, –µ—Å–ª–∏ —É –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ demo_mode
                print("‚ÑπÔ∏è –†–ï–ñ–ò–ú: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ system_active/copy_enabled")

            # 6) –ë—ã—Å—Ç—Ä—ã–µ sanity-checks –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if hasattr(self.stage2_system, "kelly_calculator"):
                print("‚úÖ Kelly Criterion –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤")
            else:
                print("‚ùå Kelly Criterion –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.warning("Kelly Calculator –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            if hasattr(self.stage2_system, "trailing_manager"):
                print("‚úÖ Trailing Stop Manager –≥–æ—Ç–æ–≤")
            else:
                print("‚ùå Trailing Stop Manager –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.warning("Trailing Manager –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            print("‚úÖ Position Copy Manager —Å–æ–∑–¥–∞–Ω")
            print("‚úÖ Drawdown Controller –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            print("üî• –ë–û–ï–í–û–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù - –ì–û–¢–û–í –ö –ö–û–ü–ò–†–û–í–ê–ù–ò–Æ!")

            logger.info("Stage 2 initialization completed with integration and LIVE MODE activated")

            # –ï—â–µ —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if hasattr(self, "_refresh_bot_refs"):
                self._refresh_bot_refs()
        
            logger.info("Telegram bot references refreshed (after Stage1/Stage2 init)")

        except Exception as e:
            logger.error(f"Stage 2 initialization error: {e}", exc_info=True)
            try:
                await send_telegram_alert(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≠—Ç–∞–ø–∞ 2: {e}")
            finally:
                raise


    def integrate_telegram_bot_with_systems(self):
        """
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ Stage1 –∏ Stage2.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ _initialize_stage2_system().
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_bot
        if not hasattr(self, 'telegram_bot') or self.telegram_bot is None:
            logger.warning("Telegram bot not initialized, skipping integration")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ attach_integrations
        if hasattr(self.telegram_bot, 'attach_integrations'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            self.telegram_bot.attach_integrations(
                monitor=self.stage1_monitor,
                copy_system=self.stage2_system,
                application=self.telegram_application,
                integrated_system=self
            )
            logger.info("‚úÖ Telegram bot integrated with Stage1/Stage2 using attach_integrations")
        else:
            # Fallback: –ø—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
            self.telegram_bot.monitor = self.stage1_monitor
            self.telegram_bot.copy_system = self.stage2_system
            self.telegram_bot.stage2 = self.stage2_system
            self.telegram_bot.integrated_system = self
        
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if hasattr(self, 'telegram_application') and self.telegram_application:
                if not hasattr(self.telegram_application, 'bot_data'):
                    self.telegram_application.bot_data = {}
            
                self.telegram_application.bot_data['stage1_monitor'] = self.stage1_monitor
                self.telegram_application.bot_data['stage2_system'] = self.stage2_system
                self.telegram_application.bot_data['copy_system'] = self.stage2_system
                self.telegram_application.bot_data['integrated_system'] = self
        
            logger.info("‚úÖ Telegram bot integrated with Stage1/Stage2 using direct assignment")
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if self.telegram_bot.copy_system and hasattr(self.telegram_bot.copy_system, 'base_monitor'):
            logger.info("‚úÖ Integration verified: telegram_bot can access base_monitor")
        else:
            logger.warning("‚ö†Ô∏è Integration incomplete: base_monitor not accessible")


    def _refresh_bot_refs(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã –≤ Telegram –±–æ—Ç–µ.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º.
        """
        if not hasattr(self, 'telegram_bot') or self.telegram_bot is None:
            return
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        if hasattr(self, 'stage1_monitor'):
            self.telegram_bot.monitor = self.stage1_monitor
    
        if hasattr(self, 'stage2_system'):
            self.telegram_bot.copy_system = self.stage2_system
            self.telegram_bot.stage2 = self.stage2_system
    
        self.telegram_bot.integrated_system = self
    
        logger.info("Telegram bot references refreshed (monitor & stage2)")


    async def _initialize_telegram_bot(self):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot + –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\nü§ñ TELEGRAM BOT: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
            print("-" * 50)

            # –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–Ω—è—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ –∏ –≤—ã—Ö–æ–¥–∏–º
            if getattr(self, "telegram_bot", None) and getattr(self.telegram_bot, "is_running", False):
                logger.info("Telegram Bot already running ‚Äî start() ignored (idempotent)")
                self._refresh_bot_refs()
                return

            # —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã
            self.telegram_bot = Stage2TelegramBot(copy_system=self.stage2_system)
            # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è /keys ‚Üí ¬´–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞¬ª
            self.telegram_bot.integrated_system = self

            # —Å—Ä–∞–∑—É –ø–æ–¥—Ç—è–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (monitor + stage2)
            self._refresh_bot_refs()

            await self.telegram_bot.start()

            # ‚Üì‚Üì‚Üì –í–°–¢–ê–í–ö–ê: –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /keys ‚Üì‚Üì‚Üì
            # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥–≤–æ–π–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /keys: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º,
            # –∏–Ω–∞—á–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º fallback –∏–∑ stage2_telegram_bot
            try:
                app = getattr(self.telegram_bot, "app", None) or getattr(self.telegram_bot, "application", None)
                if app and app.bot_data.get("keys_menu_registered"):
                    logger.info("Primary /keys handler is registered ‚Äî skipping fallback")
                else:
                    from stage2_telegram_bot import register_tg_keys_menu as _reg
                    if callable(_reg) and app:
                        _reg(app, self)
                        logger.info("/keys ConversationHandler registered (fallback)")
            except Exception as e:
                logger.warning("Failed to ensure /keys handler: %s", e)

            # –ü–û–°–õ–ï
            print("‚úÖ Stage2TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")
            print("‚úÖ Telegram Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            logger.info("Telegram Bot initialization completed successfully")

        except Exception as e:
            logger.error(f"Telegram Bot initialization error: {e}")
            print(f"‚ö†Ô∏è Telegram Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ Telegram Bot")
            logger.warning("System will continue without Telegram Bot")

    def _restart_component_by_task(self, name: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å –¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º.
        –ï—Å–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        if name in {"Stage1_Monitor", "HotReload_Stage1", "HotReload_Stage1_Restart"} and self.stage1_monitor:
            return self.stage1_monitor.start()

        if name in {"Stage2_CopySystem", "Stage2_Copy", "HotReload_Stage2", "HotReload_Stage2_Restart"} and self.stage2_system:
            return self._pick_stage2_start_coro(self.stage2_system)

        if name in {"SystemMonitor", "SystemHealthMonitor", "HotReload_Monitor", "HotReload_Monitor_Restart"} and hasattr(self, "_system_health_monitor"):
            return self._system_health_monitor()

        if name in {"Stage2_TelegramBot"} and getattr(self, "telegram_bot", None):
            return self.telegram_bot.start()

        return None


    async def _run_integrated_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (—Å –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
            + —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ë–î –ø–æ–∑–∏—Ü–∏–π –∏ reconcile, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –∏–∑ start().
        """
        import asyncio, inspect, os, traceback

        try:
            print("\nüîÑ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –¶–ò–ö–õ–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
            print("-" * 50)

            # –°–æ–∑–¥–∞—ë–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            tasks = []

            # Stage 1 (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
            if getattr(self, "stage1_monitor", None):
                t = asyncio.create_task(self.stage1_monitor.start(), name="Stage1_Monitor")
                tasks.append(t)
                self.active_tasks.add(t)
                print("‚úÖ Stage 1 monitoring task created")

            # Stage 2 (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
            if getattr(self, "stage2_system", None):
                t = asyncio.create_task(self.stage2_system.start_system(), name="Stage2_CopySystem")
                tasks.append(t)
                self.active_tasks.add(t)
                print("‚úÖ Stage 2 copy system task created")

            # === Telegram Bot (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å—Ç–∞—Ä—Ç + –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏) ===
            if getattr(self, "telegram_bot", None):
                async def _run_tg():
                    while not getattr(self, "should_stop", False):
                        try:
                            await self.telegram_bot.start()
                            while not getattr(self, "should_stop", False):
                                await asyncio.sleep(5)
                            break
                        except Exception as e:
                            logger.warning("Telegram bot crashed: %r. Restart in 5s ...", e)
                            sys_logger.log_reconnect("TelegramBot", "PTB Application",
                                                     self.integrated_stats.get('telegram_restarts', 0) + 1)
                            await asyncio.sleep(5)

                tg_task = asyncio.create_task(_run_tg(), name="Stage2_TelegramBot")
                tasks.append(tg_task)
                self.active_tasks.add(tg_task)
                print("‚úÖ Telegram Bot task created")

            # –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä/healthcheck
            t = asyncio.create_task(self._system_health_monitor(), name="SystemMonitor")
            tasks.append(t)
            self.active_tasks.add(t)
            print("‚úÖ System health monitor task created")

            # --- Optional WEB API ---
            self.web_api_service = None
            if os.getenv("WEB_API_ENABLE", "0") == "1":
                host = os.getenv("WEB_API_HOST", "0.0.0.0")
                port = int(os.getenv("WEB_API_PORT", "8080"))
                reload_flag = os.getenv("WEB_API_RELOAD", "0") == "1"  # –≤ prod –¥–µ—Ä–∂–∏–º 0
                self.web_api_service = WebAPIService(host=host, port=port, reload=reload_flag)
                await self.web_api_service.start()
                print("‚úÖ Web API task created")

            # === –ù–û–í–û–ï: —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–π –≤ –ë–î –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ reconcile ===
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å WebSocketManager Stage-1

            ws = None
            if getattr(self, "stage1_monitor", None) is not None:
                ws = getattr(self.stage1_monitor, "websocket_manager", None)

            if ws is not None:
                # ‚ñ∫ –ù–∞–¥—ë–∂–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ WebSocket manager (–¥–ª—è REST reconcile)
                def _resolve_client():
                    # –∏—â–µ–º main/source –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
                    holders = [
                        self,
                        getattr(self, "stage1_monitor", None),
                    ]
                    names = [
                        "main_client", "main_api",
                        "source_client", "source_api",
                    ]
                    found = {}
                    for h in holders:
                        if not h:
                            continue
                        for n in names:
                            try:
                                v = getattr(h, n)
                            except Exception:
                                v = None
                            if v:
                                found[n] = v
                    main = found.get("main_client") or found.get("main_api")
                    source = found.get("source_client") or found.get("source_api")
                    return main, source

                main_client, source_client = _resolve_client()

                if main_client and not getattr(ws, "main_client", None):
                    ws.main_client = main_client
                if source_client and not getattr(ws, "source_client", None):
                    ws.source_client = source_client
                if not getattr(ws, "api_client", None):
                    ws.api_client = main_client or source_client

                logger.info(
                    "üîó WS API clients bound (main=%s, source=%s, api=%s)",
                    bool(getattr(ws, "main_client", None)),
                    bool(getattr(ws, "source_client", None)),
                    bool(getattr(ws, "api_client", None)),
                )

                # 1) –û—á–µ—Ä–µ–¥—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–π –≤ –ë–î ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
                if not hasattr(ws, "_positions_db_queue"):
                    ws._positions_db_queue = asyncio.Queue(maxsize=1000)
                    logger.info("‚úÖ WS positions DB queue created (maxsize=1000)")


                # 2) –í–æ—Ä–∫–µ—Ä—ã –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                async def _fallback_db_worker(queue, worker_id: int, stop_owner):
                    """–ï—Å–ª–∏ —É ws –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ _positions_db_worker ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –≤–æ—Ä–∫–µ—Ä."""
                    try:
                        try:
                            from app.positions_db_writer import positions_writer
                        except ImportError:
                            from positions_db_writer import positions_writer
                        while not getattr(stop_owner, "should_stop", False):
                            try:
                                account_id, pos = await queue.get()
                                try:
                                    await positions_writer.upsert_position(pos, account_id)
                                except Exception as e:
                                    logger.error("DB writer error: %s", e)
                                finally:
                                    queue.task_done()
                            except asyncio.CancelledError:
                                break
                            except Exception as e:
                                logger.error("DB worker %s error: %s", worker_id, e)
                                await asyncio.sleep(0)
                    finally:
                        logger.info("DB worker %s stopped", worker_id)

                make_worker = getattr(ws, "_positions_db_worker", None)
                for i in (1, 2):
                    if callable(make_worker):
                        wtask = asyncio.create_task(make_worker(i), name=f"WS_DBW_{i}")
                    else:
                        wtask = asyncio.create_task(_fallback_db_worker(ws._positions_db_queue, i, ws),
                                                   name=f"WS_DBW_{i}")
                    tasks.append(wtask)
                    self.active_tasks.add(wtask)
                logger.info("‚úÖ Positions DB workers started (2)")

                # 3) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π reconcile —á–µ—Ä–µ–∑ REST (—É–≤–∞–∂–∞–µ–º RECONCILE_ENABLE)
                reconcile_coro = getattr(ws, "reconcile_positions_from_rest", None)
                reconcile_enabled = os.getenv("RECONCILE_ENABLE", "1") == "1"
                if callable(reconcile_coro) and reconcile_enabled:
                    rtask = asyncio.create_task(reconcile_coro(), name="Stage1_PositionsReconcile")
                    tasks.append(rtask)
                    self.active_tasks.add(rtask)
                    logger.info("‚úÖ Positions reconciliation task started")
                elif callable(reconcile_coro) and not reconcile_enabled:
                    logger.info("Positions reconciliation is disabled; task not started")
                else:
                    logger.warning("reconcile_positions_from_rest() not found in websocket_manager")

            print(f"\nüéØ –ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á")
            print("üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            print("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ Telegram Bot")
            print("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")

            # --- –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –Ω–µ –≤–∞–ª–∏–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ —É–ø–∞–ª –æ–¥–∏–Ω –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
            while not getattr(self, "should_stop", False):
                if not self.active_tasks:
                    logger.warning("No active tasks left; breaking orchestrator loop")
                    break

                done, pending = await asyncio.wait(self.active_tasks, return_when=asyncio.FIRST_COMPLETED)

                for t in done:
                    name = t.get_name()
                    err = None
                    try:
                        _ = t.result()
                    except asyncio.CancelledError:
                        logger.info("Task %s cancelled", name)
                    except Exception as e:
                        err = e

                    if err is None:
                        logger.info("Task %s completed normally", name)
                    else:
                        logger.warning(
                            "Task %s exited with error: %r. Policy: restart only this component.",
                            name, err
                        )
                        sys_logger.log_error(name, f"Component crashed: {str(err)}", {"will_restart": True})
                        self.integrated_stats['critical_errors'] = self.integrated_stats.get('critical_errors', 0) + 1

                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                    try:
                        self.active_tasks.remove(t)
                    except KeyError:
                        pass

                    # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥–ª—è –Ω–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø–æ –∏–º–µ–Ω–∏
                    try:
                        if name.startswith("WS_DBW_") and ws is not None:
                            idx = int(name.split("_")[-1])
                            make_worker = getattr(ws, "_positions_db_worker", None)
                            if callable(make_worker):
                                nt = asyncio.create_task(make_worker(idx), name=name)
                            else:
                                nt = asyncio.create_task(_fallback_db_worker(ws._positions_db_queue, idx, ws), name=name)
                            self.active_tasks.add(nt)
                            logger.info("%s restarted", name)
                            continue

                        if name == "Stage1_PositionsReconcile" and ws is not None:
                            if os.getenv("RECONCILE_ENABLE", "1") == "1":
                                reconcile_coro = getattr(ws, "reconcile_positions_from_rest", None)
                                if callable(reconcile_coro):
                                    nt = asyncio.create_task(reconcile_coro(), name=name)
                                    self.active_tasks.add(nt)
                                    logger.info("%s restarted", name)
                                    continue
                            logger.info("Reconcile disabled; skip restart for Stage1_PositionsReconcile")
                            continue

                        # –ò–Ω–∞—á–µ ‚Äî –æ—Ç–¥–∞—ë–º –Ω–∞ –æ–±—â–∏–π —Ö—É–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        restart_hook = getattr(self, "_restart_component_by_task", None)
                        if restart_hook is None:
                            logger.debug("_restart_component_by_task not implemented; skipping for %s", name)
                        else:
                            coro_or_fn = self._restart_component_by_task(name)
                            if coro_or_fn is None:
                                logger.info("No restart action for task %s ‚Äî skipping.", name)
                            else:
                                if inspect.isawaitable(coro_or_fn):
                                    await coro_or_fn
                                    sys_logger.log_event("INFO", name, f"{name} restarted successfully")
                                    if 'Stage1' in name:
                                        self.integrated_stats['stage1_restarts'] = self.integrated_stats.get('stage1_restarts', 0) + 1
                                    elif 'Stage2' in name:
                                        self.integrated_stats['stage2_restarts'] = self.integrated_stats.get('stage2_restarts', 0) + 1
                                elif callable(coro_or_fn):
                                    result = coro_or_fn()
                                    if inspect.isawaitable(result):
                                        await result
                                else:
                                    logger.warning("Restart hook for %s returned non-awaitable %r; skipping.", name, type(coro_or_fn))

                    except Exception as re:
                        logger.error("Component restart failed for %s: %s", name, re)
                        sys_logger.log_error(name, f"Restart failed: {str(re)}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á
                self.active_tasks = {t for t in self.active_tasks if not t.done()}

            print("\n‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        except KeyboardInterrupt:
            logger.info("Keyboard interrupt received, shutting down...")
            sys_logger.log_event("INFO", "IntegratedSystem", "Shutdown initiated by user (Ctrl+C)")
            for t in list(self.active_tasks):
                if not t.done():
                    t.cancel()
            await asyncio.gather(*self.active_tasks, return_exceptions=True)

        except Exception as e:
            logger.error("Integrated monitoring loop error: %s", e)
            logger.error("Full traceback: %s", traceback.format_exc())
            sys_logger.log_error("IntegratedSystem", str(e), {
                "traceback": traceback.format_exc()[:500],
                "phase": "monitoring_loop"
            })
            try:
                await send_telegram_alert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            except Exception:
                pass
            raise

        finally:
            # –ú—è–≥–∫–∏–π –æ—Å—Ç–∞–Ω–æ–≤ –ø–æ–¥—Å–∏—Å—Ç–µ–º –∏ –¥—Ä–µ–Ω–∞–∂ —Å–µ—Ç–µ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤–∞–∂–Ω–æ –¥–ª—è aiohttp)
            try:
                await self._graceful_subsystems_stop()
            except Exception:
                logger.exception("Graceful subsystems stop failed")

    async def _initiate_shutdown(self, sig: signal.Signals | str = "SIGTERM") -> None:
        """
        –í–Ω–µ—à–Ω—è—è —Ç–æ—á–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        `_graceful_subsystems_stop()` –∏ `_close_all_http_clients()`.
        """
        if getattr(self, "_stopping", False):
            return
        self._stopping = True

        lg = logging.getLogger("trading_bot")
        try:
            name = sig.name if hasattr(sig, "name") else str(sig)
        except Exception:
            name = str(sig)
        lg.warning("Shutdown requested (%s)", name)

        # 1) —Ç–≤–æ—è ¬´–∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è¬ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∏—Å—Ç–µ–º
        with suppress(Exception):
            await self._graceful_subsystems_stop()

        # 2) —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥—Ä–µ–Ω–∞–∂ HTTP/WS –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        with suppress(Exception):
            await self._close_all_http_clients()

        # 3) –æ—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∞—Å–∫–∏ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        for t in list(getattr(self, "active_tasks", [])):
            if not t.done():
                t.cancel()
                with suppress(asyncio.CancelledError):
                    await t
            with suppress(Exception):
                self.active_tasks.discard(t)

        # 4) –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ü–∏–∫–ª–∞
        with suppress(Exception):
            await asyncio.get_running_loop().shutdown_asyncgens()

        lg.info("Stopped cleanly")


    async def _graceful_subsystems_stop(self) -> None:
        """–ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∏—Å—Ç–µ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ü–∏–∫–ª–æ–≤
        try:
            setattr(self, "should_stop", True)
        except Exception:
            pass

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–µ–ª–µ–≥—Ä–∞–º –ø–µ—Ä–≤—ã–º ‚Äî —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å polling
        if getattr(self, "telegram_bot", None) and hasattr(self.telegram_bot, "stop"):
            with suppress(Exception):
                await self.telegram_bot.stop()
                logger.info("Telegram bot stopped")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stage2/Stage1
        if getattr(self, "stage2_system", None) and hasattr(self.stage2_system, "stop"):
            with suppress(Exception):
                await self.stage2_system.stop()

        if getattr(self, "stage1_monitor", None) and hasattr(self.stage1_monitor, "stop"):
            with suppress(Exception):
                await self.stage1_monitor.stop()

        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∞—Å–∫–∏
        for t in list(getattr(self, "active_tasks", [])):
            if not t.done():
                t.cancel()
                with suppress(asyncio.CancelledError):
                    await t
            self.active_tasks.discard(t)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥—Ä–µ–Ω–∞–∂ HTTP/WS –∫–ª–∏–µ–Ω—Ç–æ–≤
        with suppress(Exception):
            await self._close_all_http_clients()

    async def _close_all_http_clients(self) -> None:
        """
        –ò—â–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∂–∏–≤—ã–µ http-–∫–ª–∏–µ–Ω—Ç—ã –≤ Stage1/Stage2/Telegram.
        –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å .aclose() –∏–ª–∏ .close(),
        –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º (await –¥–ª—è –∫–æ—Ä—É—Ç–∏–Ω).
        """
        candidates = [
            getattr(self, "stage1_monitor", None),
            getattr(self, "stage2_system", None),
            getattr(self, "telegram_bot", None),
        ]
        seen = set()

        async def _maybe_await_call(obj, method_name: str) -> bool:
            """–í—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å; –≤–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω."""
            fn = getattr(obj, method_name, None)
            if not fn:
                return False
            try:
                res = fn()
                if inspect.isawaitable(res):
                    await res
                return True
            except Exception:
                return True  # –º–µ—Ç–æ–¥ –±—ã–ª, –Ω–æ —É–ø–∞–ª ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞—á–∏—Å—Ç–∫–µ
            return False

        async def _close_client_like(obj):
            """–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç/—Å–µ—Å—Å–∏—é —É—Ç–∏–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π (aclose/close), –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ .session/.client."""
            if not obj:
                return
            # —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è aclose (httpx.AsyncClient –∏ –¥—Ä.)
            if await _maybe_await_call(obj, "aclose"):
                return
            # –∑–∞—Ç–µ–º close (aiohttp.ClientSession.close() ‚Äî —Ç–æ–∂–µ –∫–æ—Ä—É—Ç–∏–Ω–∞)
            await _maybe_await_call(obj, "close")

            # –∏–Ω–æ–≥–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è session/client
            inner = getattr(obj, "session", None) or getattr(obj, "client", None)
            if inner:
                await _close_client_like(inner)

        async def _walk(obj):
            if not obj or id(obj) in seen:
                return
            seen.add(id(obj))

            # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–µ—Å—Å–∏–∏
            for attr_name in ("session", "_session", "http", "http_client", "client", "api", "connector"):
                client = getattr(obj, attr_name, None)
                if client:
                    await _close_client_like(client)

            # WebSocket-–ø–æ–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ .aclose(), –∏ .close())
            for field in ("websocket_manager", "ws_manager", "source_ws", "public_ws", "private_ws", "ws", "ws_public", "ws_private"):
                ws = getattr(obj, field, None)
                if ws:
                    # —Å–Ω–∞—á–∞–ª–∞ aclose, –∑–∞—Ç–µ–º close
                    if not await _maybe_await_call(ws, "aclose"):
                        await _maybe_await_call(ws, "close")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–º–æ—Ç—Ä–∏–º ¬´–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ¬ª –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
            try:
                members = vars(obj)  # –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º inspect.getmembers, –∏ –±–µ–∑ –≤—ã–∑–æ–≤–∞ @property
            except Exception:
                members = {}

            for name, val in members.items():
                if name.startswith("_"):
                    continue
                if any(k in name for k in ("api", "client", "session", "manager", "connector", "source", "main", "ws")):
                    try:
                        await _walk(val)
                    except Exception:
                        pass

        for c in candidates:
            try:
                await _walk(c)
            except Exception:
                pass

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ü–∏–∫–ª–∞
        loop = asyncio.get_running_loop()
        try:
            await loop.shutdown_asyncgens()
        except Exception:
            pass

    
    async def _system_health_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            last_health_report = 0
            health_report_interval = 3600  # –ö–∞–∂–¥—ã–π —á–∞—Å
            check_interval = 30            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫

            # –ù–∞–±–æ—Ä –∏–º—ë–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–æ–º
            default_connections = ("source_api", "main_api", "websocket")

            while self.system_active:
                current_time = time.time()

                # 1) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –≤ Telegram
                if current_time - last_health_report > health_report_interval:
                    uptime = current_time - (self.start_time or current_time)
                    uptime_hours = uptime / 3600 if uptime > 0 else 0.0

                    health_report = (
                        f"üè• **–û–¢–ß–ï–¢ –û –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´**\n"
                        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f}—á\n"
                        f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(self.active_tasks)}\n"
                        f"üîÑ –≠—Ç–∞–ø 1: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.stage1_monitor else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                        f"üìã –≠—Ç–∞–ø 2: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.stage2_system else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                        f"ü§ñ Telegram: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if any(getattr(t, 'get_name', lambda: '')().lower().find('telegram') >= 0 and not t.done() for t in self.active_tasks) else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                        f"üéØ –°—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
                    )
                    from contextlib import suppress
                    with suppress(Exception):
                        await send_telegram_alert(health_report)
                        logger.info("System health report sent")
                    last_health_report = current_time

                # 2) –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                monitor = getattr(self, "stage1_monitor", None)
                connmon = None
                if monitor:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ Stage1
                    for name in ("connection_monitor", "connection_monitor_pro", "monitor", "connection_manager"):
                        cm = getattr(monitor, name, None)
                        if cm is not None:
                            connmon = cm
                            break

                # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
                def _get_health_fn(obj):
                    for meth in ("is_connection_healthy", "is_healthy", "check_health"):
                        fn = getattr(obj, meth, None)
                        if callable(fn):
                            return fn
                    return None

                import inspect

                # –§—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
                async def _try_recover(obj, connection_name: str) -> bool:
                    recovered = False
                    for meth in ("_attempt_recovery", "attempt_recovery", "reconnect"):
                        fn = getattr(obj, meth, None)
                        if not callable(fn):
                            continue
                        try:
                            res = fn(connection_name)  # –º–æ–∂–µ—Ç –±—ã—Ç—å sync/async
                            if inspect.isawaitable(res):
                                await res
                            recovered = True
                            break
                        except Exception as e:
                            logger.debug("Recovery via %s on %s failed: %s", meth, obj.__class__.__name__, e)
                    return recovered

                # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã-–Ω–æ—Å–∏—Ç–µ–ª–∏ –º–µ—Ç–æ–¥–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ connmon, –ø–æ—Ç–æ–º —Å–∞–º monitor
                health_candidates = [c for c in (connmon, monitor) if c is not None]

                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)
                for connection_name in default_connections:
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å health-—Ñ—É–Ω–∫—Ü–∏—é —É –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∞ –Ω–∞–π–¥—ë—Ç—Å—è
                    is_ok = None
                    for obj in health_candidates:
                        fn = _get_health_fn(obj)
                        if not fn:
                            continue
                        try:
                            res = fn(connection_name)
                            if inspect.isawaitable(res):
                                res = await res
                            # –û–∂–∏–¥–∞–µ–º boolean; –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ bool ‚Äî —Å—á–∏—Ç–∞–µ–º None (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ)
                            if isinstance(res, bool):
                                is_ok = res
                                break
                        except Exception as e:
                            logger.debug("Health check on %s via %s failed: %s", connection_name, obj.__class__.__name__, e)

                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ—à–∏–±–æ–∫
                    if is_ok is None:
                        continue

                    if not is_ok:
                        logger.warning("Health check failed for %s", connection_name)
                        # ‚Üì‚Üì‚Üì –¥–æ–±–∏–≤–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Üì‚Üì‚Üì
                        try:
                            await self._reload_ws_credentials()
                        except Exception as e:
                            logger.debug("reload_ws_credentials failed: %s", e)
                        # ‚Üë‚Üë‚Üë –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ‚Üë‚Üë‚Üë

                        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è: connmon -> monitor
                        recovered = False
                        for obj in health_candidates:
                            try:
                                if await _try_recover(obj, connection_name):
                                    recovered = True
                                    logger.info("Recovery for %s via %s succeeded", connection_name, obj.__class__.__name__)
                                    break
                            except Exception as e:
                                logger.debug("Recovery dispatcher on %s failed: %s", obj.__class__.__name__, e)

                        if not recovered:
                            logger.debug("No recovery method available for %s", connection_name)

                # 3) –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(check_interval)

        except asyncio.CancelledError:
            logger.info("System health monitor cancelled")
            raise
        except Exception as e:
            logger.error(f"System health monitor error: {e}", exc_info=True)


    
    async def shutdown_system(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (—Å ¬´–ø—ã–ª–µ—Å–æ—Å–æ–º¬ª —Å–µ—Ç–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤)."""
    
        if not self.system_active:
            return
        
        try:
            print("\nüõë –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
            print("-" * 50)

            self.system_active = False

            # 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if self.active_tasks:
                print(f"üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(self.active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")

                for task in self.active_tasks.copy():
                    if not task.done():
                        task.cancel()
                        try:
                            await asyncio.wait_for(task, timeout=5.0)
                        except (asyncio.CancelledError, asyncio.TimeoutError):
                            pass
                        except Exception as e:
                            logger.warning(f"Task shutdown error: {e}")

                self.active_tasks.clear()
                print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

            # 2) –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

            # Stage 2 (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
            if self.stage2_system:
                try:
                    # –ï—Å–ª–∏ —É Stage2 –µ—Å—Ç—å –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    for m in ("shutdown_system", "shutdown", "stop", "close"):
                        fn = getattr(self.stage2_system, m, None)
                        if fn:
                            res = fn() if not inspect.iscoroutinefunction(fn) else fn()
                            if inspect.isawaitable(res):
                                await res
                            break
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≥–ª—É—à–∏–º —Ñ–ª–∞–≥–∏
                    setattr(self.stage2_system, "system_active", False)
                    setattr(self.stage2_system, "copy_enabled", False)
                    print("‚úÖ Stage 2 system shutdown completed")
                    # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É Stage2
                    sys_logger.log_shutdown("Stage2System")
                except Exception as e:
                    logger.warning(f"Stage 2 shutdown error: {e}")
                    sys_logger.log_error("Stage2System", f"Shutdown error: {e}")

            # Stage 1 (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
            if self.stage1_monitor:
                try:
                    # –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π¬ª –º–µ—Ç–æ–¥, –Ω–æ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π _shutdown
                    for m in ("shutdown", "_shutdown", "stop", "close"):
                        fn = getattr(self.stage1_monitor, m, None)
                        if fn:
                            res = fn() if not inspect.iscoroutinefunction(fn) else fn()
                            if inspect.isawaitable(res):
                                await res
                            break
                    print("‚úÖ Stage 1 monitor shutdown completed")
                    # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É Stage1
                    sys_logger.log_shutdown("Stage1Monitor")
                except Exception as e:
                    logger.warning(f"Stage 1 shutdown error: {e}")
                    sys_logger.log_error("Stage1Monitor", f"Shutdown error: {e}")

            # Telegram Bot (PTB v21)
            if self.telegram_bot:
                try:
                    self.telegram_bot.bot_active = False
                    app = getattr(self.telegram_bot, "application", None)
                    if app:
                        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç–∫–ª—é—á–∞–µ–º webhook –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π polling
                        try:
                            await app.bot.delete_webhook(drop_pending_updates=False)
                        except Exception:
                            pass

                        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling
                        upd = getattr(app, "updater", None)
                        if upd and hasattr(upd, "stop"):
                            res = upd.stop()
                            if inspect.isawaitable(res):
                                await res

                        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB
                        if hasattr(app, "stop"):
                            res = app.stop()
                            if inspect.isawaitable(res):
                                await res
                        if hasattr(app, "shutdown"):
                            res = app.shutdown()
                            if inspect.isawaitable(res):
                                await res

                    print("‚úÖ Telegram Bot shutdown completed")
                    # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É TelegramBot
                    sys_logger.log_shutdown("TelegramBot")
                except Exception as e:
                    logger.warning(f"Telegram Bot shutdown error: {e}")
                    sys_logger.log_error("TelegramBot", f"Shutdown error: {e}")

            # 3) –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_uptime = time.time() - self.start_time if hasattr(self, 'start_time') else 0
            self.integrated_stats['total_uptime'] = total_uptime

            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º graceful shutdown —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            sys_logger.log_shutdown("IntegratedSystem", {
                "uptime_seconds": total_uptime,
                "uptime_hours": total_uptime / 3600,
                "stage1_restarts": self.integrated_stats.get('stage1_restarts', 0),
                "stage2_restarts": self.integrated_stats.get('stage2_restarts', 0),
                "critical_errors": self.integrated_stats.get('critical_errors', 0),
                "successful_starts": self.integrated_stats.get('successful_starts', 0)
            })

            try:
                await send_telegram_alert(
                    f"üõë **–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê**\n"
                    f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_uptime/3600:.1f}—á\n"
                    "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
                )
            except Exception as e:
                logger.debug(f"Final telegram alert error: {e}")

            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # 4) –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ ‚Äî –¥–∞—ë–º —Ñ–æ–Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º/—Å–µ—Ç—è–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è
            await asyncio.sleep(0.5)

            # 5) –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á (best-effort)
            pending = [
                t for t in asyncio.all_tasks()
                if t is not asyncio.current_task() and not t.done()
            ]
            if pending:
                logger.info("Cancelling %d remaining tasks...", len(pending))
                for t in pending:
                    t.cancel()
                await asyncio.gather(*pending, return_exceptions=True)

            # 6) –ü—ã–ª–µ—Å–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–µ—Å—Å–∏–π/WS –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            async def _close_maybe_async(obj):
                try:
                    # aclose() ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (httpx.AsyncClient –∏ —Ç.–ø.)
                    if hasattr(obj, "aclose"):
                        res = obj.aclose()
                        if inspect.isawaitable(res):
                            await res
                            return
                    # close() –º–æ–∂–µ—Ç –±—ã—Ç—å sync/async
                    if hasattr(obj, "close"):
                        res = obj.close()
                        if inspect.isawaitable(res):
                            await res
                except Exception as _e:
                    logger.debug(f"silent close error: {_e}")

            for obj in (self.stage1_monitor, self.stage2_system, self.telegram_bot):
                if not obj:
                    continue

                # –ù–∞–∏–±–æ–ª–µ–µ —Ç–∏–ø–∏—á–Ω—ã–µ –ø–æ–ª—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏/—Å–µ—Å—Å–∏—è–º–∏
                for field in (
                    "session", "aiohttp_session", "http_session",
                    "client", "httpx_client", "rest_client", "api_client",
                    "connector", "enterprise_connector"
                ):
                    c = getattr(obj, field, None)
                    if c:
                        # –í–ª–æ–∂–µ–Ω–Ω—ã–µ .session / .client –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞
                        inner = getattr(c, "session", None) or getattr(c, "client", None)
                        if inner:
                            await _close_maybe_async(inner)
                        await _close_maybe_async(c)

                # WebSocket-–ø–æ–ª—è
                for field in (
                    "websocket_manager", "ws_manager",
                    "source_ws", "public_ws", "private_ws",
                    "ws", "ws_public", "ws_private", "wss"
                ):
                    ws = getattr(obj, field, None)
                    if not ws:
                        continue
                    try:
                        if hasattr(ws, "close"):
                            res = ws.close()
                            if inspect.isawaitable(res):
                                await res
                    except Exception as _we:
                        logger.debug(f"ws close ignored: {_we}")

            logger.info("Integrated system shutdown completed")
        
            # –ù–û–í–û–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ –¥—Ä–µ–Ω–∞–∂–µ
            logger.info("All network clients drained")
            print("‚úÖ All network clients drained")

        except Exception as e:
            logger.error(f"System shutdown error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É shutdown
            sys_logger.log_error("IntegratedSystem", str(e), {
                "phase": "shutdown"
            })


# ================================
# –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê
# ================================

async def run_integrated_system():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    system = None
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        system = IntegratedTradingSystem()
        await system.start_integrated_system()
        
    except KeyboardInterrupt:
        logger.info("System interrupted by user")
        print("\nüõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"Critical integrated system error: {e}")
        logger.error(f"Full traceback: {traceback.format_exc()}")
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await send_telegram_alert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        except:
            pass
    finally:
        if system:
            await system.shutdown_system()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ BYBIT COPY TRADING SYSTEM - –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–£–°–ö")
    print("=" * 80)
    print("–ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:")
    print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 1: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (WebSocket + API)")
    print("‚îú‚îÄ‚îÄ –≠—Ç–∞–ø 2: –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (Kelly + Trailing + Orders)")  
    print("‚îú‚îÄ‚îÄ Telegram Bot: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("‚îî‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 80)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "enhanced_trading_system_final_fixed.py",
        "config.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ù–ï–û–ë–•–û–î–ò–ú–´–ï –§–ê–ô–õ–´:")
        for file in missing_files:
            print(f"   - {file}")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    additional_files = [
        ("stage2_copy_system.py", "–°–æ–∑–¥–∞–π—Ç–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"),
        ("stage2_telegram_bot.py", "–°–æ–∑–¥–∞–π—Ç–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
    ]
    
    for file, instruction in additional_files:
        if not os.path.exists(file):
            print(f"‚ö†Ô∏è {file} –Ω–µ –Ω–∞–π–¥–µ–Ω - {instruction}")
    
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if sys.platform == 'win32':
            # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º ProactorEventLoop
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        asyncio.run(run_integrated_system())
        
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("2. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install websockets aiohttp pandas numpy scipy python-telegram-bot")
        print("3. API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ config.py")
        print("4. Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ telegram_cfg.py")

if __name__ == "__main__":
    main()
