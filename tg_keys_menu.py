# -*- coding: utf-8 -*-
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ tg_keys_menu.py
–° –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ CredentialsStore
"""

from __future__ import annotations
import asyncio
import os
import logging
from dataclasses import dataclass
from typing import Optional, Tuple, Dict, Any, List
from enum import Enum
from telegram.error import BadRequest

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ CredentialsStore - –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ app. –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ!
# —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç —Å—Ç–æ—Ä–∞
try:
    from app.database_security_implementation import CredentialsStore
    logger.info("CredentialsStore imported from app.database_security_implementation")
except Exception:
    from database_security_implementation import CredentialsStore
    logger.info("CredentialsStore imported from database_security_implementation (top-level)")


# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID - –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ app. –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ!
try:
    from telegram_cfg import ADMIN_ONLY_IDS, TELEGRAM_CHAT_ID
except ImportError:
    try:
        from app.telegram_cfg import ADMIN_ONLY_IDS, TELEGRAM_CHAT_ID
    except ImportError:
        # Fallback –Ω–∞ ENV
        ADMIN_ONLY_IDS = [int(x) for x in os.getenv("TELEGRAM_ADMIN_IDS", "").split(",") if x.strip().isdigit()]
        TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

# FSM states
(MAIN_MENU, ACCOUNT_SELECT, ACCOUNT_MENU, WAIT_KEY, WAIT_SECRET, 
 CONFIRM_SAVE, MANAGE_MENU) = range(7)

class AccountType(Enum):
    """–¢–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    TARGET = "TARGET"
    DONOR = "DONOR"
    CUSTOM = "CUSTOM"

@dataclass
class KeySession:
    """–°–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏"""
    selected_account_type: Optional[AccountType] = None
    selected_account_id: Optional[int] = None
    account_name: Optional[str] = None
    api_key: Optional[str] = None
    api_secret: Optional[str] = None
    
    def clear_credentials(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö credentials"""
        self.api_key = None
        self.api_secret = None
    
    def get_display_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if self.account_name:
            return self.account_name
        if self.selected_account_type == AccountType.TARGET:
            return f"Target Account (ID: {self.selected_account_id})"
        elif self.selected_account_type == AccountType.DONOR:
            return f"Donor Account (ID: {self.selected_account_id})"
        else:
            return f"Account ID: {self.selected_account_id}"

class AccountManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    @staticmethod
    def get_predefined_accounts() -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ ENV"""
        accounts = {}
        
        # Target account
        target_id = os.getenv("TARGET_ACCOUNT_ID", "1")
        if target_id:
            accounts["target"] = {
                "id": int(target_id),
                "name": "Target Account (Main)",
                "type": AccountType.TARGET,
                "env_key": "TARGET_ACCOUNT_ID"
            }
        
        # Donor account
        donor_id = os.getenv("DONOR_ACCOUNT_ID", "2")
        if donor_id:
            accounts["donor"] = {
                "id": int(donor_id),
                "name": "Donor Account (Source)",
                "type": AccountType.DONOR,
                "env_key": "DONOR_ACCOUNT_ID"
            }
        
        return accounts
    
    @staticmethod
    def get_all_configured_accounts() -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ (Target –∏ Donor),
        –ø–æ–º–µ—á–∞—è, –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –ë–î.
        """
        store = CredentialsStore()
        predefined = AccountManager.get_predefined_accounts()

        result: List[Dict] = []
        for key in ("target", "donor"):
            if key not in predefined:
                continue
            acc = predefined[key]
            has_creds = False
            try:
                creds = store.get_account_credentials(acc["id"])
                # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å 2 –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                has_creds = bool(creds and len(creds) >= 2 and creds[0] and creds[1])
            except Exception as e:
                logger.warning(f"get_account_credentials({acc['id']}) error: {e}")

            result.append({
                "id": acc["id"],
                "name": acc["name"],
                "type": acc["type"],
                "has_credentials": has_creds,
            })

        return result

def _is_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    uid = update.effective_user.id if update.effective_user else 0
    ids = set(ADMIN_ONLY_IDS) if ADMIN_ONLY_IDS else set()
    
    try:
        if TELEGRAM_CHAT_ID:
            ids.add(int(TELEGRAM_CHAT_ID))
    except:
        pass
    
    env_ids = os.getenv("TELEGRAM_ADMIN_IDS", "").split(",")
    for id_str in env_ids:
        if id_str.strip().isdigit():
            ids.add(int(id_str.strip()))
    
    logger.info(f"[/keys] Admin check: user_id={uid}, admin_ids={ids}, result={uid in ids}")
    return uid in ids

def _mask(s: Optional[str]) -> str:
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–∞"""
    if not s:
        return "‚Äî"
    if len(s) <= 8:
        return "***"
    return s[:4] + "‚Ä¶" + s[-4:]

async def _load_credentials(account_id: int) -> Tuple[Optional[str], Optional[str]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ –ë–î"""
    try:
        store = CredentialsStore()
        creds = store.get_account_credentials(account_id)
        if creds and len(creds) >= 2:
            return creds[0], creds[1]
    except Exception as e:
        logger.error(f"Error loading credentials for account {account_id}: {e}")
    return None, None

async def _safe_edit_message(query, text, reply_markup=None, **kwargs):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –≤—ã—Ö–æ–¥–∏–º
    - –≥–ª—É—à–∏–º BadRequest: 'Message is not modified'
    """
    msg = query.message
    prev_text = (getattr(msg, "text_html", None) or msg.text or "")
    same_text = (prev_text == text)

    def _mkd(m):
        try:
            return m.to_dict() if m else None
        except Exception:
            return None

    same_markup = (_mkd(msg.reply_markup) == _mkd(reply_markup))

    if same_text and same_markup:
        try:
            await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        except Exception:
            pass
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ kwargs
    if 'parse_mode' not in kwargs:
        kwargs['parse_mode'] = "HTML"

    try:
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            **kwargs
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            try:
                await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            except Exception:
                pass
            return
        raise


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====

async def keys_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"[/keys] Called by user {update.effective_user.id if update.effective_user else 'unknown'}")
    
    if not _is_admin(update):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    context.user_data["keys_sess"] = KeySession()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Target", callback_data="quick_target")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Donor", callback_data="quick_donor")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="check_all")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    
    txt = (
        "üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚Ä¢ <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Target</b> - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Donor</b> - –∞–∫–∫–∞—É–Ω—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ</b> - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    )
    
    await update.message.reply_text(
        txt, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode='HTML'
    )
    return MAIN_MENU

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =====

async def main_menu_callback(update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    sess: KeySession = context.user_data.get("keys_sess", KeySession())

    if query.data == "back_main":
        return await show_main_menu(update, context)

    if query.data == "close":
        await _safe_edit_message(query, "‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
        context.user_data.clear()
        return ConversationHandler.END

    elif query.data == "quick_target":
        predefined = AccountManager.get_predefined_accounts()
        if "target" in predefined:
            sess.selected_account_type = AccountType.TARGET
            sess.selected_account_id = predefined["target"]["id"]
            sess.account_name = predefined["target"]["name"]
            context.user_data["keys_sess"] = sess
            return await show_account_menu(update, context)
        else:
            await _safe_edit_message(query, "‚ùå Target account –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ ENV")
            return MAIN_MENU

    elif query.data == "quick_donor":
        predefined = AccountManager.get_predefined_accounts()
        if "donor" in predefined:
            sess.selected_account_type = AccountType.DONOR
            sess.selected_account_id = predefined["donor"]["id"]
            sess.account_name = predefined["donor"]["name"]
            context.user_data["keys_sess"] = sess
            return await show_account_menu(update, context)
        else:
            await _safe_edit_message(query, "‚ùå Donor account –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ ENV")
            return MAIN_MENU

    elif query.data == "check_all":
        return await show_all_accounts_status(update, context)

    return MAIN_MENU

# ===== –ú–ï–ù–Æ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê =====

async def show_account_menu(update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
    query = update.callback_query
    sess: KeySession = context.user_data.get("keys_sess", KeySession())

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ credentials
    api_key, api_secret = await _load_credentials(sess.selected_account_id)

    keyboard = [
        [InlineKeyboardButton("üîë –ó–∞–¥–∞—Ç—å API KEY",     callback_data="set_key")],
        [InlineKeyboardButton("üîê –ó–∞–¥–∞—Ç—å API SECRET",  callback_data="set_secret")],
        [InlineKeyboardButton("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ",   callback_data="show_current")],
    ]
    if sess.api_key and sess.api_secret:
        keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="save_creds")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

    txt = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {sess.get_display_name()}</b>\n\n"
        f"Account ID: {sess.selected_account_id}\n"
        f"–¢–∏–ø: {sess.selected_account_type.value if sess.selected_account_type else 'Custom'}\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ë–î:</b>\n"
        f"API KEY: <code>{_mask(api_key)}</code>\n"
        f"API SECRET: <code>{_mask(api_secret)}</code>\n\n"
    )
    if sess.api_key or sess.api_secret:
        txt += "<b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã):</b>\n"
        if sess.api_key:
            txt += f"NEW KEY: <code>{_mask(sess.api_key)}</code>\n"
        if sess.api_secret:
            txt += f"NEW SECRET: <code>{_mask(sess.api_secret)}</code>\n"

    await _safe_edit_message(
        query,
        txt,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )
    return ACCOUNT_MENU


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====

async def account_callback(update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º"""
    query = update.callback_query
    await query.answer()

    sess: KeySession = context.user_data.get("keys_sess", KeySession())
    data = query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    if data == "back_main":
        sess.clear_credentials()
        context.user_data["keys_sess"] = sess
        return await show_main_menu(update, context)

    # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª—é—á–∞–º–∏
    elif data == "set_key":
        await _safe_edit_message(
            query,
            f"üîë <b>–í–≤–æ–¥ API KEY –¥–ª—è {sess.get_display_name()}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API KEY –æ—Ç Bybit:\n"
            "(—Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
        )
        context.user_data["awaiting"] = "key"
        return WAIT_KEY

    elif data == "set_secret":
        await _safe_edit_message(
            query,
            f"üîê <b>–í–≤–æ–¥ API SECRET –¥–ª—è {sess.get_display_name()}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API SECRET –æ—Ç Bybit:\n"
            "(—Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
        )
        context.user_data["awaiting"] = "secret"
        return WAIT_SECRET

    elif data == "show_current":
        api_key, api_secret = await _load_credentials(sess.selected_account_id)
        txt = (
            f"üëÅ <b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è {sess.get_display_name()}</b>\n\n"
            f"Account ID: {sess.selected_account_id}\n"
            f"API KEY: <code>{_mask(api_key)}</code>\n"
            f"API SECRET: <code>{_mask(api_secret)}</code>"
        )
        await _safe_edit_message(query, txt)
        await asyncio.sleep(3)
        return await show_account_menu(update, context)

    elif data == "save_creds":
        if sess.api_key and sess.api_secret:
            try:
                # 1. Save credentials to the database
                store = CredentialsStore()
                store.set_account_credentials(
                    sess.selected_account_id,
                    sess.api_key,
                    sess.api_secret,
                )
                logger.info(f"[/keys] Credentials saved for account {sess.selected_account_id}")

                await _safe_edit_message(
                    query,
                    f"‚úÖ <b>–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                    f"‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
                )

                # 2. Trigger hot-reload in the main system
                system = context.application.bot_data.get("integrated_system")
                if system and hasattr(system, "reload_credentials_and_reconnect"):
                    # We run this as a background task so it doesn't block the bot
                    asyncio.create_task(system.reload_credentials_and_reconnect())
                    logger.info(f"[/keys] Hot-reload triggered for account {sess.selected_account_id}")
                else:
                    logger.warning("[/keys] Integrated system not found or has no reload method.")
                    await query.message.reply_text("‚ö†Ô∏è –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")

                # 3. Clear session and return to menu
                sess.clear_credentials()
                context.user_data["keys_sess"] = sess

                await asyncio.sleep(3) # Give user time to read the message
                return await show_account_menu(update, context)

            except Exception as e:
                logger.error(f"[/keys] Error saving/applying credentials: {e}", exc_info=True)
                await _safe_edit_message(
                    query,
                    f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b>\n<code>{str(e)}</code>",
                )
                return ACCOUNT_MENU
        else:
            await _safe_edit_message(query, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
            return ACCOUNT_MENU

    return ACCOUNT_MENU

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê =====

async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–π"""
    if not _is_admin(update):
        return ConversationHandler.END
    
    sess: KeySession = context.user_data.get("keys_sess", KeySession())
    text = (update.message.text or "").strip()
    awaiting = context.user_data.get("awaiting")
    
    logger.info(f"[/keys] Text input for account {sess.selected_account_id}, awaiting={awaiting}")
    
    if awaiting == "key":
        if len(text) < 8:
            await update.message.reply_text("‚õî API KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)")
            return WAIT_KEY
        
        sess.api_key = text
        context.user_data["keys_sess"] = sess
        context.user_data["awaiting"] = None
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await update.message.delete()
            logger.info("[/keys] Message with API key deleted")
        except:
            pass
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤–º–µ—Å—Ç–æ edit_message_text
        keyboard = [
            [InlineKeyboardButton("üîë –ó–∞–¥–∞—Ç—å API KEY", callback_data="set_key")],
            [InlineKeyboardButton("üîê –ó–∞–¥–∞—Ç—å API SECRET", callback_data="set_secret")],
            [InlineKeyboardButton("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="show_current")],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∫–ª—é—á–∞
        if sess.api_key and sess.api_secret:
            keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î", callback_data="save_creds")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
        api_key_db, api_secret_db = await _load_credentials(sess.selected_account_id)
        if api_key_db and api_secret_db:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞", callback_data="apply_hot")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])
        
        txt = (
            f"‚úÖ API KEY –ø–æ–ª—É—á–µ–Ω –¥–ª—è {sess.get_display_name()}\n"
            f"–ú–∞—Å–∫–∞: <code>{_mask(text)}</code>\n\n"
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {sess.get_display_name()}</b>\n\n"
            f"Account ID: {sess.selected_account_id}\n"
            f"–¢–∏–ø: {sess.selected_account_type.value if sess.selected_account_type else 'Custom'}\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ë–î:</b>\n"
            f"API KEY: <code>{_mask(api_key_db)}</code>\n"
            f"API SECRET: <code>{_mask(api_secret_db)}</code>\n\n"
        )
        
        if sess.api_key or sess.api_secret:
            txt += "<b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã):</b>\n"
            if sess.api_key:
                txt += f"NEW KEY: <code>{_mask(sess.api_key)}</code>\n"
            if sess.api_secret:
                txt += f"NEW SECRET: <code>{_mask(sess.api_secret)}</code>\n"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_text –≤–º–µ—Å—Ç–æ edit_message_text
        await update.message.reply_text(
            txt,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return ACCOUNT_MENU
    
    elif awaiting == "secret":
        if len(text) < 8:
            await update.message.reply_text("‚õî API SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)")
            return WAIT_SECRET
        
        sess.api_secret = text
        context.user_data["keys_sess"] = sess
        context.user_data["awaiting"] = None
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await update.message.delete()
            logger.info("[/keys] Message with API secret deleted")
        except:
            pass
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üîë –ó–∞–¥–∞—Ç—å API KEY", callback_data="set_key")],
            [InlineKeyboardButton("üîê –ó–∞–¥–∞—Ç—å API SECRET", callback_data="set_secret")],
            [InlineKeyboardButton("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="show_current")],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∫–ª—é—á–∞
        if sess.api_key and sess.api_secret:
            keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î", callback_data="save_creds")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
        api_key_db, api_secret_db = await _load_credentials(sess.selected_account_id)
        if api_key_db and api_secret_db:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞", callback_data="apply_hot")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])
        
        txt = (
            f"‚úÖ API SECRET –ø–æ–ª—É—á–µ–Ω –¥–ª—è {sess.get_display_name()}\n"
            f"–ú–∞—Å–∫–∞: <code>{_mask(text)}</code>\n\n"
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {sess.get_display_name()}</b>\n\n"
            f"Account ID: {sess.selected_account_id}\n"
            f"–¢–∏–ø: {sess.selected_account_type.value if sess.selected_account_type else 'Custom'}\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ë–î:</b>\n"
            f"API KEY: <code>{_mask(api_key_db)}</code>\n"
            f"API SECRET: <code>{_mask(api_secret_db)}</code>\n\n"
        )
        
        if sess.api_key and sess.api_secret:
            txt += "<b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é):</b>\n"
            if sess.api_key:
                txt += f"NEW KEY: <code>{_mask(sess.api_key)}</code>\n"
            if sess.api_secret:
                txt += f"NEW SECRET: <code>{_mask(sess.api_secret)}</code>\n"
            txt += "\nüí° <i>–ù–∞–∂–º–∏—Ç–µ 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</i>"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_text
        await update.message.reply_text(
            txt,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return ACCOUNT_MENU
    
    # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π")
    return ACCOUNT_MENU

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def show_main_menu(update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    sess: KeySession = context.user_data.get("keys_sess", KeySession())

    predefined = AccountManager.get_predefined_accounts()
    has_target = "target" in predefined
    has_donor  = "donor"  in predefined

    keyboard = []
    if has_target:
        keyboard.append([InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä–æ: TARGET", callback_data="quick_target")])
    if has_donor:
        keyboard.append([InlineKeyboardButton("üì° –ë—ã—Å—Ç—Ä–æ: DONOR",  callback_data="quick_donor")])

    keyboard += [
        [InlineKeyboardButton("üìã –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="check_all")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
    ]

    txt = (
        "üß© <b>BYBIT COPY TRADING BOT</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TARGET/DONOR\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
    )

    await _safe_edit_message(
        query,
        txt,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )
    return MAIN_MENU


async def show_all_accounts_status(update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    accounts = AccountManager.get_all_configured_accounts()

    txt = "üîç <b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
    for acc in accounts:
        status = "‚úÖ" if acc["has_credentials"] else "‚ùå"
        txt += f"{status} <b>{acc['name']}</b>\n"
        txt += f"   ID: {acc['id']}, –¢–∏–ø: {acc['type'].value}\n"
        if acc["has_credentials"]:
            api_key, api_secret = await _load_credentials(acc["id"])
            txt += f"   KEY: <code>{_mask(api_key)}</code>\n"
            txt += f"   SECRET: <code>{_mask(api_secret)}</code>\n"
        else:
            txt += "   –ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
        txt += "\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]

    await _safe_edit_message(
        query,
        txt,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )
    return MAIN_MENU



# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø HANDLER'–û–í =====

def register_tg_keys_menu(app: Application, integrated_system: Any) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏.
    –ü–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø:
      -1: —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ CBQ + –æ–±—â–∏–π –ª–æ–≥ –∞–ø–¥–µ–π—Ç–æ–≤ (block=False)
       1: –æ–±—â–∏–π CBQ-fallback (block=False)
       2: –æ—Å–Ω–æ–≤–Ω–æ–π FSM /keys
    """
    logger.info("[/keys] Registering multi-account ConversationHandler")
    app.bot_data["integrated_system"] = integrated_system

    # --- –†–ê–ù–ù–ò–ô CBQ-–¢–†–ï–ô–°–ï–†: —Å–Ω–∏–º–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫ ---
    async def _cbq_prelog(update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = getattr(update, "callback_query", None)
        if not q:
            return
        try:
            # –≤–∞–∂–Ω–æ: –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
            await q.answer()
        except Exception:
            pass
        try:
            user_id = getattr(getattr(q, "from_user", None), "id", None)
            chat_id = getattr(getattr(q, "message", None), "chat_id", None)
            logger.info(
                "CBQ PRELOG: data=%r chat=%s user=%s state=%r",
                getattr(q, "data", None),
                chat_id,
                user_id,
                context.user_data.get("awaiting"),
            )
        except Exception:
            pass

    app.add_handler(
        CallbackQueryHandler(_cbq_prelog, pattern=".*", block=False),
        group=-1
    )

    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ª—é–±—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç) ---
    async def _dbg_log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            uid = update.effective_user.id if update.effective_user else None
            has_cbq = bool(getattr(update, "callback_query", None))
            txt = getattr(getattr(update, "message", None), "text", None)
            context.application.logger.info(f"[tg] update: user={uid} has_cbq={has_cbq} text={txt!r}")
        except Exception:
            pass

    app.add_handler(MessageHandler(filters.ALL, _dbg_log_update), group=-1)

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ /keys (FSM) ---
    conv = ConversationHandler(
        entry_points=[CommandHandler("keys", keys_start)],
        states={
            MAIN_MENU:      [CallbackQueryHandler(main_menu_callback)],
            ACCOUNT_SELECT: [CallbackQueryHandler(account_callback)],
            ACCOUNT_MENU:   [CallbackQueryHandler(account_callback)],
            WAIT_KEY:       [MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)],
            WAIT_SECRET:    [MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)],
        },
        fallbacks=[CommandHandler("keys", keys_start)],
        name="multi_keys_fsm",
        persistent=False,
        # –ö–õ–Æ–ß–ï–í–û–ï: –Ω–∞–º –Ω—É–∂–Ω—ã MessageHandler'—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º False
        per_message=False
    )

    # FSM —Å—Ç–∞–≤–∏–º –≤ group=2
    app.add_handler(conv, group=2)

    # --- –û–±—â–∏–π CBQ-fallback –≤–Ω–µ FSM (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫ FSM) ---
    app.add_handler(
        CallbackQueryHandler(main_menu_callback, block=False),
        group=1
    )

    app.bot_data["keys_menu_registered"] = True
    logger.info("[/keys] Multi-account ConversationHandler registered successfully")
