#!/usr/bin/env python3
"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô TELEGRAM BOT –î–õ–Ø –≠–¢–ê–ü–ê 2
–í–µ—Ä—Å–∏—è 2.2 - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò

üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
- ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Kelly Criterion —Ä–∞—Å—á–µ—Ç–æ–≤
- ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å Trailing Stop-Loss
- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –ø—Ä–æ—Å–∞–¥–∫–æ–π
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- ‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
- üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ (set_kelly, performance, risks, daily_report, health_check)
- üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ò–ó –ü–õ–ê–ù–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  - –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Å–∞–¥–∫–∏
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ trailing stops
  - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
  - Backup –∏ restore –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import asyncio
import time
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
import traceback
from contextlib import suppress
import sys
import importlib
from telegram.error import BadRequest
from app.db_session import SessionLocal
from app.db_models import SysEvents
import hashlib

from app.sys_events_logger import sys_logger

logger = logging.getLogger('bybit_trading_system')

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ—Ä–µ–Ω—å –∏ –ø–∞–ø–∫–∞ app –≤ sys.path
ROOT = os.path.dirname(os.path.abspath(__file__))
APP_DIR = os.path.join(ROOT, "app")
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)
if os.path.isdir(APP_DIR) and APP_DIR not in sys.path:
    sys.path.insert(0, APP_DIR)




# ============================================
# –ü–û–ò–°–ö –ò –ò–ú–ü–û–†–¢ TG_KEYS_MENU
# ============================================
tg_keys_available = False
register_tg_keys_menu = None
_last_tgkm_err = None

# –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ tg_keys_menu
tgkm_search_paths = ["tg_keys_menu", "app.tg_keys_menu", "telegram.tg_keys_menu"]

for _mod in tgkm_search_paths:
    try:
        exec(f"from {_mod} import register_tg_keys_menu")
        tg_keys_available = True
        break
    except ImportError as e:
        _last_tgkm_err = f"ImportError from {_mod}: {e}"
        continue
    except SyntaxError as e:
        _last_tgkm_err = f"SyntaxError in {_mod} ‚Üí {getattr(e, 'filename', '?')}:{getattr(e, 'lineno', '?')} ‚Äî {e.msg}"
        break
    except Exception as e:
        _last_tgkm_err = e

if not tg_keys_available:
    register_tg_keys_menu = None
    logging.warning("tg_keys_menu not found in any location (last error: %s)", _last_tgkm_err)

# ============================================
# –û–°–ù–û–í–ù–´–ï –ò–ú–ü–û–†–¢–´ TELEGRAM
# ============================================
try:
    from telegram import (
        Update,
        InlineKeyboardButton,
        InlineKeyboardMarkup,
        ReplyKeyboardMarkup,
        KeyboardButton,
    )
    from telegram.ext import (
        Application,
        CommandHandler,
        CallbackQueryHandler,
        MessageHandler,
        filters,
        ContextTypes,
        ConversationHandler,
    )
    from telegram.constants import ParseMode
    from telegram_helpers import patch_telegram_methods

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install python-telegram-bot")
    raise

async def _on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram Application.
    –ù–µ –¥–∞—ë—Ç –æ—à–∏–±–∫–∞–º —Ç–µ—Ä—è—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç traceback.
    """
    # NB: context.error —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    # update –º–æ–∂–µ—Ç –±—ã—Ç—å None (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –≤ JobQueue) ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º —ç—Ç–æ
    try:
        logger.exception("Telegram error", exc_info=context.error)
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≥–∏—Ä—É–µ–º –≤ 'root', —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
        import traceback as _tb, logging as _lg
        _lg.getLogger(__name__).error("Telegram error: %s\n%s", context.error, _tb.format_exc())

async def _safe_edit_message(query, text, reply_markup=None, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫.
    –ò–∑–±–µ–≥–∞–µ—Ç BadRequest –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not query or not query.message:
        logger.warning("_safe_edit_message: query or query.message is None")
        return
    
    msg = query.message
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
    prev_text = getattr(msg, "text_html", None) or msg.text or ""
    same_text = (prev_text == text)
    
    def _mkd(m):
        try:
            return m.to_dict() if m else None
        except Exception:
            return None
    
    same_markup = (_mkd(msg.reply_markup) == _mkd(reply_markup))
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    if same_text and same_markup:
        with suppress(Exception):
            await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    
    try:
        await query.edit_message_text(text, reply_markup=reply_markup, **kwargs)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            with suppress(Exception):
                await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.reply_text(text, reply_markup=reply_markup, **kwargs)
        except Exception as fallback_error:
            logger.error(f"Failed to send fallback message: {fallback_error}")
            raise e
    except Exception as e:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º
        logger.error(f"Failed to edit message: {e}")
        raise


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ============================================

# üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    # 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º telegram_cfg (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    from telegram_cfg import TELEGRAM_TOKEN, ADMIN_ONLY_IDS as CFG_ADMIN_IDS
    TELEGRAM_TOKEN_SOURCE = "telegram_cfg"
except ImportError:
    try:
        # 2) Fallback –Ω–∞ enhanced_trading_system_final_fixed
        from enhanced_trading_system_final_fixed import TELEGRAM_TOKEN
        TELEGRAM_TOKEN_SOURCE = "enhanced_trading_system_final_fixed"
        CFG_ADMIN_IDS = set()
    except ImportError:
        # 3) –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
        TELEGRAM_TOKEN_SOURCE = "environment"
        CFG_ADMIN_IDS = set()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ enhanced_trading_system_final_fixed
try:
    from enhanced_trading_system_final_fixed import (
        send_telegram_alert,
        logger,
        TELEGRAM_CHAT_ID,
        safe_float,
        TradingSignal,
        SignalType,
    )
except ImportError as e:
    print(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ enhanced_trading_system_final_fixed: {e}")
    # –°–æ–∑–¥–∞–µ–º fallback —Ñ—É–Ω–∫—Ü–∏–∏
    logger = logging.getLogger(__name__)
    TELEGRAM_CHAT_ID = None
    
    async def send_telegram_alert(message: str):
        logger.warning(f"Telegram alert (no bot): {message}")
    
    def safe_float(value, default=0.0):
        try:
            return float(value)
        except:
            return default

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
ENV_ADMIN_IDS = {
    int(x.strip()) 
    for x in os.getenv("ADMIN_ONLY_IDS", "").replace(" ", "").split(",") 
    if x.strip().isdigit()
}

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ telegram_cfg –∏ ENV
ADMIN_IDS = set(CFG_ADMIN_IDS) | ENV_ADMIN_IDS

# –î–æ–±–∞–≤–ª—è–µ–º TELEGRAM_CHAT_ID –∫–∞–∫ –∞–¥–º–∏–Ω–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
if TELEGRAM_CHAT_ID:
    try:
        ADMIN_IDS.add(int(TELEGRAM_CHAT_ID))
    except (ValueError, TypeError):
        pass

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
ADMIN_IDS = list(ADMIN_IDS)

# –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger.info(f"‚úÖ TELEGRAM_TOKEN loaded from: {TELEGRAM_TOKEN_SOURCE}")
logger.info(f"‚úÖ ADMIN_IDS count: {len(ADMIN_IDS)} (sources: telegram_cfg + ENV)")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not TELEGRAM_TOKEN:
    logger.error("‚ùå TELEGRAM_TOKEN not found in any source!")

# ============================================
# FALLBACK HANDLER –î–õ–Ø /keys –ï–°–õ–ò –û–°–ù–û–í–ù–û–ô –ú–û–î–£–õ–¨ –ù–ï–î–û–°–¢–£–ü–ï–ù
# ============================================

if not tg_keys_available:
    # –°–æ–∑–¥–∞–µ–º fallback implementation —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        from app.database_security_implementation import CredentialsStore
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
        WAIT_API_KEY, WAIT_API_SECRET = range(2)
        
        async def fallback_keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Fallback –∫–æ–º–∞–Ω–¥–∞ /keys"""
            await update.message.reply_text(
                "üîë **–£–ü–†–ê–í–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê–ú–ò** (Fallback —Ä–µ–∂–∏–º)\n\n"
                "‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å tg_keys_menu –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API Key –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            return WAIT_API_KEY

        async def fallback_receive_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞"""
            context.user_data['api_key'] = update.message.text
            await update.message.reply_text("‚úÖ API Key –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API Secret:")
            return WAIT_API_SECRET

        async def fallback_receive_secret(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ API —Å–µ–∫—Ä–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
            api_secret = update.message.text
            api_key = context.user_data.get('api_key')
            
            if not api_key:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API Key –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /keys")
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            try:
                store = CredentialsStore()
                store.set_account_credentials(1, api_key, api_secret)  # Account ID = 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await update.message.reply_text("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                integrated_system = context.application.bot_data.get("integrated_system")
                if integrated_system and hasattr(integrated_system, "_on_keys_saved"):
                    await integrated_system._on_keys_saved()
                    
            except Exception as e:
                logger.error(f"Failed to save keys: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            return ConversationHandler.END

        async def fallback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
            await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return ConversationHandler.END

        def register_tg_keys_menu(app, integrated_system):
            """Fallback —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä /keys –∫–æ–º–∞–Ω–¥—ã"""
            app.bot_data["integrated_system"] = integrated_system

            # –°–æ–∑–¥–∞—ë–º ConversationHandler –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–π
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler("keys", fallback_keys_command)],
                states={
                    WAIT_API_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_receive_key)],
                    WAIT_API_SECRET: [MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_receive_secret)],
                },
                fallbacks=[
                    CommandHandler("cancel", fallback_cancel),
                    CommandHandler("keys", fallback_keys_command),  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                ],
                name="keys_fallback_fsm",
                persistent=False,
            )

            app.add_handler(conv_handler)
            logger.info("‚úÖ Fallback /keys handler registered successfully")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            app.bot_data["keys_menu_registered"] = True
            app.bot_data["keys_menu_fallback"] = True
    except ImportError:
        # –ï—Å–ª–∏ –¥–∞–∂–µ CredentialsStore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É
        def register_tg_keys_menu(app, integrated_system):
            """–ó–∞–≥–ª—É—à–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª—é—á–∞–º–∏"""
            logger.error("Cannot register /keys handler - CredentialsStore not available")
            app.bot_data["keys_menu_registered"] = False
            app.bot_data["keys_menu_error"] = "CredentialsStore not available"

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
if register_tg_keys_menu:
    if tg_keys_available:
        logger.info("‚úÖ Using original tg_keys_menu module")
    else:
        logger.info("‚úÖ Using fallback /keys implementation")
else:
    logger.error("‚ùå No /keys handler available - system will work without key management")


class Stage2TelegramBot:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≠—Ç–∞–ø 2
    """
    
    def __init__(self, copy_system=None):
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–°–¢–†–£–ö–¢–û–† —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã) ---
        self.copy_system = copy_system
        self.monitor = None  
        self.copy_system = copy_system  
        self.integrated_system = None  # –ù–ï copy_system!
        self.stage2 = copy_system  # –ê–ª–∏–∞—Å
        self.bot_active = False

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π ADMIN_IDS —Å–ø–∏—Å–æ–∫
        self.authorized_users = set(ADMIN_IDS)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º TELEGRAM_CHAT_ID –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if TELEGRAM_CHAT_ID:
            try:
                self.authorized_users.add(int(TELEGRAM_CHAT_ID))
            except (ValueError, TypeError):
                logger.warning(f"Invalid TELEGRAM_CHAT_ID: {TELEGRAM_CHAT_ID}")

        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: admin_ids –∫–∞–∫ —Å–ø–∏—Å–æ–∫
        self.admin_ids = list(self.authorized_users)

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.token = TELEGRAM_TOKEN
        if not self.token:
            error_msg = (
                f"‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {TELEGRAM_TOKEN_SOURCE}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª telegram_cfg.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN"
            )
            logger.error(error_msg)
            raise ValueError(error_msg)

        # –ü–∞—Ç—á –º–µ—Ç–æ–¥–æ–≤ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            patch_telegram_methods()
        except NameError:
            logger.warning("patch_telegram_methods() not available")

        # –ê–Ω—Ç–∏-—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.command_cooldown = {}
        self.cooldown_time = 2

        # üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_settings = {
            'enabled': True,
            'interval_hours': 2,
            'last_notification': 0,
            'risk_alerts': True,
            'performance_reports': True
        }

        # üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.system_settings = {
            'kelly': {
                'confidence_threshold': 0.65,
                'max_kelly_fraction': 0.25,
                'conservative_factor': 0.5,
                'lookback_period': 30
            },
            'drawdown': {
                'daily_limit': 0.05,
                'total_limit': 0.15,
                'emergency_threshold': 0.08
            },
            'trailing': {
                'initial_distance': 0.02,
                'min_step': 0.005,
                'max_distance': 0.05,
                'aggressive_mode': False
            }
        }

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._setup_notification_scheduler()

        # üöÄ –ù–û–í–´–ï –ü–û–õ–Ø: –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è Application
        self._running = False
        self._start_lock = asyncio.Lock()
        self.application = None

        # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
        self._commands_registered = False

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("‚úÖ Stage2TelegramBot initialized successfully")
        logger.info(f"   Token source: {TELEGRAM_TOKEN_SOURCE}")
        logger.info(f"   Admin IDs: {sorted(self.admin_ids)}")
        logger.info(f"   Commands pre-registration: enabled")

    def system_ready(self) -> bool:
        """
        –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞, –∫–æ–≥–¥–∞:
        - –µ—Å—Ç—å monitor –∏ stage2
        - stage2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (active=True) –∏ copy_enabled=True (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ —Ñ–ª–∞–≥–∏)
        –ú–µ—Ç–æ–¥ –Ω–µ –ø–∞–¥–∞–µ—Ç, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–µ—Ç.
        """
        try:
            if getattr(self, "monitor", None) is None:
                return False
            s2 = getattr(self, "stage2", None)
            if s2 is None:
                return False
            active = bool(getattr(s2, "active", False))
            enabled = bool(getattr(s2, "copy_enabled", getattr(s2, "enabled", False)))
            return active and enabled
        except Exception:
            return False

    def _setup_notification_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            asyncio.create_task(self._notification_scheduler())
            logger.info("Notification scheduler started successfully")
        except Exception as e:
            logger.error(f"Failed to setup notification scheduler: {e}")

    def ensure_commands_registered(self, application):
        """
        üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ Application.
        """
        if getattr(self, "_commands_registered", False):
            logger.debug("Commands already registered ‚Äî skipping duplicate registration")
            return

        try:
            logger.info("üîß PRODUCTION FIX: Registering EXISTING Telegram Bot commands...")

            # --- –ë–ê–ó–û–í–û–ï, –¢–û–ß–ù–û –ï–°–¢–¨ ---
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("emergency", self.emergency_command))
            application.add_handler(CommandHandler("copy", self.copy_command))

            application.add_handler(CommandHandler("set_kelly", self.set_kelly_command))
            application.add_handler(CommandHandler("set_trailing", self.set_trailing_command))
            application.add_handler(CommandHandler("set_drawdown", self.set_drawdown_command))

            application.add_handler(CommandHandler("notifications", self.notifications_command))
            application.add_handler(CommandHandler("logs", self.logs_command))
            application.add_handler(CommandHandler("export", self.export_command))
            application.add_handler(CommandHandler("backup", self.backup_command))
            application.add_handler(CommandHandler("restore", self.restore_command))

            application.add_handler(CommandHandler("force_copy", self.force_copy_command))
            application.add_handler(CallbackQueryHandler(self.force_copy_callback, pattern=r"^force_copy_"))
            application.add_handler(CommandHandler("positions", self.show_positions_detailed))

            # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –ö–ù–û–ü–û–ö (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ReplyKeyboard) ---
            application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_menu_buttons),
                group=3,
            )

            # --- –ì–õ–û–ë–ê–õ–¨–ù–´–ô ERROR‚ÄëHANDLER (PTB) ---
            application.add_error_handler(_on_error)

            # --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---
            application.add_handler(CommandHandler("ws_diag", self.ws_diag_command))
            application.add_handler(CommandHandler("reconcile_now", self.reconcile_now_command))

            # --- –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–ï–ú ---
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(CommandHandler("copy_on", self.copy_on_command))
            application.add_handler(CommandHandler("copy_off", self.copy_off_command))
            application.add_handler(CommandHandler("scale", self.scale_command))
            application.add_handler(CommandHandler("panic_close", self.panic_close_command))
            application.add_handler(CallbackQueryHandler(self.panic_close_callback, pattern="^panic_close_confirm"))

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self._commands_registered = True

            try:
                total = sum(len(v) for v in getattr(application, "handlers", {}).values())
            except Exception:
                total = 0
            logger.info("‚úÖ EXISTING Telegram Bot commands registered successfully")
            logger.info("‚ö†Ô∏è  NOTE: Some commands (help, status, balance, etc.) not available - methods don't exist")
            logger.info("üìä Total handlers registered: %s", total)

        except Exception as e:
            logger.error("‚ùå Failed to register Telegram Bot commands: %s", e, exc_info=True)
            raise


    # ---- REPLACE WHOLE METHOD ----
    async def start(self):
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram Bot:
        - —Ä–∞–Ω–Ω–∏–π CBQ-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ (group=-1, block=False);
        - —Ä–∞–Ω–Ω–∏–π –ª–æ–≥–≥–µ—Ä –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π;
        - polling —Å allowed_updates=Update.ALL_TYPES –∏ drop_pending_updates=True.
        """
        if self._running:
            logger.info("Telegram Bot already running ‚Äî start() ignored (idempotent)")
            return

        async with self._start_lock:
            if self._running:
                return

            if not self.token:
                raise RuntimeError("Telegram token is not configured")

            try:
                # 1) –°–æ–±–∏—Ä–∞–µ–º Application –æ–¥–∏–Ω —Ä–∞–∑
                if self.application is None:
                    from telegram.ext import Application, CallbackQueryHandler, MessageHandler, filters, ContextTypes
                    from telegram import Update

                    self.application = (
                        Application
                        .builder()
                        .token(self.token)
                        .build()
                    )
                    # –ö–æ–º–∞–Ω–¥—ã
                    self.ensure_commands_registered(self.application)

                    # [NEW] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö)
                    if not self.application.bot_data.get("msg_trace_registered"):
                        async def _msg_trace(update, context: ContextTypes.DEFAULT_TYPE):
                            try:
                                uid = update.effective_user.id if update.effective_user else None
                                txt = getattr(getattr(update, "message", None), "text", None)
                                logger.info("MSG TRACE: user=%s text=%r", uid, txt)
                            except Exception:
                                pass
                        self.application.add_handler(
                            MessageHandler(filters.ALL, _msg_trace),
                            group=-1
                        )
                        self.application.bot_data["msg_trace_registered"] = True

                    # [NEW] –†–∞–Ω–Ω–∏–π CBQ-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ (—Å–Ω–∏–º–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä)
                    if not self.application.bot_data.get("cbq_trace_registered"):
                        async def _cbq_trace(update, context: ContextTypes.DEFAULT_TYPE):
                            q = getattr(update, "callback_query", None)
                            if not q:
                                return
                            try:
                                await q.answer()   # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
                            except Exception:
                                pass
                            try:
                                user_id = getattr(getattr(q, "from_user", None), "id", None)
                                chat_id = getattr(getattr(q, "message", None), "chat_id", None)
                                logger.info("CBQ TRACE: data=%r chat=%s user=%s", getattr(q, "data", None), chat_id, user_id)
                            except Exception:
                                pass

                        self.application.add_handler(
                            CallbackQueryHandler(_cbq_trace, pattern=".*", block=False),
                            group=-1
                        )
                        self.application.bot_data["cbq_trace_registered"] = True

                # 2) /keys FSM ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
                try:
                    if register_tg_keys_menu is None:
                        logger.warning("register_tg_keys_menu not available ‚Äî /keys menu is skipped")
                    else:
                        if not self.application.bot_data.get("keys_menu_registered"):
                            target_system = getattr(self, "integrated_system", None)
                            register_tg_keys_menu(self.application, target_system)
                            self.application.bot_data["keys_menu_registered"] = True
                            logger.info("/keys ConversationHandler registered")
                            try:
                                mod = getattr(register_tg_keys_menu, "__module__", None)
                                fn = getattr(getattr(register_tg_keys_menu, "__code__", None), "co_filename", None)
                                logger.info("tg_keys_menu.register_tg_keys_menu from module=%s file=%s", mod, fn)
                            except Exception:
                                pass
                except Exception as e:
                    logger.exception("Failed to attach /keys menu: %s", e)

                if not self.application.bot_data.get("keys_menu_registered"):
                    raise RuntimeError("tg_keys_menu FSM (/keys) not registered in Application")

                # 3) initialize + start
                await self.application.initialize()
                logger.info("Telegram Application initialized")

                await self.application.start()
                logger.info("Telegram Application started")

                # 4) –ß–∏—Å—Ç–∏–º webhook (–µ—Å–ª–∏ –±—ã–ª)
                try:
                    await self.application.bot.delete_webhook()
                    logger.info("Webhook deleted (if existed)")
                except Exception:
                    pass

                # 5) Polling —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∞–ø–¥–µ–π—Ç–æ–≤ –∏ —Å–±—Ä–æ—Å–æ–º –æ—á–µ—Ä–µ–¥–∏
                from telegram import Update
                await self.application.updater.start_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True
                )
                logger.info("Telegram Updater polling started")

                self._running = True
                self.bot_active = True
                logger.info("‚úÖ Telegram Bot is up and running")

            except Exception as e:
                logger.error(f"Failed to start Telegram Bot: {e}")
                raise


    async def stop(self) -> None:
        """–ì—Ä–µ–π—Å—Ñ—É–ª-—Å—Ç–æ–ø: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling -> stop() -> shutdown()."""
        if not self.application:
            return
        try:
            upd = getattr(self.application, "updater", None)
            if upd:
                await upd.stop()
                logger.info("Telegram Updater polling stopped")
            await self.application.stop()
            await self.application.shutdown()
            logger.info("Telegram Application stopped & shutdown")
        except Exception:
            logger.exception("Error during Telegram bot stop()")
        finally:
            self._running = False
            self.bot_active = False
            self.application = None
            logger.info("Telegram Bot resources cleaned up")



    async def _idle_until_stop(self) -> None:
        """–ü—Ä–æ—Å—Ç–∞—è '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞' –¥–æ stop() ‚Äî —á—Ç–æ–±—ã —Ç–∞—Å–∫–∞ –∂–∏–ª–∞, –ø–æ–∫–∞ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."""
        await self._tg_stop_event.wait()
    
    async def _notification_scheduler(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.bot_active:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self.notification_settings['enabled']:
                    current_time = time.time()
                    last_notification = self.notification_settings['last_notification']
                    interval_seconds = self.notification_settings['interval_hours'] * 3600
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if current_time - last_notification >= interval_seconds:
                        await self._send_scheduled_notification()
                        self.notification_settings['last_notification'] = current_time
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"Error in notification scheduler: {e}")
                await asyncio.sleep(600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç
    
    async def _send_scheduled_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not self.copy_system:
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            system_active = getattr(self.copy_system, 'system_active', False)
            copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = getattr(self.copy_system, 'system_stats', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            source_balance = 0.0
            main_balance = 0.0
            try:
                if hasattr(self.copy_system, 'base_monitor'):
                    source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                    main_balance = await self.copy_system.base_monitor.main_client.get_balance()
            except Exception as e:
                logger.warning(f"Failed to get balance for notification: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions_count = 0
            total_pnl = 0.0
            try:
                if hasattr(self.copy_system, 'base_monitor'):
                    positions = await self.copy_system.base_monitor.main_client.get_positions()
                    positions_count = len([p for p in positions if self._safe_float(p.get('size', 0)) > 0])
                    total_pnl = sum([self._safe_float(p.get('unrealisedPnl', 0)) for p in positions])
            except Exception as e:
                logger.warning(f"Failed to get positions for notification: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "üîî **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                f"üìä **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:**\n"
                f"   –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                
                f"üí∞ **–§–ò–ù–ê–ù–°–´:**\n"
                f"   –ò—Å—Ç–æ—á–Ω–∏–∫: ${source_balance:.2f}\n"
                f"   –û—Å–Ω–æ–≤–Ω–æ–π: ${main_balance:.2f}\n"
                f"   –í—Å–µ–≥–æ: ${source_balance + main_balance:.2f}\n\n"
                
                f"üìà **–ü–û–ó–ò–¶–ò–ò:**\n"
                f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {positions_count}\n"
                f"   –û–±—â–∏–π P&L: ${total_pnl:+.2f}\n\n"
                
                f"üìã **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals_processed', 0)}\n"
                f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {stats.get('successful_copies', 0)}\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await send_telegram_alert(message)
            logger.info(f"Scheduled notification sent at {datetime.now().strftime('%H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"Failed to send scheduled notification: {e}")
    
    def check_authorization(self, user_id: int, chat_id: Optional[int] = None) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π authorized_users + admin_ids
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id –≤ authorized_users
        if hasattr(self, 'authorized_users') and user_id in self.authorized_users:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ chat_id –≤ authorized_users (–¥–ª—è –≥—Ä—É–ø–ø)
        if chat_id is not None and hasattr(self, 'authorized_users') and chat_id in self.authorized_users:
            return True
        
        # Fallback –Ω–∞ admin_ids
        if hasattr(self, 'admin_ids') and user_id in self.admin_ids:
            return True
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –Ω–∞ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        try:
            import os
            admin_ids_str = os.getenv("ADMIN_ONLY_IDS", "")
            admin_ids = {int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()}
            return user_id in admin_ids
        except Exception:
            return False
    
    def check_cooldown(self, user_id: int, command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
        key = f"{user_id}_{command}"
        current_time = time.time()
        
        if key in self.command_cooldown:
            if current_time - self.command_cooldown[key] < self.cooldown_time:
                return False
        
        self.command_cooldown[key] = current_time
        return True
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å ReplyKeyboardMarkup —Å—Ä–∞–∑—É)"""
        sys_logger.log_telegram_command("/start", update.effective_user.id)

        user_id = getattr(update.effective_user, "id", None)
        chat_id = getattr(update.effective_chat, "id", None)
        if not self.check_authorization(user_id, chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # –°–±–æ—Ä–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"),  KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üö® –†–∏—Å–∫–∏")],
            [KeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º"),   KeyboardButton("üÜò –ü–æ–º–æ—â—å")],
        ]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ copy_system –µ—Å—Ç—å)
        system_active = getattr(getattr(self, "copy_system", None), "system_active", False)
        copy_enabled  = getattr(getattr(self, "copy_system", None), "copy_enabled",  False)

        text = (
            f"üöÄ <b>BYBIT COPY TRADING BOT</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.\n\n"
            f"üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/keys ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏\n"
            f"/emergency ‚Äî –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
            f"/force_copy ‚Äî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup,
        )


    async def handle_menu_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        text = update.message.text

        if not self.check_cooldown(update.effective_user.id, text):
            await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏")
            return

        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                main_message = (
                    "üöÄ <b>BYBIT COPY TRADING BOT</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π."
                )
            
                # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                keyboard = [
                    [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
                    [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üö® –†–∏—Å–∫–∏")],
                    [KeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
                ]
            
                reply_markup = ReplyKeyboardMarkup(
                    keyboard,
                    resize_keyboard=True,
                )
            
                await update.message.reply_text(
                    main_message,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            elif text == 'üìä –°—Ç–∞—Ç—É—Å':
                await self.show_system_status_text(update)
            elif text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
                await self.show_balances_text(update)
            elif text == 'üìà –ü–æ–∑–∏—Ü–∏–∏':
                await self.show_positions_text(update)
            elif text == 'üö® –†–∏—Å–∫–∏':
                await self.show_risk_management_text(update)
            elif text == '‚öôÔ∏è –†–µ–∂–∏–º':
                await self.show_copying_controls_text(update)
            elif text == 'üÜò –ü–æ–º–æ—â—å':
                await self.show_help_menu(update)
    
            # –ü–æ–¥–º–µ–Ω—é –ø–æ–º–æ—â–∏ - –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï
            elif text == 'üìã –û—Ç—á–µ—Ç':
                await self.show_full_report_text(update)
            elif text == 'üéØ Kelly':
                await self.show_kelly_stats_text(update)
            elif text == 'üõ°Ô∏è Trailing':
                await self.show_trailing_stops_text(update)
            elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                await self.show_settings_text(update)
            elif text == 'üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ':
                await self.show_emergency_controls_text(update)
        
            # üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –í –ü–û–î–ú–ï–ù–Æ –ü–û–ú–û–©–ò
            elif text == 'üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly':
                await self.show_kelly_settings_text(update)
            elif text == 'üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
                await self.show_performance_text(update)
            elif text == '‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤':
                await self.show_risks_analysis_text(update)
            elif text == 'üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç':
                await self.show_daily_report_text(update)
            elif text == 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
                await self.show_health_check_text(update)
            elif text == 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è':
                await self.show_sync_status_text(update)
        
            # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
            elif text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                await self.show_notifications_settings_text(update)
            elif text == 'üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π':
                await self.test_all_connections_text(update)
            elif text == 'üìú –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã':
                await self.show_system_logs_text(update)
            elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–∞–¥–∫–∏':
                await self.show_drawdown_settings_text(update)
            elif text == 'üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ trailing':
                await self.show_trailing_settings_text(update)
            elif text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤':
                await self.export_reports_text(update)
            elif text == 'üíæ Backup –Ω–∞—Å—Ç—Ä–æ–µ–∫':
                await self.backup_settings_text(update)
            elif text == 'üîÑ Restore –Ω–∞—Å—Ç—Ä–æ–µ–∫':
                await self.restore_settings_text(update)
            
        except Exception as e:
            logger.error(f"Menu button error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def show_help_menu(self, update):
        """üÜï –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –º–µ–Ω—é –ø–æ–º–æ—â–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        keyboard = [
            [
                KeyboardButton("üìã –û—Ç—á–µ—Ç"),
                KeyboardButton("üéØ Kelly")
            ],
            [
                KeyboardButton("üõ°Ô∏è Trailing"),
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ],
            [
                KeyboardButton("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ"),
                KeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            ],
            # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ù–û–í–´–ï –ö–ù–û–ü–ö–ò
            [
                KeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly"),
                KeyboardButton("üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            ],
            [
                KeyboardButton("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"),
                KeyboardButton("üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç")
            ],
            [
                KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            ],
            # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ó –ü–õ–ê–ù–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
            [
                KeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"),
                KeyboardButton("üìú –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
            ],
            [
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–∞–¥–∫–∏"),
                KeyboardButton("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ trailing")
            ],
            [
                KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"),
                KeyboardButton("üíæ Backup –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            ],
            [
                KeyboardButton("üîÑ Restore –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        help_message = (
            "üÜò *–†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò v2.2*\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üÜï **–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**\n"
            "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly Criterion\n"
            "   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n"
            "   ‚Ä¢ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
            "   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n"
            "üîß **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:**\n"
            "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
            "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã\n"
            "   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Å–∞–¥–∫–∏\n"
            "   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trailing stops\n"
            "   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n"
            "   ‚Ä¢ Backup/Restore –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        await update.message.reply_text(
            help_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # ================================
    # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ó –ü–õ–ê–ù–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
    # ================================
    
    async def show_notifications_settings_text(self, update):
        """üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            current_settings = self.notification_settings
            
            message = (
                "üîî *–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîÑ **–ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if current_settings['enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                f"‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {current_settings['interval_hours']} —á–∞—Å–æ–≤\n"
                f"‚ö†Ô∏è **–ê–ª–µ—Ä—Ç—ã —Ä–∏—Å–∫–æ–≤:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if current_settings['risk_alerts'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                f"üìä **–û—Ç—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if current_settings['performance_reports'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
                
                "üìã **–¢–ò–ü–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:**\n"
                "   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã)\n"
                "   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤)\n"
                "   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã (emergency stop)\n"
                "   üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫—Ä—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)\n"
                "   üìà –û—Ç—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:**\n"
                "`/notifications on` - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "`/notifications off` - –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "`/notifications interval 4` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 4 —á–∞—Å–∞\n"
                "`/notifications test` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(current_settings['last_notification']).strftime('%H:%M:%S') if current_settings['last_notification'] > 0 else '–ù–∏–∫–æ–≥–¥–∞'}"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Notifications settings error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def test_all_connections_text(self, update):
        """üÜï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            test_message = await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            results = []
            
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.copy_system:
                results.append("‚úÖ Copy System: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –¢–µ—Å—Ç 2: API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                try:
                    if hasattr(self.copy_system, 'base_monitor'):
                        # –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        try:
                            source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                            results.append(f"‚úÖ Source API: –†–∞–±–æ—Ç–∞–µ—Ç (${source_balance:.2f})")
                        except Exception as e:
                            results.append(f"‚ùå Source API: –û—à–∏–±–∫–∞ ({str(e)[:30]}...)")
                        
                        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        try:
                            main_balance = await self.copy_system.base_monitor.main_client.get_balance()
                            results.append(f"‚úÖ Main API: –†–∞–±–æ—Ç–∞–µ—Ç (${main_balance:.2f})")
                        except Exception as e:
                            results.append(f"‚ùå Main API: –û—à–∏–±–∫–∞ ({str(e)[:30]}...)")
                    else:
                        results.append("‚ùå Base Monitor: –ù–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    results.append(f"‚ùå API Testing: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {str(e)[:30]}...")
                
                # –¢–µ—Å—Ç 3: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                try:
                    if (hasattr(self.copy_system, 'base_monitor') and 
                        hasattr(self.copy_system.base_monitor, 'websocket_manager')):
                        ws_manager = self.copy_system.base_monitor.websocket_manager
                        
                        if hasattr(ws_manager, 'ws') and ws_manager.ws:
                            results.append("‚úÖ WebSocket: –ü–æ–¥–∫–ª—é—á–µ–Ω")
                        else:
                            results.append("‚ùå WebSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    else:
                        results.append("‚ùå WebSocket Manager: –ù–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    results.append(f"‚ö†Ô∏è WebSocket Test: {str(e)[:40]}...")
                
                # –¢–µ—Å—Ç 4: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
                components = [
                    ('Kelly Calculator', 'kelly_calculator'),
                    ('Copy Manager', 'copy_manager'),
                    ('Drawdown Controller', 'drawdown_controller'),
                    ('Trailing Manager', 'trailing_manager')
                ]
                
                for name, attr in components:
                    if hasattr(self.copy_system, attr):
                        results.append(f"‚úÖ {name}: –ê–∫—Ç–∏–≤–µ–Ω")
                    else:
                        results.append(f"‚ùå {name}: –ù–µ –Ω–∞–π–¥–µ–Ω")
            else:
                results.append("‚ùå Copy System: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç 5: Telegram Bot
            results.append("‚úÖ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω (—ç—Ç–æ—Ç —Ç–µ—Å—Ç)")
            
            # –¢–µ—Å—Ç 6: –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
            try:
                test_file = "test_write.tmp"
                with open(test_file, 'w') as f:
                    f.write("test")
                os.remove(test_file)
                results.append("‚úÖ File System: –î–æ—Å—Ç—É–ø–µ–Ω")
            except Exception:
                results.append("‚ùå File System: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success_count = len([r for r in results if r.startswith("‚úÖ")])
            error_count = len([r for r in results if r.startswith("‚ùå")])
            warning_count = len([r for r in results if r.startswith("‚ö†Ô∏è")])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if error_count == 0 and warning_count == 0:
                overall_status = "üü¢ –û–¢–õ–ò–ß–ù–û"
            elif error_count == 0:
                overall_status = "üü° –•–û–†–û–®–û"
            elif error_count < 3:
                overall_status = "üü† –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´"
            else:
                overall_status = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò"
            
            final_message = (
                "üß™ *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üéØ **–û–ë–©–ò–ô –°–¢–ê–¢–£–°:** {overall_status}\n\n"
                
                "üìã **–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**\n" +
                "\n".join([f"   {result}" for result in results]) + "\n\n"
                
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}\n"
                f"   –û—à–∏–±–æ–∫: {error_count}\n"
                f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}\n\n"
                
                f"‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await test_message.edit_text(final_message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Connection test error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def show_system_logs_text(self, update):
        """üÜï –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        sys_logger.log_telegram_command("/logs", update.effective_user.id)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
            log_files = []
            log_directories = ['logs', '.', 'log']
            
            for log_dir in log_directories:
                if os.path.exists(log_dir):
                    for file in os.listdir(log_dir):
                        if file.endswith('.log'):
                            log_files.append(os.path.join(log_dir, file))
            
            if not log_files:
                await update.message.reply_text(
                    "üìú *–õ–û–ì–ò –°–ò–°–¢–ï–ú–´*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: logs, log –∏–ª–∏ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
            main_log_content = ""
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
                main_log_files = [f for f in log_files if 'trading' in f.lower() or 'main' in f.lower()]
                if not main_log_files:
                    main_log_files = log_files[:1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                
                main_log_file = main_log_files[0]
                
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                with open(main_log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()
                    last_lines = lines[-20:] if len(lines) > 20 else lines
                    main_log_content = ''.join(last_lines)
                    
            except Exception as e:
                main_log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}"
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è Telegram (–ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            if len(main_log_content) > 2000:
                main_log_content = "...\n" + main_log_content[-1900:]
            
            message = (
                "üìú *–õ–û–ì–ò –°–ò–°–¢–ï–ú–´*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìÅ **–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(log_files)}\n"
                f"üìÑ **–û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥:** {os.path.basename(main_log_files[0]) if main_log_files else '–ù–µ –Ω–∞–π–¥–µ–Ω'}\n\n"
                
                "üìã **–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò:**\n"
                f"```\n{main_log_content.strip()}\n```\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´:**\n"
                "`/logs 50` - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫\n"
                "`/logs errors` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏\n"
                "`/logs clear` - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"System logs error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    async def show_drawdown_settings_text(self, update):
        """üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–∞–¥–∫–æ–π"""
        try:
            current_settings = self.system_settings['drawdown']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                try:
                    controller = self.copy_system.drawdown_controller
                    current_settings['daily_limit'] = getattr(controller, 'daily_drawdown_limit', 0.05)
                    current_settings['total_limit'] = getattr(controller, 'max_drawdown_threshold', 0.15)
                    current_settings['emergency_threshold'] = getattr(controller, 'emergency_stop_threshold', 0.08)
                except Exception as e:
                    logger.warning(f"Failed to get drawdown settings: {e}")
            
            message = (
                "üìâ *–ù–ê–°–¢–†–û–ô–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–°–ê–î–ö–û–ô*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìä **–¢–ï–ö–£–©–ò–ï –õ–ò–ú–ò–¢–´:**\n"
                f"   –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {current_settings['daily_limit']:.1%}\n"
                f"   –û–±—â–∏–π –ª–∏–º–∏—Ç: {current_settings['total_limit']:.1%}\n"
                f"   Emergency –ø–æ—Ä–æ–≥: {current_settings['emergency_threshold']:.1%}\n\n"
                
                "üõ°Ô∏è **–ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:**\n"
                "   üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –∑–∞ –¥–µ–Ω—å\n"
                "   üìä –û–±—â–∏–π –ª–∏–º–∏—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –æ—Ç –ø–∏–∫–∞\n"
                "   üö® Emergency –ø–æ—Ä–æ–≥ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò:**\n"
                "`/set_drawdown daily 3` - –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç 3%\n"
                "`/set_drawdown total 12` - –æ–±—â–∏–π –ª–∏–º–∏—Ç 12%\n"
                "`/set_drawdown emergency 8` - emergency –ø–æ—Ä–æ–≥ 8%\n"
                "`/set_drawdown reset` - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–∞–¥–∫–∏\n\n"
                
                "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
                "   ‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: 3-5% (–∑–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)\n"
                "   ‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: 10-15% (–∑–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞)\n"
                "   ‚Ä¢ Emergency: 6-8% (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Drawdown settings error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å–∞–¥–∫–∏: {e}")
    
async def show_trailing_settings_text(self, update):
    """üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ trailing stops (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –Ω–æ–≤—ã–º DynamicTrailingStopManager)"""
    from datetime import datetime
    from telegram.constants import ParseMode

    def _pct(v, fmt="{:.1%}"):
        try:
            return fmt.format(float(v))
        except Exception:
            return "‚Äî"

    try:
        active_stops = 0
        snap = {
            "enabled": None,
            "mode": None,
            "step_pct": None,
            "max_pct": None,
            "activation_pct": None,
            "atr_period": None,
            "atr_multiplier": None,
        }

        tm = None
        if getattr(self, "copy_system", None) and hasattr(self.copy_system, "copy_manager"):
            tm = getattr(self.copy_system.copy_manager, "trailing_manager", None)

        if tm:
            try:
                if hasattr(tm, "get_config_snapshot"):
                    snap.update(tm.get_config_snapshot() or {})
                else:
                    snap["activation_pct"] = getattr(tm, "default_distance_percent", None)
                    snap["step_pct"]       = getattr(tm, "min_trail_step", None)
                    snap["max_pct"]        = getattr(tm, "max_distance_percent", None)
                    snap["mode"]           = "aggressive" if getattr(tm, "aggressive_mode", False) else "conservative"
                    snap["enabled"]        = True
            except Exception as e:
                logger.warning(f"Failed to get trailing snapshot: {e}")

            try:
                if hasattr(tm, "get_all_stops"):
                    active_stops = len(tm.get_all_stops() or [])
            except Exception as e:
                logger.warning(f"Failed to get active trailing stops count: {e}")

        message = (
            "üõ°Ô∏è *–ù–ê–°–¢–†–û–ô–ö–ò TRAILING STOPS*\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üéØ *–¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:*\n"
            f"   –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {_pct(snap.get('activation_pct'))}\n"
            f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥:     {_pct(snap.get('step_pct'), '{:.2%}')}\n"
            f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {_pct(snap.get('max_pct'))}\n"
            f"   ATR: –ø–µ—Ä–∏–æ–¥={snap.get('atr_period') or '‚Äî'}, –º–Ω–æ–∂–∏—Ç–µ–ª—å={snap.get('atr_multiplier') or '‚Äî'}\n"
            f"   –†–µ–∂–∏–º: {'–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π' if (snap.get('mode') == 'aggressive') else '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π'}\n"
            f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if snap.get('enabled') else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n"
            "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
            f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö trailing stops: {active_stops}\n\n"
            "üîß *–ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò:*\n"
            "`/set_trailing distance 2.5` ‚Äî –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è 2.5%\n"
            "`/set_trailing step 0.3` ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ 0.3%\n"
            "`/set_trailing max 4.0` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è 4.0%\n"
            "`/set_trailing atr 14 1.5` ‚Äî ATR –ø–µ—Ä–∏–æ–¥=14, –º–Ω–æ–∂–∏—Ç–µ–ª—å=1.5\n"
            "`/set_trailing aggressive on|off` ‚Äî —Ä–µ–∂–∏–º\n"
            "`/set_trailing enabled on|off` ‚Äî –≤–∫–ª/–≤—ã–∫–ª\n"
            "`/set_trailing clear_all` ‚Äî –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ trailing stops\n"
            "`/set_trailing status` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è\n\n"
            "üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
            "   ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: 1.5‚Äì3.0% (–ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)\n"
            "   ‚Ä¢ –®–∞–≥: 0.2‚Äì0.5% (—Ç–æ—á–Ω–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)\n"
            "   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 3.0‚Äì5.0% (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ç–∫–∞—Ç–æ–≤)\n\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )

        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"Trailing settings error: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ trailing: {e}")


    async def export_reports_text(self, update):
        """üÜï –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'timestamp': datetime.now().isoformat(),
                'system_status': {},
                'balances': {},
                'positions': [],
                'performance': {},
                'settings': self.system_settings
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            if self.copy_system:
                try:
                    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    export_data['system_status'] = {
                        'active': getattr(self.copy_system, 'system_active', False),
                        'copy_enabled': getattr(self.copy_system, 'copy_enabled', False),
                        'uptime': time.time() - getattr(self.copy_system, 'start_time', time.time())
                    }
                    
                    # –ë–∞–ª–∞–Ω—Å—ã
                    if hasattr(self.copy_system, 'base_monitor'):
                        try:
                            source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                            main_balance = await self.copy_system.base_monitor.main_client.get_balance()
                            export_data['balances'] = {
                                'source': source_balance,
                                'main': main_balance,
                                'total': source_balance + main_balance
                            }
                        except Exception as e:
                            export_data['balances'] = {'error': f'Unable to fetch balances: {e}'}
                    
                    # –ü–æ–∑–∏—Ü–∏–∏ (–¥–µ—Ç–∞–ª—å–Ω–æ)
                    try:
                        if hasattr(self.copy_system, 'base_monitor'):
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                            source_positions = await self.copy_system.base_monitor.source_client.get_positions()
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            main_positions = await self.copy_system.base_monitor.main_client.get_positions()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                            export_data['positions'] = {
                                'source': [p for p in source_positions if self._safe_float(p.get('size', 0)) > 0],
                                'main': [p for p in main_positions if self._safe_float(p.get('size', 0)) > 0]
                            }
                    except Exception as e:
                        export_data['positions'] = {'error': f'Unable to fetch positions: {e}'}
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if hasattr(self.copy_system, 'system_stats'):
                        stats = self.copy_system.system_stats
                        export_data['performance'] = {
                            'total_signals': stats.get('total_signals_processed', 0),
                            'successful_copies': stats.get('successful_copies', 0),
                            'failed_copies': stats.get('failed_copies', 0),
                            'success_rate': stats.get('success_rate', 0.0)
                        }
                        
                except Exception as e:
                    export_data['error'] = f"Data collection error: {e}"
            
            # –°–æ–∑–¥–∞–µ–º JSON –æ—Ç—á–µ—Ç
            report_filename = f"trading_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            try:
                with open(report_filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                file_size = os.path.getsize(report_filename)
                
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞: {e}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram
            text_report = (
                "üì§ *–≠–ö–°–ü–û–†–¢ –û–¢–ß–ï–¢–û–í*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìÑ **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:** `{report_filename}`\n"
                f"üìä **–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç\n"
                f"‚è∞ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                
                "üìã **–°–û–î–ï–†–ñ–ò–ú–û–ï –û–¢–ß–ï–¢–ê:**\n"
                "   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n"
                "   ‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö\n"
                "   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                "   ‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
                "   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kelly, Drawdown, Trailing\n\n"
                
                "üì§ **–î–û–°–¢–£–ü–ù–´–ï –§–û–†–ú–ê–¢–´:**\n"
                "`/export json` - –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON –æ—Ç—á–µ—Ç\n"
                "`/export csv` - CSV –¥–ª—è Excel\n"
                "`/export summary` - –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
                "`/export settings` - —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                
                f"‚úÖ JSON –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ `{report_filename}`\n"
                "–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
            )
            
            await update.message.reply_text(text_report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Export reports error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    async def backup_settings_text(self, update):
        """üÜï –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            backup_data = {
                'backup_timestamp': datetime.now().isoformat(),
                'version': '2.2',
                'telegram_bot_settings': {
                    'notification_settings': self.notification_settings,
                    'system_settings': self.system_settings,
                    'cooldown_time': self.cooldown_time
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if self.copy_system:
                try:
                    # Kelly Calculator –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if hasattr(self.copy_system, 'kelly_calculator'):
                        kelly_calc = self.copy_system.kelly_calculator
                        backup_data['kelly_settings'] = {
                            'confidence_threshold': getattr(kelly_calc, 'confidence_threshold', 0.65),
                            'max_kelly_fraction': getattr(kelly_calc, 'max_kelly_fraction', 0.25),
                            'conservative_factor': getattr(kelly_calc, 'conservative_factor', 0.5),
                            'lookback_period': getattr(kelly_calc, 'lookback_period', 30)
                        }
                    
                    # Drawdown Controller –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if hasattr(self.copy_system, 'drawdown_controller'):
                        dd_controller = self.copy_system.drawdown_controller
                        backup_data['drawdown_settings'] = {
                            'daily_limit': getattr(dd_controller, 'daily_drawdown_limit', 0.05),
                            'total_limit': getattr(dd_controller, 'max_drawdown_threshold', 0.15),
                            'emergency_threshold': getattr(dd_controller, 'emergency_stop_threshold', 0.08)
                        }
                    
                    # Copy Manager –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if hasattr(self.copy_system, 'copy_manager'):
                        copy_manager = self.copy_system.copy_manager
                        backup_data['copy_settings'] = {
                            'copy_mode': str(getattr(copy_manager, 'copy_mode', 'DEFAULT')),
                            'max_positions': getattr(copy_manager, 'max_positions', 10),
                            'position_scaling': getattr(copy_manager, 'position_scaling', 1.0)
                        }
                        
                except Exception as e:
                    backup_data['collection_error'] = str(e)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_filename = f"settings_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            try:
                with open(backup_filename, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, indent=2, ensure_ascii=False)
                
                file_size = os.path.getsize(backup_filename)
                
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup —Ñ–∞–π–ª–∞: {e}")
                return
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é —Å –∏–º–µ–Ω–µ–º –ø–æ –¥–∞—Ç–µ
            archive_filename = f"backup_{datetime.now().strftime('%Y%m%d')}.json"
            try:
                with open(archive_filename, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, indent=2, ensure_ascii=False)
            except Exception as e:
                logger.warning(f"Failed to create archive backup: {e}")
            
            message = (
                "üíæ *–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìÑ **Backup —Ñ–∞–π–ª:** `{backup_filename}`\n"
                f"üìä **–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç\n"
                f"‚è∞ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                
                "üìã **–°–û–•–†–ê–ù–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:**\n"
                "   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly Criterion\n"
                "   ‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ—Å–∞–¥–∫–∏\n"
                "   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Trailing Stops\n"
                "   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Copy Manager\n"
                "   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:**\n"
                "`/backup create` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π backup\n"
                "`/backup list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö backup'–æ–≤\n"
                "`/backup restore latest` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π\n"
                "`/backup clean old` - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ backup'—ã\n\n"
                
                "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
                "   ‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n"
                "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ backup'—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n"
                "   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏\n\n"
                
                f"‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: `{backup_filename}`"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Backup settings error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def restore_settings_text(self, update):
        """üÜï –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ backup"""
        try:
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ backup —Ñ–∞–π–ª—ã
            backup_files = []
            for file in os.listdir('.'):
                if file.startswith('settings_backup_') and file.endswith('.json'):
                    backup_files.append(file)
            
            backup_files.sort(reverse=True)  # –ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞
            
            if not backup_files:
                await update.message.reply_text(
                    "üîÑ *–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ backup –∫–æ–º–∞–Ω–¥–æ–π: üíæ Backup –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ backup'—ã
            backup_list = ""
            for i, backup_file in enumerate(backup_files[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                try:
                    file_time = os.path.getmtime(backup_file)
                    file_size = os.path.getsize(backup_file)
                    backup_list += f"   {i+1}. `{backup_file}`\n      üìÖ {datetime.fromtimestamp(file_time).strftime('%d.%m.%Y %H:%M')} ({file_size} –±–∞–π—Ç)\n"
                except Exception as e:
                    backup_list += f"   {i+1}. `{backup_file}` (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e})\n"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π backup –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            preview_info = "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            if backup_files:
                try:
                    with open(backup_files[0], 'r', encoding='utf-8') as f:
                        backup_data = json.load(f)
                        
                    preview_info = (
                        f"üìÑ –í–µ—Ä—Å–∏—è: {backup_data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"‚è∞ –°–æ–∑–¥–∞–Ω: {backup_data.get('backup_timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19]}\n"
                        f"üìä –†–∞–∑–¥–µ–ª–æ–≤: {len(backup_data)} —Å–µ–∫—Ü–∏–π"
                    )
                    
                except Exception as e:
                    preview_info = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"
            
            message = (
                "üîÑ *–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìã **–î–û–°–¢–£–ü–ù–´–ï BACKUP'–´:** {len(backup_files)}\n\n"
                
                "üìÇ **–ü–û–°–õ–ï–î–ù–ò–ï BACKUP'–´:**\n"
                f"{backup_list}\n"
                
                "üîç **–ü–†–ï–í–¨–Æ –ü–û–°–õ–ï–î–ù–ï–ì–û BACKUP'–ê:**\n"
                f"{preview_info}\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:**\n"
                "`/restore latest` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π backup\n"
                "`/restore filename.json` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª\n"
                "`/restore preview latest` - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                "`/restore kelly only` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ Kelly –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                
                "‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
                "   ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å backup –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º\n"
                "   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                
                f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π backup: `{backup_files[0] if backup_files else '–ù–µ—Ç'}`"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Restore settings error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    # ================================
    # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
    # ================================
    
    async def notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /notifications - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        sys_logger.log_telegram_command("/notifications", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            args = context.args
            if not args:
                await self.show_notifications_settings_text(update)
                return
            
            command = args[0].lower()
            
            if command == 'on':
                self.notification_settings['enabled'] = True
                await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
                
            elif command == 'off':
                self.notification_settings['enabled'] = False
                await update.message.reply_text("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
                
            elif command == 'interval' and len(args) > 1:
                try:
                    hours = int(args[1])
                    if 1 <= hours <= 24:
                        self.notification_settings['interval_hours'] = hours
                        await update.message.reply_text(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {hours} —á–∞—Å–æ–≤")
                    else:
                        await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤")
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /notifications interval 4")
                    
            elif command == 'test':
                await self._send_test_notification()
                await update.message.reply_text("üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: on, off, interval <—á–∞—Å—ã>, test"
                )
                
        except Exception as e:
            logger.error(f"Notifications command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _send_test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            test_message = (
                "üß™ **–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            )
            await send_telegram_alert(test_message)
        except Exception as e:
            logger.error(f"Test notification error: {e}")
            logger.error(traceback.format_exc())
    
async def set_trailing_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üÜï /set_trailing ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ DynamicTrailingStopManager.reload_config(patch)"""
    from datetime import datetime
    from telegram.constants import ParseMode
    sys_logger.log_telegram_command("/set_trailing", update.effective_user.id)

    if not self.check_authorization(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    def _parse_bool(val: str) -> bool:
        v = (val or "").strip().lower()
        if v in {"1", "on", "true", "yes", "y", "enable", "enabled"}:
            return True
        if v in {"0", "off", "false", "no", "n", "disable", "disabled"}:
            return False
        raise ValueError("–û–∂–∏–¥–∞–ª–æ—Å—å on/off")

    def _parse_float_pct(val: str, name: str, min_pct: float, max_pct: float) -> float:
        try:
            x = float(val.replace(",", "."))
        except Exception:
            raise ValueError(f"{name}: –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '{val}'")
        if not (min_pct <= x <= max_pct):
            raise ValueError(f"{name}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_pct}‚Äì{max_pct}%")
        return x / 100.0

    def _reply_snapshot(mgr) -> str:
        try:
            snap = mgr.get_config_snapshot()
        except Exception:
            snap = {
                "activation_pct": getattr(mgr, "default_distance_percent", None),
                "step_pct": getattr(mgr, "min_trail_step", None),
                "max_pct": getattr(mgr, "max_distance_percent", None),
                "mode": "aggressive" if getattr(mgr, "aggressive_mode", False) else "conservative",
                "enabled": True,
                "atr_period": getattr(mgr, "atr_period", None),
                "atr_multiplier": getattr(mgr, "atr_multiplier", None),
            }
        def _pct(v, fmt="{:.2%}"):
            try:
                return fmt.format(float(v))
            except Exception:
                return "‚Äî"
        return (
            "üõ°Ô∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ enabled: {snap.get('enabled')}\n"
            f"‚Ä¢ mode: {snap.get('mode')}\n"
            f"‚Ä¢ activation: {_pct(snap.get('activation_pct'))}\n"
            f"‚Ä¢ step: {_pct(snap.get('step_pct'))}\n"
            f"‚Ä¢ max: {_pct(snap.get('max_pct'))}\n"
            f"‚Ä¢ atr_period: {snap.get('atr_period') or '‚Äî'}\n"
            f"‚Ä¢ atr_multiplier: {snap.get('atr_multiplier') or '‚Äî'}"
        )

    tm = None
    if getattr(self, "copy_system", None) and hasattr(self.copy_system, "copy_manager"):
        tm = getattr(self.copy_system.copy_manager, "trailing_manager", None)

    if not tm:
        await update.message.reply_text("‚ùå Trailing Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    args = context.args or []
    if not args:
        await update.message.reply_text(
            "üõ°Ô∏è *–ù–ê–°–¢–†–û–ô–ö–ê TRAILING STOP*\n\n"
            "`/set_trailing distance 2.5` ‚Äî –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è 2.5%\n"
            "`/set_trailing step 0.3` ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ 0.3%\n"
            "`/set_trailing max 4.0` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è 4.0%\n"
            "`/set_trailing atr 14 1.5` ‚Äî ATR –ø–µ—Ä–∏–æ–¥=14, –º–Ω–æ–∂–∏—Ç–µ–ª—å=1.5\n"
            "`/set_trailing aggressive on|off` ‚Äî —Ä–µ–∂–∏–º\n"
            "`/set_trailing enabled on|off` ‚Äî –≤–∫–ª/–≤—ã–∫–ª\n"
            "`/set_trailing clear_all` ‚Äî –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ trailing stops\n"
            "`/set_trailing status` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    sub = args[0].lower()

    if sub in {"status", "show"}:
        await update.message.reply_text(_reply_snapshot(tm))
        return

    if sub == "clear_all":
        try:
            if hasattr(tm, "clear_all_stops"):
                fn = tm.clear_all_stops
                if callable(getattr(fn, "__call__", None)):
                    res = fn()
                    if hasattr(res, "__await__"):
                        await res
            await update.message.reply_text("‚úÖ –í—Å–µ trailing stops –æ—á–∏—â–µ–Ω—ã")
            try:
                from app.db_session import SessionLocal
                from app.db_models import SysEvents
                with SessionLocal() as session:
                    event = SysEvents(
                        level="INFO",
                        component="TelegramBot",
                        message="All trailing stops cleared",
                        details_json={"action": "clear_all", "user_id": update.effective_user.id},
                    )
                    session.add(event)
                    session.commit()
            except Exception as e:
                logger.error(f"Failed to log clear_all to sys_events: {e}")
            try:
                await send_telegram_alert("üõ°Ô∏è –í—Å–µ trailing stops –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            except Exception:
                pass
        except Exception as e:
            logger.error(f"Failed to clear trailing stops: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ trailing stops: {e}")
        return

    patch = {}
    try:
        if sub in {"aggressive", "enabled", "mode"}:
            if sub == "aggressive":
                if len(args) < 2:
                    raise ValueError("Usage: /set_trailing aggressive on|off")
                patch["mode"] = "aggressive" if _parse_bool(args[1]) else "conservative"
            elif sub == "enabled":
                if len(args) < 2:
                    raise ValueError("Usage: /set_trailing enabled on|off")
                patch["enabled"] = _parse_bool(args[1])
            else:
                if len(args) < 2:
                    raise ValueError("Usage: /set_trailing mode aggressive|conservative")
                mode = args[1].strip().lower()
                if mode not in {"aggressive", "conservative"}:
                    raise ValueError("mode must be aggressive|conservative")
                patch["mode"] = mode

        elif sub in {"distance", "initial_distance", "activation"}:
            if len(args) < 2:
                raise ValueError("Usage: /set_trailing distance <percent>")
            patch["activation_pct"] = _parse_float_pct(args[1], "–î–∏—Å—Ç–∞–Ω—Ü–∏—è", 0.1, 10.0)

        elif sub in {"step", "min_step"}:
            if len(args) < 2:
                raise ValueError("Usage: /set_trailing step <percent>")
            patch["step_pct"] = _parse_float_pct(args[1], "–®–∞–≥", 0.05, 5.0)

        elif sub in {"max", "max_distance"}:
            if len(args) < 2:
                raise ValueError("Usage: /set_trailing max <percent>")
            patch["max_pct"] = _parse_float_pct(args[1], "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è", 1.0, 15.0)

        elif sub == "atr":
            if len(args) < 3:
                raise ValueError("Usage: /set_trailing atr <period:int> <multiplier:float>")
            period = int(args[1]);  mult = float(args[2].replace(",", "."))
            if period < 1:  raise ValueError("atr_period must be ‚â• 1")
            if mult <= 0:   raise ValueError("atr_multiplier must be > 0")
            patch["atr_period"] = period
            patch["atr_multiplier"] = mult

        elif sub in {"atr_period", "atrperiod"}:
            if len(args) < 2:
                raise ValueError("Usage: /set_trailing atr_period <int>")
            period = int(args[1])
            if period < 1:
                raise ValueError("atr_period must be ‚â• 1")
            patch["atr_period"] = period

        elif sub in {"atr_mult", "atr_multiplier", "atrmult"}:
            if len(args) < 2:
                raise ValueError("Usage: /set_trailing atr_multiplier <float>")
            mult = float(args[1].replace(",", "."))
            if mult <= 0:
                raise ValueError("atr_multiplier must be > 0")
            patch["atr_multiplier"] = mult

        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: distance, step, max, atr, aggressive, enabled, status")

    except ValueError as ve:
        await update.message.reply_text(f"‚ùå {ve}")
        return

    try:
        tm.reload_config(patch)
        try:
            from app.db_session import SessionLocal
            from app.db_models import SysEvents
            with SessionLocal() as session:
                event = SysEvents(
                    level="INFO",
                    component="TelegramBot",
                    message="Trailing config updated",
                    details_json={
                        "patch": patch,
                        "user_id": update.effective_user.id,
                        "timestamp": datetime.now().isoformat(),
                    },
                )
                session.add(event)
                session.commit()
        except Exception as e:
            logger.error(f"Failed to log trailing patch to sys_events: {e}")

        reply = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.\n" + _reply_snapshot(tm)
        await update.message.reply_text(reply)

    except Exception as e:
        logger.error("Set trailing command error: %r", e, exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    async def set_kelly_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /set_kelly - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kelly Criterion"""
        sys_logger.log_telegram_command("/set_kelly", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not self.copy_system or not hasattr(self.copy_system, 'kelly_calculator'):
            await update.message.reply_text("‚ùå Kelly Calculator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            args = context.args
            if len(args) < 2:
                kelly_calc = self.copy_system.kelly_calculator
                confidence = getattr(kelly_calc, 'confidence_threshold', 0.65) * 100
                max_fraction = getattr(kelly_calc, 'max_kelly_fraction', 0.25) * 100
                conservative = getattr(kelly_calc, 'conservative_factor', 0.5) * 100
        
                message = (
                    "üéØ **–ù–ê–°–¢–†–û–ô–ö–ò KELLY CRITERION**\n\n"
                    f"üìä **–¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:**\n"
                    f"   Confidence Threshold: {confidence:.0f}%\n"
                    f"   Max Kelly Fraction: {max_fraction:.0f}%\n"
                    f"   Conservative Factor: {conservative:.0f}%\n\n"
                    "üìù **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**\n"
                    "`/set_kelly confidence 70` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å confidence 70%\n"
                    "`/set_kelly max_fraction 25` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è 25%\n"
                    "`/set_kelly conservative 50` - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä 50%"
                )
        
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return
    
            param = args[0].lower()
            value = float(args[1])
        
            # –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –º–æ–¥–µ–ª–∏ –ë–î
            from stage2_copy_system import KELLY_CONFIG
            from app.db_session import SessionLocal
            from app.db_models import SysEvents
    
            kelly_calc = self.copy_system.kelly_calculator
        
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ò –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥–µ
            if param in ['confidence', 'confidence_threshold']:
                KELLY_CONFIG['confidence_threshold'] = value / 100  # –ù–û–í–û–ï
                kelly_calc.confidence_threshold = value / 100
                param_name = "Confidence Threshold"
                new_value = f"{value:.0f}%"
            elif param in ['max_fraction', 'max_kelly_fraction']:
                KELLY_CONFIG['max_kelly_fraction'] = value / 100  # –ù–û–í–û–ï
                kelly_calc.max_kelly_fraction = value / 100
                param_name = "Max Kelly Fraction"
                new_value = f"{value:.0f}%"
            elif param in ['conservative', 'conservative_factor']:
                KELLY_CONFIG['conservative_factor'] = value / 100  # –ù–û–í–û–ï
                kelly_calc.conservative_factor = value / 100
                param_name = "Conservative Factor"
                new_value = f"{value:.0f}%"
            elif param in ['lookback', 'lookback_period']:
                KELLY_CONFIG['lookback_window'] = int(value)  # –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
                kelly_calc.lookback_period = int(value)
                param_name = "Lookback Period"
                new_value = f"{int(value)} –¥–Ω–µ–π"
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: confidence, max_fraction, conservative, lookback")
                return
        
            # –ù–û–í–û–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É —á–µ—Ä–µ–∑ apply_config
            if self.copy_system and hasattr(self.copy_system, 'kelly_calculator'):
                if hasattr(kelly_calc, 'apply_config'):
                    kelly_calc.apply_config(KELLY_CONFIG)
                else:
                    logger.warning("Kelly calculator doesn't have apply_config method")
        
            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ sys_events
            try:
                with SessionLocal() as session:
                    event = SysEvents(
                        level="INFO",
                        component="TelegramBot",
                        message=f"Kelly config updated: {param_name}={new_value}",
                        details_json={
                            "param": param,
                            "value": value,
                            "user_id": update.effective_user.id,
                            "timestamp": datetime.now().isoformat()
                        }
                    )
                    session.add(event)
                    session.commit()
                    logger.info(f"Kelly config change logged to sys_events: {param_name}={new_value}")
            except Exception as e:
                logger.error(f"Failed to log to sys_events: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    
            message = (
                f"‚úÖ **–ù–ê–°–¢–†–û–ô–ö–ê KELLY –û–ë–ù–û–í–õ–ï–ù–ê**\n\n"
                f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä: {param_name}\n"
                f"üìä –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}\n"
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
                "üîÑ –ù–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
    
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            await send_telegram_alert(f"Kelly Criterion –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {param_name} = {new_value}")
    
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
        except Exception as e:
            logger.error(f"Set Kelly command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly: {str(e)[:100]}")

    async def set_drawdown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /set_drawdown - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        sys_logger.log_telegram_command("/set_drawdown", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        try:
            args = context.args
        
            # –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –º–æ–¥–µ–ª–∏ –ë–î
            from stage2_copy_system import RISK_CONFIG
            from app.db_session import SessionLocal
            from app.db_models import SysEvents
        
            if len(args) < 1:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                daily_limit = RISK_CONFIG.get('max_daily_loss', 0.05) * 100
                total_limit = RISK_CONFIG.get('max_total_drawdown', 0.15) * 100
                emergency = RISK_CONFIG.get('emergency_stop_threshold', 0.1) * 100
            
                await update.message.reply_text(
                    "üìâ *–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–¢–†–û–õ–Ø –ü–†–û–°–ê–î–ö–ò*\n\n"
                    f"**–¢–ï–ö–£–©–ò–ï –õ–ò–ú–ò–¢–´:**\n"
                    f"   –î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {daily_limit:.0f}%\n"
                    f"   –û–±—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {total_limit:.0f}%\n"
                    f"   Emergency Stop: {emergency:.0f}%\n\n"
                    "üìù **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**\n"
                    "`/set_drawdown daily 3` - –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç 3%\n"
                    "`/set_drawdown total 12` - –æ–±—â–∏–π –ª–∏–º–∏—Ç 12%\n"
                    "`/set_drawdown emergency 8` - emergency –ø–æ—Ä–æ–≥ 8%\n"
                    "`/set_drawdown reset` - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–∞–¥–∫–∏",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
    
            param = args[0].lower()
    
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–∞–¥–∫–∏
            if param == 'reset':
                if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                    try:
                        await self.copy_system.drawdown_controller.reset_drawdown_counters()
                    
                        # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –≤ sys_events
                        try:
                            with SessionLocal() as session:
                                event = SysEvents(
                                    level="INFO",
                                    component="TelegramBot",
                                    message="Drawdown counters reset",
                                    details_json={
                                        "action": "reset_drawdown",
                                        "user_id": update.effective_user.id,
                                        "timestamp": datetime.now().isoformat()
                                    }
                                )
                                session.add(event)
                                session.commit()
                        except Exception as e:
                            logger.error(f"Failed to log reset to sys_events: {e}")
                    
                        await update.message.reply_text("‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–∞–¥–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                        await send_telegram_alert("üìâ –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–∞–¥–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    except Exception as e:
                        logger.error(f"Failed to reset drawdown counters: {e}")
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
                else:
                    await update.message.reply_text("‚ùå Drawdown Controller –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
    
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–±—É—é—Ç —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if len(args) < 2:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
                return
        
            try:
                value = float(args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
                return
        
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if param in ('daily', 'daily_limit'):
                if value < 1 or value > 10:
                    await update.message.reply_text("‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 10%")
                    return
        
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                RISK_CONFIG['max_daily_loss'] = value / 100
                self.system_settings['drawdown']['daily_limit'] = value / 100
                param_name = "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏"
        
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                    try:
                        self.copy_system.drawdown_controller.daily_drawdown_limit = value / 100
                    except Exception as e:
                        logger.warning(f"Failed to apply daily drawdown limit: {e}")
            
                # –ù–û–í–û–ï: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º risk_monitor –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.copy_system and hasattr(self.copy_system, 'risk_monitor'):
                    self.copy_system.risk_monitor.config = RISK_CONFIG
        
            elif param in ('total', 'total_limit'):
                if value < 5 or value > 30:
                    await update.message.reply_text("‚ùå –û–±—â–∏–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5% –¥–æ 30%")
                    return
        
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                RISK_CONFIG['max_total_drawdown'] = value / 100
                self.system_settings['drawdown']['total_limit'] = value / 100
                param_name = "–û–±—â–∏–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏"
        
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                    try:
                        self.copy_system.drawdown_controller.max_drawdown_threshold = value / 100
                    except Exception as e:
                        logger.warning(f"Failed to apply total drawdown limit: {e}")
            
                # –ù–û–í–û–ï: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º risk_monitor –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.copy_system and hasattr(self.copy_system, 'risk_monitor'):
                    self.copy_system.risk_monitor.config = RISK_CONFIG
        
            elif param in ('emergency', 'emergency_threshold'):
                if value < 3 or value > 15:
                    await update.message.reply_text("‚ùå Emergency –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3% –¥–æ 15%")
                    return
        
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                RISK_CONFIG['emergency_stop_threshold'] = value / 100
                self.system_settings['drawdown']['emergency_threshold'] = value / 100
                param_name = "Emergency –ø–æ—Ä–æ–≥"
        
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                    try:
                        self.copy_system.drawdown_controller.emergency_stop_threshold = value / 100
                    except Exception as e:
                        logger.warning(f"Failed to apply emergency threshold: {e}")
            
                # –ù–û–í–û–ï: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º risk_monitor –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.copy_system and hasattr(self.copy_system, 'risk_monitor'):
                    self.copy_system.risk_monitor.config = RISK_CONFIG
        
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: daily, total, emergency, reset")
                return
        
            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ sys_events
            try:
                with SessionLocal() as session:
                    event = SysEvents(
                        level="INFO",
                        component="TelegramBot",
                        message=f"Risk config updated: {param_name}={value:.1f}%",
                        details_json={
                            "param": param,
                            "value": value,
                            "user_id": update.effective_user.id,
                            "timestamp": datetime.now().isoformat(),
                            "risk_config": {
                                "daily_limit": RISK_CONFIG.get('max_daily_loss', 0.05) * 100,
                                "total_limit": RISK_CONFIG.get('max_total_drawdown', 0.15) * 100,
                                "emergency": RISK_CONFIG.get('emergency_stop_threshold', 0.1) * 100
                            }
                        }
                    )
                    session.add(event)
                    session.commit()
                    logger.info(f"Risk config change logged to sys_events: {param_name}={value:.1f}%")
            except Exception as e:
                logger.error(f"Failed to log to sys_events: {e}")
    
            message = (
                f"‚úÖ **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–¢–†–û–õ–Ø –ü–†–û–°–ê–î–ö–ò –û–ë–ù–û–í–õ–ï–ù–ê**\n\n"
                f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä: {param_name}\n"
                f"üìä –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value:.1f}%\n"
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
                "üîÑ –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            )
    
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if param == 'emergency' or (param == 'daily' and value <= 3):
                await send_telegram_alert(f"‚ö†Ô∏è –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {param_name} = {value:.1f}%")
    
        except Exception as e:
            logger.error(f"Set drawdown command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏: {e}")

    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /logs - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –ë–î"""

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        sys_logger.log_telegram_command("/logs", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        try:
            args = context.args
        
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            if not args:
                # –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ sys_events
                limit = 10
                with SessionLocal() as session:
                    events = session.query(SysEvents)\
                        .order_by(SysEvents.id.desc())\
                        .limit(limit)\
                        .all()
                
                    if not events:
                        await update.message.reply_text("üìã –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ")
                        return
                
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                    message = f"üìã **–ü–û–°–õ–ï–î–ù–ò–ï {len(events)} –°–ò–°–¢–ï–ú–ù–´–• –°–û–ë–´–¢–ò–ô:**\n\n"
                
                    for event in reversed(events):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                        level_emoji = {
                            "INFO": "‚ÑπÔ∏è",
                            "WARN": "‚ö†Ô∏è", 
                            "ERROR": "‚ùå"
                        }.get(event.level, "üìù")
                    
                        time_str = event.created_at.strftime("%H:%M:%S")
                        msg = f"{level_emoji} `{time_str}` **{event.component}**\n"
                        msg += f"   {event.message[:100]}\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    
                        message += msg
                
                    message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/logs 20` –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n"
                    message += f"üìÑ –ò–ª–∏ `/logs file` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤"
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(message) > 4000:
                        parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                        for part in parts:
                            await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
                    else:
                        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return

            command = args[0].lower()
        
            # –ù–û–í–û–ï: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î
            if command.isdigit():
                limit = min(int(command), 50)  # –ú–∞–∫—Å–∏–º—É–º 50
            
                # –õ–æ–≥–∏—Ä—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                sys_logger.log_telegram_command(f"/logs {limit}", update.effective_user.id)
            
                with SessionLocal() as session:
                    events = session.query(SysEvents)\
                        .order_by(SysEvents.id.desc())\
                        .limit(limit)\
                        .all()
                
                    if not events:
                        await update.message.reply_text("üìã –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥–µ")
                        return
                
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                    message = f"üìã **–ü–û–°–õ–ï–î–ù–ò–ï {len(events)} –°–û–ë–´–¢–ò–ô:**\n\n"
                
                    for event in reversed(events):
                        level_emoji = {
                            "INFO": "‚ÑπÔ∏è",
                            "WARN": "‚ö†Ô∏è", 
                            "ERROR": "‚ùå"
                        }.get(event.level, "üìù")
                    
                        time_str = event.created_at.strftime("%H:%M:%S")
                        msg = f"{level_emoji} `{time_str}` **{event.component}**\n"
                        msg += f"   {event.message[:100]}\n"
                    
                        message += msg
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(message) > 4000:
                        parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                        for part in parts:
                            await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
                    else:
                        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return
        
            # –ù–û–í–û–ï: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏–∑ –ë–î
            elif command == 'errors':
                with SessionLocal() as session:
                    events = session.query(SysEvents)\
                        .filter(SysEvents.level.in_(["ERROR", "WARN"]))\
                        .order_by(SysEvents.id.desc())\
                        .limit(30)\
                        .all()
                
                    if not events:
                        message = (
                            "üìú *–û–®–ò–ë–ö–ò –í –°–ò–°–¢–ï–ú–ï*\n\n"
                            "‚úÖ –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        )
                    else:
                        message = "üìú *–ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:*\n\n"
                    
                        for event in reversed(events):
                            level_emoji = "‚ùå" if event.level == "ERROR" else "‚ö†Ô∏è"
                            time_str = event.created_at.strftime("%H:%M:%S")
                            msg = f"{level_emoji} `{time_str}` **{event.component}**\n"
                            msg += f"   {event.message[:100]}\n"
                        
                            message += msg
                    
                        message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return
        
            # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
            elif command == 'file':
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
                if len(args) > 1 and args[1].isdigit():
                    lines_count = int(args[1])
                    if lines_count < 1 or lines_count > 200:
                        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200")
                        return
                
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã
                    log_files = []
                    log_directories = ['logs', '.', 'log']
                
                    for log_dir in log_directories:
                        if os.path.exists(log_dir):
                            for file in os.listdir(log_dir):
                                if file.endswith('.log'):
                                    log_files.append(os.path.join(log_dir, file))
                
                    if not log_files:
                        await update.message.reply_text("‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return
                
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                    log_files.sort(key=os.path.getmtime, reverse=True)
                    main_log_file = log_files[0]
                
                    try:
                        with open(main_log_file, 'r', encoding='utf-8', errors='ignore') as f:
                            lines = f.readlines()
                            last_lines = lines[-lines_count:] if len(lines) >= lines_count else lines
                            log_content = ''.join(last_lines)
                    
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è Telegram
                        if len(log_content) > 3000:
                            log_content = "...\n" + log_content[-2900:]
                    
                        message = (
                            f"üìú *–ü–û–°–õ–ï–î–ù–ò–ï {lines_count} –°–¢–†–û–ö –§–ê–ô–õ–ê*\n"
                            f"üìÑ –§–∞–π–ª: `{os.path.basename(main_log_file)}`\n\n"
                            f"```\n{log_content.strip()}\n```\n\n"
                            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                        )
                    
                        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                    
                    except Exception as e:
                        logger.error(f"Failed to read log file: {e}")
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                else:
                    await update.message.reply_text(
                        "üìÑ **–†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò –õ–û–ì–û–í**\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "`/logs file 50` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞\n"
                        "`/logs file errors` - –æ—à–∏–±–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞",
                        parse_mode=ParseMode.MARKDOWN
                    )
                return
        
            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            elif command == 'clear':
                # –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î
                if len(args) > 1 and args[1].lower() == 'db':
                    if len(args) > 2 and args[2].lower() == 'confirm':
                        try:
                            with SessionLocal() as session:
                                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
                                cutoff_date = datetime.now() - timedelta(days=7)
                                deleted = session.query(SysEvents)\
                                    .filter(SysEvents.created_at < cutoff_date)\
                                    .delete()
                                session.commit()
                            
                                await update.message.reply_text(
                                    f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î\n"
                                    "(—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"
                                )
                            
                                # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
                                sys_logger.log_event("INFO", "TelegramBot", 
                                                   f"Database events cleared (deleted: {deleted})",
                                                   {"user_id": update.effective_user.id})
                        except Exception as e:
                            logger.error(f"Failed to clear DB events: {e}")
                            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
                    else:
                        await update.message.reply_text(
                            "‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ë–î**\n\n"
                            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π.\n\n"
                            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                            "`/logs clear db confirm`",
                            parse_mode=ParseMode.MARKDOWN
                        )
            
                # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ–ª–Ω—ã–π –∫–æ–¥)
                elif len(args) > 1 and args[1].lower() == 'files':
                    if len(args) > 2 and args[2].lower() == 'confirm':
                        # –†–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
                        cleared_count = 0
                        errors_count = 0
                    
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã
                        log_files = []
                        log_directories = ['logs', '.', 'log']
                    
                        for log_dir in log_directories:
                            if os.path.exists(log_dir):
                                for file in os.listdir(log_dir):
                                    if file.endswith('.log'):
                                        log_files.append(os.path.join(log_dir, file))
                    
                        if not log_files:
                            await update.message.reply_text("‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            return
                    
                        # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
                        for log_file in log_files:
                            try:
                                # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –∞ —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                                with open(log_file, 'w') as f:
                                    f.write(f"Log cleared at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                                cleared_count += 1
                            except Exception as e:
                                logger.warning(f"Failed to clear log file {log_file}: {e}")
                                errors_count += 1
                    
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –ë–î
                        sys_logger.log_event("INFO", "TelegramBot", 
                                           f"Log files cleared (success: {cleared_count}, failed: {errors_count})",
                                           {"user_id": update.effective_user.id, 
                                            "cleared_files": cleared_count,
                                            "failed_files": errors_count})
                    
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        if errors_count > 0:
                            await update.message.reply_text(
                                f"‚úÖ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleared_count}\n"
                                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å: {errors_count}"
                            )
                        else:
                            await update.message.reply_text(
                                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {cleared_count}"
                            )
                    else:
                        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                        log_files_count = 0
                        log_directories = ['logs', '.', 'log']
                    
                        for log_dir in log_directories:
                            if os.path.exists(log_dir):
                                for file in os.listdir(log_dir):
                                    if file.endswith('.log'):
                                        log_files_count += 1
                    
                        await update.message.reply_text(
                            f"‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –§–ê–ô–õ–û–í**\n\n"
                            f"–ë—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {log_files_count}\n"
                            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
                            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                            f"`/logs clear files confirm`",
                            parse_mode=ParseMode.MARKDOWN
                        )
                else:
                    await update.message.reply_text(
                        "üóëÔ∏è **–û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í**\n\n"
                        "`/logs clear db` - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –ë–î\n"
                        "`/logs clear files` - –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤",
                        parse_mode=ParseMode.MARKDOWN
                    )
                return
        
            # –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
            elif command == 'stats':
                with SessionLocal() as session:
                    total = session.query(SysEvents).count()
                    errors = session.query(SysEvents).filter_by(level="ERROR").count()
                    warnings = session.query(SysEvents).filter_by(level="WARN").count()
                
                    # –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    hour_ago = datetime.now() - timedelta(hours=1)
                    recent = session.query(SysEvents)\
                        .filter(SysEvents.created_at > hour_ago).count()
                
                    # –¢–æ–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
                    from sqlalchemy import func
                    top_components = session.query(
                        SysEvents.component,
                        func.count(SysEvents.id).label('count')
                    ).group_by(SysEvents.component)\
                    .order_by(func.count(SysEvents.id).desc())\
                    .limit(5).all()
                
                    message = (
                        "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –°–û–ë–´–¢–ò–ô**\n\n"
                        f"üìà **–û–ë–©–ï–ï:**\n"
                        f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}\n"
                        f"   –û—à–∏–±–æ–∫: {errors}\n"
                        f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}\n"
                        f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {recent}\n\n"
                        f"üèÜ **–¢–û–ü –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:**\n"
                    )
                
                    for comp, count in top_components:
                        message += f"   {comp}: {count}\n"
                
                    message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return
        
            else:
                # –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
                await update.message.reply_text(
                    "üìã **–ö–û–ú–ê–ù–î–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø**\n\n"
                    "**–°–æ–±—ã—Ç–∏—è –∏–∑ –ë–î:**\n"
                    "`/logs` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π\n"
                    "`/logs 30` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–±—ã—Ç–∏–π\n"
                    "`/logs errors` - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏\n"
                    "`/logs stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π\n\n"
                    "**–§–∞–π–ª—ã –ª–æ–≥–æ–≤:**\n"
                    "`/logs file 50` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫\n\n"
                    "**–û—á–∏—Å—Ç–∫–∞:**\n"
                    "`/logs clear db` - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –ë–î\n"
                    "`/logs clear files` - –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã",
                    parse_mode=ParseMode.MARKDOWN
                )
            
        except Exception as e:
            logger.error(f"Logs command error: {e}")
            logger.error(traceback.format_exc())
        
            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–º–∞–Ω–¥—ã
            sys_logger.log_error("TelegramBot", f"Logs command failed: {str(e)}", 
                               {"user_id": update.effective_user.id})
        
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ª–æ–≥–æ–≤: {e}")

    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /export - —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö"""
        sys_logger.log_telegram_command("/export", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
    
        try:
            args = context.args
            export_type = args[0].lower() if args else "json"
        
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'timestamp': datetime.now().isoformat(),
                'system_status': {},
                'balances': {},
                'positions': {},
                'performance': {},
                'settings': self.system_settings
            }
        
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            if self.copy_system:
                try:
                    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    export_data['system_status'] = {
                        'active': getattr(self.copy_system, 'system_active', False),
                        'copy_enabled': getattr(self.copy_system, 'copy_enabled', False),
                        'uptime': time.time() - getattr(self.copy_system, 'start_time', time.time())
                    }
                
                    # –ë–∞–ª–∞–Ω—Å—ã
                    if hasattr(self.copy_system, 'base_monitor'):
                        try:
                            source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                            main_balance = await self.copy_system.base_monitor.main_client.get_balance()
                            export_data['balances'] = {
                                'source': source_balance,
                                'main': main_balance,
                                'total': source_balance + main_balance
                            }
                        except Exception as e:
                            export_data['balances'] = {'error': f'Unable to fetch balances: {e}'}
                
                    # –ü–æ–∑–∏—Ü–∏–∏
                    try:
                        if hasattr(self.copy_system, 'base_monitor'):
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                            source_positions = await self.copy_system.base_monitor.source_client.get_positions()
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            main_positions = await self.copy_system.base_monitor.main_client.get_positions()
                        
                            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                            active_source = [p for p in source_positions if self._safe_float(p.get('size', 0)) > 0]
                            active_main = [p for p in main_positions if self._safe_float(p.get('size', 0)) > 0]
                        
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                            export_data['positions'] = {
                                'source': active_source,
                                'main': active_main
                            }
                    except Exception as e:
                        export_data['positions'] = {'error': f'Unable to fetch positions: {e}'}
                
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if hasattr(self.copy_system, 'system_stats'):
                        stats = self.copy_system.system_stats
                        export_data['performance'] = {
                            'total_signals': stats.get('total_signals_processed', 0),
                            'successful_copies': stats.get('successful_copies', 0),
                            'failed_copies': stats.get('failed_copies', 0),
                            'success_rate': stats.get('success_rate', 0.0)
                        }
                    
                except Exception as e:
                    export_data['error'] = f"Data collection error: {e}"
        
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if export_type == "json":
                report_filename = f"trading_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
                try:
                    with open(report_filename, 'w', encoding='utf-8') as f:
                        json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                    file_size = os.path.getsize(report_filename)
                
                    message = (
                        "üì§ *–≠–ö–°–ü–û–†–¢ JSON –û–¢–ß–ï–¢–ê*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìÑ **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:** `{report_filename}`\n"
                        f"üìä **–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç\n"
                        f"‚è∞ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                        "‚úÖ JSON –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                    )
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                
                except Exception as e:
                    logger.error(f"Failed to create JSON report: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON –æ—Ç—á–µ—Ç–∞: {e}")
        
            elif export_type == "csv":
                report_filename = f"trading_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
                try:
                    with open(report_filename, 'w', encoding='utf-8') as f:
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV
                        f.write("–î–∞—Ç–∞,–¢–∏–ø,–ú–µ—Ç—Ä–∏–∫–∞,–ó–Ω–∞—á–µ–Ω–∏–µ\n")
                    
                        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    
                        # –°—Ç–∞—Ç—É—Å
                        for key, value in export_data['system_status'].items():
                            f.write(f"{timestamp},System,{key},{value}\n")
                    
                        # –ë–∞–ª–∞–Ω—Å—ã
                        for key, value in export_data['balances'].items():
                            f.write(f"{timestamp},Balance,{key},{value}\n")
                    
                        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        for key, value in export_data['performance'].items():
                            f.write(f"{timestamp},Performance,{key},{value}\n")
                    
                        # –ü–æ–∑–∏—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è CSV)
                        f.write(f"{timestamp},Positions,source_count,{len(export_data['positions'].get('source', []))}\n")
                        f.write(f"{timestamp},Positions,main_count,{len(export_data['positions'].get('main', []))}\n")
                    
                        # –û–±—â–∏–π P&L
                        source_pnl = sum([self._safe_float(p.get('unrealisedPnl', 0)) for p in export_data['positions'].get('source', [])])
                        main_pnl = sum([self._safe_float(p.get('unrealisedPnl', 0)) for p in export_data['positions'].get('main', [])])
                        f.write(f"{timestamp},Positions,source_pnl,{source_pnl}\n")
                        f.write(f"{timestamp},Positions,main_pnl,{main_pnl}\n")
                
                    file_size = os.path.getsize(report_filename)
                
                    message = (
                        "üì§ *–≠–ö–°–ü–û–†–¢ CSV –û–¢–ß–ï–¢–ê*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìÑ **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:** `{report_filename}`\n"
                        f"üìä **–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç\n"
                        f"‚è∞ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                        "‚úÖ CSV –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                    )
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                
                except Exception as e:
                    logger.error(f"Failed to create CSV report: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV –æ—Ç—á–µ—Ç–∞: {e}")
        
            elif export_type == "summary":
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram
                try:
                    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    system_active = export_data['system_status'].get('active', False)
                    copy_enabled = export_data['system_status'].get('copy_enabled', False)
                    uptime_seconds = export_data['system_status'].get('uptime', 0)
                    uptime_hours = int(uptime_seconds / 3600)
                    uptime_minutes = int((uptime_seconds % 3600) / 60)
                
                    # –ë–∞–ª–∞–Ω—Å—ã
                    source_balance = export_data['balances'].get('source', 0)
                    main_balance = export_data['balances'].get('main', 0)
                    total_balance = export_data['balances'].get('total', 0)
                
                    # –ü–æ–∑–∏—Ü–∏–∏
                    source_positions_count = len(export_data['positions'].get('source', []))
                    main_positions_count = len(export_data['positions'].get('main', []))
                
                    # P&L
                    source_pnl = sum([self._safe_float(p.get('unrealisedPnl', 0)) for p in export_data['positions'].get('source', [])])
                    main_pnl = sum([self._safe_float(p.get('unrealisedPnl', 0)) for p in export_data['positions'].get('main', [])])
                
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    signals = export_data['performance'].get('total_signals', 0)
                    successful = export_data['performance'].get('successful_copies', 0)
                    success_rate = export_data['performance'].get('success_rate', 0)
                
                    message = (
                        "üìã *–ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"‚è∞ **–í–†–ï–ú–Ø –†–ê–ë–û–¢–´:** {uptime_hours}—á {uptime_minutes}–º\n"
                        f"üìÖ **–î–ê–¢–ê:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                    
                        f"üîÑ **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:**\n"
                        f"   –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                        f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                    
                        f"üí∞ **–ë–ê–õ–ê–ù–°–´:**\n"
                        f"   –ò—Å—Ç–æ—á–Ω–∏–∫: ${source_balance:.2f}\n"
                        f"   –û—Å–Ω–æ–≤–Ω–æ–π: ${main_balance:.2f}\n"
                        f"   –í—Å–µ–≥–æ: ${total_balance:.2f}\n\n"
                    
                        f"üìà **–ü–û–ó–ò–¶–ò–ò:**\n"
                        f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source_positions_count} (P&L: ${source_pnl:+.2f})\n"
                        f"   –û—Å–Ω–æ–≤–Ω–æ–π: {main_positions_count} (P&L: ${main_pnl:+.2f})\n\n"
                    
                        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                        f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals}\n"
                        f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {successful}\n"
                        f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}\n"
                    )
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                
                except Exception as e:
                    logger.error(f"Failed to create summary report: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        
            elif export_type == "settings":
                settings_filename = f"settings_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
                try:
                    with open(settings_filename, 'w', encoding='utf-8') as f:
                        json.dump(self.system_settings, f, indent=2, ensure_ascii=False)
                
                    file_size = os.path.getsize(settings_filename)
                
                    message = (
                        "üì§ *–≠–ö–°–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìÑ **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:** `{settings_filename}`\n"
                        f"üìä **–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç\n"
                        f"‚è∞ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
                    )
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                
                except Exception as e:
                    logger.error(f"Failed to export settings: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: json, csv, summary, settings"
                )
            
        except Exception as e:
            logger.error(f"Export command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /backup - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
        sys_logger.log_telegram_command("/backup", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
    
        try:
            args = context.args
            command = args[0].lower() if args else "create"
        
            if command == "create":
                await self.backup_settings_text(update)
            
            elif command == "list":
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ backup —Ñ–∞–π–ª—ã
                backup_files = []
                for file in os.listdir('.'):
                    if file.startswith('settings_backup_') and file.endswith('.json'):
                        backup_files.append(file)
            
                if not backup_files:
                    await update.message.reply_text("‚ùå Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
            
                backup_files.sort(reverse=True)  # –ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞
            
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
                backup_list = ""
                for i, backup_file in enumerate(backup_files):
                    try:
                        file_time = os.path.getmtime(backup_file)
                        file_size = os.path.getsize(backup_file)
                        backup_list += f"{i+1}. `{backup_file}`\n   üìÖ {datetime.fromtimestamp(file_time).strftime('%d.%m.%Y %H:%M')} ({file_size} –±–∞–π—Ç)\n\n"
                    except Exception as e:
                        backup_list += f"{i+1}. `{backup_file}` (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e})\n\n"
            
                message = (
                    "üìã *–°–ü–ò–°–û–ö BACKUP –§–ê–ô–õ–û–í*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìÅ **–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(backup_files)}\n\n"
                    f"{backup_list}"
                    "üîß **–ö–û–ú–ê–ù–î–´:**\n"
                    "`/backup restore <–∏–º—è_—Ñ–∞–π–ª–∞>` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª\n"
                    "`/backup clean old` - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ backup'—ã"
                )
            
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
            elif command == "clean" and len(args) > 1 and args[1].lower() == "old":
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
                backup_files = []
                for file in os.listdir('.'):
                    if file.startswith('settings_backup_') and file.endswith('.json'):
                        backup_files.append(file)
            
                if len(backup_files) <= 5:
                    await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö backup —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º 5)")
                    return
            
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
                backup_files.sort(key=os.path.getmtime)
            
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ 5 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö
                files_to_delete = backup_files[:-5]
                deleted_count = 0
            
                for file in files_to_delete:
                    try:
                        os.remove(file)
                        deleted_count += 1
                    except Exception as e:
                        logger.warning(f"Failed to delete old backup {file}: {e}")
            
                await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö backup —Ñ–∞–π–ª–æ–≤: {deleted_count}")
            
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: create, list, clean old"
                )
            
        except Exception as e:
            logger.error(f"Backup command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã backup: {e}")

    async def restore_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ö–æ–º–∞–Ω–¥–∞ /restore - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        sys_logger.log_telegram_command("/restore", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
    
        try:
            args = context.args
            if not args:
                await self.restore_settings_text(update)
                return
        
            restore_target = args[0].lower()
        
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ backup
            backup_files = []
            for file in os.listdir('.'):
                if file.startswith('settings_backup_') and file.endswith('.json'):
                    backup_files.append(file)
        
            backup_files.sort(reverse=True)  # –ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞
        
            if not backup_files:
                await update.message.reply_text("‚ùå Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            restore_file = None
        
            if restore_target == "latest":
                restore_file = backup_files[0]
            elif restore_target == "preview" and len(args) > 1 and args[1].lower() == "latest":
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                restore_file = backup_files[0]
            
                try:
                    with open(restore_file, 'r', encoding='utf-8') as f:
                        backup_data = json.load(f)
                
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞
                    preview = json.dumps(backup_data, indent=2, ensure_ascii=False)
                    if len(preview) > 3000:
                        preview = preview[:3000] + "...\n[–û–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram]"
                
                    message = (
                        f"üîç *–ü–†–ï–î–ü–†–û–°–ú–û–¢–† BACKUP*\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìÑ **–§–∞–π–ª:** `{restore_file}`\n"
                        f"‚è∞ **–°–æ–∑–¥–∞–Ω:** {backup_data.get('backup_timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19]}\n\n"
                        f"üìã **–°–û–î–ï–†–ñ–ò–ú–û–ï:**\n"
                        f"```\n{preview}\n```"
                    )
                
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                    return
                
                except Exception as e:
                    logger.error(f"Failed to preview backup: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ backup: {e}")
                    return
            
            elif restore_target.endswith('.json'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if restore_target in backup_files or os.path.exists(restore_target):
                    restore_file = restore_target
                else:
                    await update.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {restore_target}")
                    return
        
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif restore_target in ("kelly", "drawdown", "trailing", "notifications") and len(args) > 1 and args[1].lower() == "only":
                restore_file = backup_files[0]
                section_map = {
                    "kelly": "kelly_settings",
                    "drawdown": "drawdown_settings",
                    "trailing": "telegram_bot_settings.system_settings.trailing",
                    "notifications": "telegram_bot_settings.notification_settings"
                }
            
                section = section_map.get(restore_target)
                if not section:
                    await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è: {restore_target}")
                    return
            
                try:
                    with open(restore_file, 'r', encoding='utf-8') as f:
                        backup_data = json.load(f)
                
                    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    if "." in section:
                        # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
                        parts = section.split(".")
                        section_data = backup_data
                        for part in parts:
                            if part in section_data:
                                section_data = section_data[part]
                            else:
                                await update.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è {section} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ backup")
                                return
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
                        if section not in backup_data:
                            await update.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è {section} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ backup")
                            return
                        section_data = backup_data[section]
                
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
                    if restore_target == "kelly":
                        self.system_settings['kelly'] = section_data
                        if self.copy_system and hasattr(self.copy_system, 'kelly_calculator'):
                            for key, value in section_data.items():
                                setattr(self.copy_system.kelly_calculator, key, value)
                
                    elif restore_target == "drawdown":
                        self.system_settings['drawdown'] = section_data
                        if self.copy_system and hasattr(self.copy_system, 'drawdown_controller'):
                            for key, value in section_data.items():
                                setattr(self.copy_system.drawdown_controller, key, value)
                
                    elif restore_target == "trailing":
                        self.system_settings['trailing'] = section_data
                        if self.copy_system and hasattr(self.copy_system, 'copy_manager') and hasattr(self.copy_system.copy_manager, 'trailing_manager'):
                            tm = self.copy_system.copy_manager.trailing_manager
                            tm.default_distance_percent = section_data.get('initial_distance', 0.02)
                            tm.min_trail_step = section_data.get('min_step', 0.005)
                            tm.max_distance_percent = section_data.get('max_distance', 0.05)
                            tm.aggressive_mode = section_data.get('aggressive_mode', False)
                
                    elif restore_target == "notifications":
                        self.notification_settings = section_data
                
                    await update.message.reply_text(
                        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {restore_target} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {restore_file}"
                    )
                    return
                
                except Exception as e:
                    logger.error(f"Failed to restore section {restore_target}: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ {restore_target}: {e}")
                    return
        
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: latest, preview latest, <–∏–º—è_—Ñ–∞–π–ª–∞.json>, kelly only, drawdown only, trailing only, notifications only"
                )
                return
        
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
            if restore_file:
                try:
                    with open(restore_file, 'r', encoding='utf-8') as f:
                        backup_data = json.load(f)
                
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                    if 'version' not in backup_data or 'telegram_bot_settings' not in backup_data:
                        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç backup —Ñ–∞–π–ª–∞")
                        return
                
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
                    if 'notification_settings' in backup_data['telegram_bot_settings']:
                        self.notification_settings = backup_data['telegram_bot_settings']['notification_settings']
                
                    if 'system_settings' in backup_data['telegram_bot_settings']:
                        self.system_settings = backup_data['telegram_bot_settings']['system_settings']
                
                    if 'cooldown_time' in backup_data['telegram_bot_settings']:
                        self.cooldown_time = backup_data['telegram_bot_settings']['cooldown_time']
                
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    if self.copy_system:
                        # Kelly Calculator –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        if 'kelly_settings' in backup_data and hasattr(self.copy_system, 'kelly_calculator'):
                            kelly_calc = self.copy_system.kelly_calculator
                            for key, value in backup_data['kelly_settings'].items():
                                setattr(kelly_calc, key, value)
                    
                        # Drawdown Controller –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        if 'drawdown_settings' in backup_data and hasattr(self.copy_system, 'drawdown_controller'):
                            dd_controller = self.copy_system.drawdown_controller
                            for key, value in backup_data['drawdown_settings'].items():
                                setattr(dd_controller, key, value)
                    
                        # Copy Manager –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        if 'copy_settings' in backup_data and hasattr(self.copy_system, 'copy_manager'):
                            copy_manager = self.copy_system.copy_manager
                            for key, value in backup_data['copy_settings'].items():
                                if key != 'copy_mode':  # copy_mode –æ–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∞, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å enum
                                    setattr(copy_manager, key, value)
                
                    await update.message.reply_text(
                        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ {restore_file}\n"
                        "üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ"
                    )
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                    await send_telegram_alert(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ backup: {restore_file}")
                
                except Exception as e:
                    logger.error(f"Failed to restore settings: {e}")
                    logger.error(traceback.format_exc())
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        except Exception as e:
            logger.error(f"Restore command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã restore: {e}")

    async def emergency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /emergency - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        sys_logger.log_telegram_command("/emergency", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
    
        try:
            args = context.args
            command = args[0].lower() if args else "stop"
        
            if not self.copy_system:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return
        
            if command == "stop":
                # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                self.copy_system.copy_enabled = False
                if hasattr(self.copy_system, 'copy_manager'):
                    await self.copy_system.copy_manager.stop_copying()
            
                await update.message.reply_text(
                    "üö® **–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê**\n"
                    "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                    parse_mode=ParseMode.MARKDOWN
                )
            
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await send_telegram_alert("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
        
            elif command == "close_all":
                # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
                if hasattr(self.copy_system, 'base_monitor') and hasattr(self.copy_system.base_monitor, 'main_client'):
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    positions = await self.copy_system.base_monitor.main_client.get_positions()
                    active_positions = [p for p in positions if self._safe_float(p.get('size', 0)) > 0]
                
                    if not active_positions:
                        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                        return
                
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                    closed_count = 0
                    for position in active_positions:
                        try:
                            symbol = position.get('symbol')
                            side = position.get('side')
                            close_side = "Sell" if side == "Buy" else "Buy"
                            size = self._safe_float(position.get('size', 0))
                        
                            if size > 0:
                                await self.copy_system.base_monitor.main_client.close_position(
                                    symbol=symbol,
                                    side=close_side,
                                    size=size
                                )
                                closed_count += 1
                        except Exception as e:
                            logger.error(f"Failed to close position {position.get('symbol')}: {e}")
                
                    await update.message.reply_text(
                        f"üö® **–≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ô**\n"
                        f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}/{len(active_positions)}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await send_telegram_alert(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ({closed_count}) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É API")
        
            elif command == "restart":
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
                if hasattr(self.copy_system, 'restart'):
                    await self.copy_system.restart()
                    await update.message.reply_text(
                        "üîÑ **–°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–ê**\n"
                        "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await send_telegram_alert("üîÑ –°–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                else:
                    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ restart –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                    self.copy_system.system_active = False
                    await asyncio.sleep(1)
                    self.copy_system.system_active = True
                    self.copy_system.copy_enabled = True
                
                    await update.message.reply_text(
                        "üîÑ **–°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–ê**\n"
                        "–í—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫",
                        parse_mode=ParseMode.MARKDOWN
                    )
        
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: stop, close_all, restart"
                )
            
        except Exception as e:
            logger.error(f"Emergency command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

    async def ws_diag_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ws_diag - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebSocket."""
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        logger.info("Received /ws_diag command from Telegram.")

        if not self.copy_system or not hasattr(self.copy_system, 'base_monitor') or not hasattr(self.copy_system.base_monitor, 'websocket_manager'):
            await update.message.reply_text("‚ùå WebSocket manager –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            await update.message.reply_text("üîç Generating WebSocket diagnostics...")

            ws_manager = self.copy_system.base_monitor.websocket_manager
            stats = ws_manager.get_stats()

            report = await ws_manager.get_diagnostic_report() # Basic report

            # Add per-topic stats
            topic_counts = stats.get('topic_counts')
            if topic_counts:
                report += "\n\n**Per-Topic Message Counts:**\n"
                for topic, counts in sorted(topic_counts.items()):
                    received = counts.get('received', 0)
                    processed = counts.get('processed', 0)
                    report += f"  - `{topic}`: Rcvd {received}, Proc {processed}\n"

            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"WS Diag command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    async def reconcile_now_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reconcile_now - —Ä—É—á–Ω–∞—è —Å–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π."""
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        logger.info("Received /reconcile_now command from Telegram.")

        if not self.copy_system or not hasattr(self.copy_system, 'base_monitor'):
            await update.message.reply_text("‚ùå Trading monitor –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é —Å–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            asyncio.create_task(self.copy_system.base_monitor.reconcile_positions_on_startup())
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Å–∞–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ reconcile
        except Exception as e:
            logger.error(f"Reconcile Now command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–≤–µ—Ä–∫–∏: {e}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced /status command for a comprehensive system overview."""
        sys_logger.log_telegram_command("/status", update.effective_user.id)
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not self.copy_system or not hasattr(self.copy_system, 'base_monitor'):
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return

        try:
            msg = await update.message.reply_text("üîÑ –°–æ–±–∏—Ä–∞—é –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–µ...")

            # 1. System Status & Uptime
            start_time = self.copy_system.system_stats.get('start_time', time.time())
            uptime_seconds = time.time() - start_time
            uptime_str = str(timedelta(seconds=int(uptime_seconds)))

            # 2. Balances
            source_summary = await self.get_account_summary(self.copy_system.base_monitor.source_client)
            main_summary = await self.get_account_summary(self.copy_system.base_monitor.main_client)

            # 3. WS Diagnostics
            ws_manager = self.copy_system.base_monitor.websocket_manager
            ws_status = ws_manager.get_stats().get('status', 'UNKNOWN')
            ws_diag_info = (
                f"  Status: {ws_status}\n"
                f"  Authenticated: {'‚úÖ' if ws_status == 'authenticated' else '‚ùå'}\n"
                f"  Messages (R/P): {ws_manager.stats.get('messages_received', 0)}/{ws_manager.stats.get('messages_processed', 0)}"
            )

            # 4. Copy State ("Single Source of Truth")
            copy_state = self.copy_system.copy_state
            state_details = (
                f"  Copy Ready: {'‚úÖ' if copy_state.ready else '‚ùå'}\n"
                f"     - Main REST OK: {'‚úÖ' if copy_state.main_rest_ok else '‚ùå'}\n"
                f"     - Source WS OK: {'‚úÖ' if copy_state.source_ws_ok else '‚ùå'}\n"
                f"     - Keys Loaded: {'‚úÖ' if copy_state.keys_loaded else '‚ùå'}"
            )
            if copy_state.last_error:
                state_details += f"\n     - Last Error: `{copy_state.last_error}`"


            report = (
                f"üìä *–ü–û–õ–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*\n"
                f"_{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}_\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"*–°–æ—Å—Ç–æ—è–Ω–∏–µ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
                f"{state_details}\n"
                f"  Uptime: {uptime_str}\n\n"
                f"*–§–∏–Ω–∞–Ω—Å—ã (–î–æ–Ω–æ—Ä / –û—Å–Ω–æ–≤–Ω–æ–π):*\n"
                f"  –ë–∞–ª–∞–Ω—Å: `${source_summary['balance']:.2f}` / `${main_summary['balance']:.2f}`\n"
                f"  P&L: `${source_summary['total_unrealized_pnl']:+.2f}` / `${main_summary['total_unrealized_pnl']:+.2f}`\n\n"

                f"*–ü–æ–∑–∏—Ü–∏–∏ (–î–æ–Ω–æ—Ä / –û—Å–Ω–æ–≤–Ω–æ–π):*\n"
                f"  –ö–æ–ª-–≤–æ: {source_summary['positions_count']} / {main_summary['positions_count']}\n\n"

                f"*–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
                f"{ws_diag_info}\n"
            )

            await msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"Enhanced Status command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def copy_on_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command to enable copy trading."""
        sys_logger.log_telegram_command("/copy_on", update.effective_user.id)
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        if not self.copy_system:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        self.copy_system.copy_enabled = True
        if hasattr(self.copy_system, 'copy_manager'):
            await self.copy_system.copy_manager.start_copying()

        await update.message.reply_text("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")
        await send_telegram_alert("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –í–ö–õ–Æ–ß–ï–ù–û —á–µ—Ä–µ–∑ /copy_on")

    async def copy_off_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command to disable copy trading."""
        sys_logger.log_telegram_command("/copy_off", update.effective_user.id)
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        if not self.copy_system:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        self.copy_system.copy_enabled = False
        if hasattr(self.copy_system, 'copy_manager'):
            await self.copy_system.copy_manager.stop_copying()

        await update.message.reply_text("‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")
        await send_telegram_alert("üõë –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –í–´–ö–õ–Æ–ß–ï–ù–û —á–µ—Ä–µ–∑ /copy_off")

    async def scale_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command to set the position scaling factor."""
        sys_logger.log_telegram_command("/scale", update.effective_user.id)
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        if not self.copy_system or not hasattr(self.copy_system, 'copy_manager'):
            await update.message.reply_text("‚ùå Copy Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return

        args = context.args
        if not args:
            current_scale = getattr(self.copy_system.copy_manager, 'position_scaling', 1.0)
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: `{current_scale}`\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/scale <–º–Ω–æ–∂–∏—Ç–µ–ª—å>` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/scale 1.5`)",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        try:
            scale_factor = float(args[0])
            if not (0.1 <= scale_factor <= 10.0):
                await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0.1 –¥–æ 10.0")
                return

            self.copy_system.copy_manager.position_scaling = scale_factor
            await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{scale_factor}`")
            await send_telegram_alert(f"‚ö†Ô∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{scale_factor}` —á–µ—Ä–µ–∑ /scale")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5).")
        except Exception as e:
            logger.error(f"Scale command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è: {e}")

    async def panic_close_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command for emergency closing of all positions on the main account."""
        sys_logger.log_telegram_command("/panic_close", update.effective_user.id)
        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not self.copy_system or not hasattr(self.copy_system, 'base_monitor') or not hasattr(self.copy_system.base_monitor, 'main_client'):
            await update.message.reply_text("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            keyboard = [[InlineKeyboardButton("üö® –î–ê, –ó–ê–ö–†–´–¢–¨ –í–°–ï –ü–û–ó–ò–¶–ò–ò", callback_data="panic_close_confirm")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—å *–í–°–ï* –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ —Ä—ã–Ω–∫—É?\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Panic Close command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–Ω–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

    async def panic_close_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback handler for /panic_close confirmation."""
        query = update.callback_query
        await query.answer()

        if query.data != "panic_close_confirm":
            return

        user_id = query.from_user.id
        if not self.check_authorization(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await query.edit_message_text("üö® –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")

        if not self.copy_system or not hasattr(self.copy_system, 'base_monitor') or not hasattr(self.copy_system.base_monitor, 'main_client'):
            await query.edit_message_text("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            main_client = self.copy_system.base_monitor.main_client
            closed_count, errors_count = await main_client.close_all_positions_by_market()

            report = (
                f"üö® **–≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ó–ê–í–ï–†–®–ï–ù–û**\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: {closed_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {errors_count}"
            )
            await query.edit_message_text(report, parse_mode=ParseMode.MARKDOWN)
            await send_telegram_alert(report)

        except Exception as e:
            logger.error(f"Panic Close callback error: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

        # ================================
        # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
        # ================================

    def _safe_float(self, value, default=0.0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            return float(value) if value is not None else default
        except (TypeError, ValueError):
            return default

    def _format_position_info_detailed(self, pos: dict) -> str:
        """
        –†–ê–°–®–ò–†–ï–ù–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            symbol = pos.get('symbol', 'Unknown')
            side = pos.get('side', 'Unknown')
            size = self._safe_float(pos.get('size', 0))
            entry_price = self._safe_float(pos.get('avgPrice', 0))
            mark_price = self._safe_float(pos.get('markPrice', 0))
            unrealized_pnl = self._safe_float(pos.get('unrealisedPnl', 0))
            position_value = self._safe_float(pos.get('positionValue', 0))
    
            # –ù–û–í–´–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
            leverage = self._safe_float(pos.get('leverage', 1))
            position_idx = pos.get('positionIdx', 0)
            margin_mode = pos.get('tradeMode', 'Unknown')  # Cross/Isolated
            auto_add_margin = pos.get('autoAddMargin', 0)
            position_status = pos.get('positionStatus', 'Normal')
    
            # –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            position_margin = self._safe_float(pos.get('positionIM', 0))  # Initial Margin
            position_mm = self._safe_float(pos.get('positionMM', 0))      # Maintenance Margin
    
            # –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
            liq_price = self._safe_float(pos.get('liqPrice', 0))
            stop_loss = self._safe_float(pos.get('stopLoss', 0))
            take_profit = self._safe_float(pos.get('takeProfit', 0))
            trailing_stop = self._safe_float(pos.get('trailingStop', 0))
    
            # –í—Ä–µ–º–µ–Ω–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            created_time = pos.get('createdTime', '')
            updated_time = pos.get('updatedTime', '')
    
            # –†–∞—Å—á–µ—Ç—ã
            roe = (unrealized_pnl / position_margin * 100) if position_margin > 0 else 0
            margin_ratio = (position_mm / position_value * 100) if position_value > 0 else 0
    
            side_emoji = "üìà" if side == "Buy" else "üìâ"
            pnl_emoji = "üü¢" if unrealized_pnl >= 0 else "üî¥"
    
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            created_str = ""
            if created_time:
                try:
                    created_dt = datetime.fromtimestamp(int(created_time) / 1000)
                    created_str = created_dt.strftime('%H:%M:%S')
                except Exception:
                    created_str = "N/A"
    
            info = (
                f"{side_emoji} {symbol} - {side}\n"
                f"   üí∞ –†–∞–∑–º–µ—Ä: {size:.6f} (${position_value:.2f})\n"
                f"   üéØ –í—Ö–æ–¥: {entry_price:.6f} | –¢–µ–∫—É—â–∞—è: {mark_price:.6f}\n"
                f"   {pnl_emoji} P&L: {unrealized_pnl:+.2f} USDT ({roe:+.2f}%)\n"
                f"   ‚ö° –ü–ª–µ—á–æ: {leverage}x | –†–µ–∂–∏–º: {margin_mode}\n"
                f"   üíé –ú–∞—Ä–∂–∞: {position_margin:.2f} USDT | MM: {position_mm:.2f} USDT\n"
            )
    
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if stop_loss > 0 or take_profit > 0:
                info += f"   üõ°Ô∏è SL: {stop_loss:.6f} | TP: {take_profit:.6f}\n"
    
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
            if liq_price > 0:
                info += f"   ‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: {liq_price:.6f}\n"
    
            # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            if created_str:
                info += f"   ‚è∞ –û—Ç–∫—Ä—ã—Ç–∞: {created_str}\n"
    
            return info.rstrip()
    
        except Exception as e:
            logger.error(f"Position formatting error: {e}")
            logger.error(traceback.format_exc())
            return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

    async def get_account_summary(self, client) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É
        """
        try:
            balance = await client.get_balance() if hasattr(client, 'get_balance') else 0.0
            positions = await client.get_positions() if hasattr(client, 'get_positions') else []
        
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π P&L
            total_unrealized_pnl = 0.0
            total_position_value = 0.0
        
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (size > 0)
            active_positions = []
            for pos in positions:
                size = self._safe_float(pos.get('size', 0))
                if size > 0:
                    active_positions.append(pos)
                    unrealized_pnl = self._safe_float(pos.get('unrealisedPnl', 0))
                    position_value = self._safe_float(pos.get('positionValue', 0))
                    total_unrealized_pnl += unrealized_pnl
                    total_position_value += position_value
        
            return {
                'balance': balance,
                'positions_count': len(active_positions),
                'total_unrealized_pnl': total_unrealized_pnl,
                'total_position_value': total_position_value,
                'positions': active_positions
            }
        except Exception as e:
            logger.error(f"Error getting account summary: {e}")
            logger.error(traceback.format_exc())
            return {
                'balance': 0.0,
                'positions_count': 0,
                'total_unrealized_pnl': 0.0,
                'total_position_value': 0.0,
                'positions': []
            }
        
    async def force_copy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /force_copy —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –≤—ã–∑–æ–≤–æ–º Kelly Calculator
        """
        sys_logger.log_telegram_command("/force_copy", update.effective_user.id)

        user_id = update.effective_user.id

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
            demo_mode = getattr(self.copy_system, 'demo_mode', True)

            await update.message.reply_text(
                f"üîÑ –°–∫–∞–Ω–∏—Ä—É—é –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ..."
                f"\n{'üü° DEMO MODE' if demo_mode else 'üî¥ LIVE MODE'}",
                parse_mode=ParseMode.MARKDOWN
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_positions = await self.copy_system.base_monitor.source_client.get_positions()

            if not source_positions or source_positions[0].get('size', 0) == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
                return

            # –ë–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            main_balance = await self.copy_system.base_monitor.main_client.get_balance()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
            full_report = "üìä **–ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø**\n"
            full_report += "=" * 40 + "\n\n"

            positions_to_copy = []
            total_positions = 0

            for position_data in source_positions:
                size = safe_float(position_data.get('size', 0))
                if size <= 0:
                    continue

                total_positions += 1
                symbol = position_data['symbol']
                side = position_data['side']
                avg_price = safe_float(position_data.get('avgPrice', 0))
                price = safe_float(position_data.get('markPrice', avg_price))
                unrealized_pnl = safe_float(position_data.get('unrealisedPnl', 0))

                # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í KELLY CALCULATOR =====
                kelly_calculation = self.copy_system.kelly_calculator.calculate_kelly_fraction(
                    symbol=symbol,
                    current_balance=main_balance
                )

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if kelly_calculation:
                    kelly_result = {
                        'recommended_size': kelly_calculation.recommended_size / price if price > 0 else size,
                        'confidence': kelly_calculation.confidence_score,
                        'win_rate': kelly_calculation.win_rate,
                        'profit_factor': kelly_calculation.profit_factor,
                        'kelly_fraction': kelly_calculation.kelly_fraction
                    }
                else:
                    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ Kelly —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
                    kelly_result = {
                        'recommended_size': size,  # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        'confidence': 0.5,
                        'win_rate': 0.5,
                        'profit_factor': 1.0,
                        'kelly_fraction': 0.02  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    }

                # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                market_conditions = await self.copy_system.copy_manager.order_manager.get_market_analysis(symbol)

                # Trailing Stop
                trailing_stop = self.copy_system.copy_manager.trailing_manager.create_trailing_stop(
                    symbol=symbol,
                    side=side,
                    current_price=price,
                    position_size=kelly_result['recommended_size'] * price,
                    market_conditions=market_conditions
                )

                # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –æ—Ç—á–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                full_report += f"**{total_positions}. {symbol} - {side}**\n"
                full_report += f"üìà **–ò—Å—Ç–æ—á–Ω–∏–∫:**\n"
                full_report += f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {size:.6f} ({size * price:.2f} USDT)\n"
                full_report += f"  ‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${avg_price:.2f}\n"
                full_report += f"  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:.2f}\n"
                full_report += f"  ‚Ä¢ P&L: ${unrealized_pnl:.2f} ({unrealized_pnl/avg_price/size*100:.1f}%)\n"
                full_report += f"\nüí° **Kelly Criterion:**\n"
                full_report += f"  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {kelly_result['recommended_size']:.6f}\n"
                full_report += f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {kelly_result['confidence']:.1%}\n"
                full_report += f"  ‚Ä¢ Win Rate: {kelly_result.get('win_rate', 0.5):.1%}\n"
                full_report += f"  ‚Ä¢ Profit Factor: {kelly_result.get('profit_factor', 1.0):.2f}\n"
                full_report += f"\nüõ°Ô∏è **Risk Management:**\n"
                full_report += f"  ‚Ä¢ Trailing Stop: ${trailing_stop.stop_price:.2f}\n"
                full_report += f"  ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {trailing_stop.distance_percent:.2%}\n"
                full_report += f"  ‚Ä¢ –°—Ç–∏–ª—å: {trailing_stop.trail_style.value}\n"
                full_report += f"  ‚Ä¢ ATR: ${trailing_stop.atr_value:.2f}\n"
                full_report += f"\nüìä **–†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:**\n"
                full_report += f"  ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_conditions.volatility:.2%}\n"
                full_report += f"  ‚Ä¢ –°–ø—Ä–µ–¥: {market_conditions.spread_percent:.3%}\n"
                full_report += f"  ‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {market_conditions.liquidity_score:.1f}/10\n"
                full_report += f"  ‚Ä¢ –¢—Ä–µ–Ω–¥: {'‚Üë' if market_conditions.trend_strength > 0 else '‚Üì'} "
                full_report += f"{abs(market_conditions.trend_strength):.1%}\n"
                full_report += "\n" + "-" * 30 + "\n\n"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                positions_to_copy.append({
                    'symbol': symbol,
                    'side': side,
                    'original_size': size,
                    'kelly_size': kelly_result['recommended_size'],
                    'price': price,
                    'trailing_stop': trailing_stop,
                    'market_conditions': market_conditions,
                    'kelly_data': kelly_result
                })

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
            risk_check = await self.copy_system.drawdown_controller.check_risk_limits()

            full_report += "‚ö†Ô∏è **RISK CHECK:**\n"
            full_report += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ OK' if risk_check['can_open_position'] else '‚ùå BLOCKED'}\n"
            full_report += f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {risk_check['reason']}\n"
            full_report += f"‚Ä¢ –¢–µ–∫—É—â–∏–π Drawdown: {risk_check.get('current_drawdown', 0):.1%}\n"
            full_report += f"‚Ä¢ Max Drawdown: {risk_check.get('max_allowed', 20):.1%}\n\n"

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_value = sum(p['kelly_size'] * p['price'] for p in positions_to_copy)
            full_report += "üí∞ **–ò–¢–û–ì–û:**\n"
            full_report += f"‚Ä¢ –ü–æ–∑–∏—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_positions}\n"
            full_report += f"‚Ä¢ –ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é: {len(positions_to_copy)}\n"
            full_report += f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}\n"
            full_report += f"‚Ä¢ % –æ—Ç –±–∞–ª–∞–Ω—Å–∞: {(total_value/main_balance*100):.1f}%\n"
            full_report += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${main_balance:.2f}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await update.message.reply_text(full_report, parse_mode=ParseMode.MARKDOWN)

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –í–°–ï", callback_data=f"force_copy_all_{user_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"force_copy_cancel_{user_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if not hasattr(self, 'pending_positions'):
                self.pending_positions = {}
            self.pending_positions[user_id] = positions_to_copy

            confirmation_text = (
                f"**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {len(positions_to_copy)} –ø–æ–∑–∏—Ü–∏–π**\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}\n"
                f"Kelly Criterion –∏ Trailing Stops –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )

            await update.message.reply_text(
                confirmation_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"Force copy error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


    # ==========================================
    # 3. –û–ë–ù–û–í–õ–ï–ù–ù–´–ô force_copy_callback
    # ==========================================

    async def force_copy_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        query = update.callback_query
        await query.answer()

        data_parts = query.data.split('_')
        if len(data_parts) < 4:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        action = '_'.join(data_parts[:3])
        user_id = int(data_parts[-1])

        if query.from_user.id != user_id:
            await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", show_alert=True)
            return

        if action == "force_copy_cancel":
            await query.edit_message_text("‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            self.pending_positions.pop(user_id, None)
            return

        if action == "force_copy_all":
            positions = self.pending_positions.get(user_id)

            if not positions:
                await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")

            results = []
            successful_copies = 0
            failed_copies = 0

            for pos in positions:
                try:
                    from enhanced_trading_system_final_fixed import TradingSignal, SignalType

                    signal = TradingSignal(
                        signal_type=SignalType.POSITION_OPEN,
                        symbol=pos['symbol'],
                        side=pos['side'],
                        size=pos['kelly_size'],
                        price=pos['price'],
                        timestamp=time.time(),
                        metadata={
                            'force_copy': True,
                            'trailing_stop_price': pos['trailing_stop'].stop_price,
                            'trailing_stop_distance': pos['trailing_stop'].distance_percent,
                            'kelly_confidence': pos['kelly_data']['confidence'],
                            'market_volatility': pos['market_conditions'].volatility
                        },
                        priority=2
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
                    result = None
                    if hasattr(self.copy_system, 'process_copy_signal'):
                        result = await self.copy_system.process_copy_signal(signal)
                    elif hasattr(self.copy_system, '_handle_position_open_for_copy'):
                        result = await self.copy_system._handle_position_open_for_copy(signal)
                    else:
                        logger.error(f"No suitable method found to process signal for {pos['symbol']}")
                        raise Exception("Copy system doesn't have required methods")

                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if not isinstance(result, dict):
                        result = {"success": True}

                    # == –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ø–æ–∑–∏—Ü–∏—é, –æ—Ç–∫—Ä—ã–≤–∞–µ–º—É—é force_copy ==
                    if result.get("success", True):
                        await self._save_force_copy_position(signal, result)

                    results.append({
                        'symbol': pos['symbol'],
                        'status': 'success' if result.get("success", True) else 'failed',
                        'size': pos['kelly_size'],
                        'trailing_stop': pos['trailing_stop'].stop_price
                    })
                    if result.get("success", True):
                        successful_copies += 1
                    else:
                        failed_copies += 1

                except Exception as e:
                    logger.error(f"Error copying {pos['symbol']}: {e}")
                    results.append({
                        'symbol': pos['symbol'],
                        'status': 'failed',
                        'error': str(e)
                    })
                    failed_copies += 1

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            final_report = "üìã **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:**\n"
            final_report += "=" * 40 + "\n\n"

            for i, result in enumerate(results, 1):
                if result['status'] == 'success':
                    final_report += f"‚úÖ **{i}. {result['symbol']}**\n"
                    final_report += f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {result['size']:.6f}\n"
                    final_report += f"  ‚Ä¢ Trailing Stop: ${result['trailing_stop']:.2f}\n"
                else:
                    final_report += f"‚ùå **{i}. {result['symbol']}**\n"
                    final_report += f"  ‚Ä¢ –û—à–∏–±–∫–∞: {result.get('error', 'unknown')}\n"
                final_report += "\n"

            final_report += "-" * 30 + "\n"
            final_report += f"**–ò–¢–û–ì–û:**\n"
            final_report += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful_copies}\n"
            final_report += f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_copies}\n"
            final_report += f"‚Ä¢ –†–µ–∂–∏–º: {'DEMO' if getattr(self.copy_system, 'demo_mode', True) else 'LIVE'}\n"

            await query.message.reply_text(final_report, parse_mode=ParseMode.MARKDOWN)

            # –û—á–∏—â–∞–µ–º pending –ø–æ–∑–∏—Ü–∏–∏
            self.pending_positions.pop(user_id, None)

    # ==========================================
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–∏–∑ –ø–∞—Ç—á–∞): —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é force_copy –≤ –ë–î
    # ==========================================
    async def _save_force_copy_position(self, signal, result: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç force_copy –≤ –ë–î"""
        try:
            # –ò–º–ø–æ—Ä—Ç writer
            try:
                from app.positions_db_writer import positions_writer
            except ImportError:
                from positions_db_writer import positions_writer

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º account_id
            try:
                from config import TARGET_ACCOUNT_ID as _TARGET_ACCOUNT_ID
            except Exception:
                _TARGET_ACCOUNT_ID = getattr(self.copy_system, 'target_account_id', 1)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (timestamp –≤ –º—Å, —Ç–∞–∫ –æ–∂–∏–¥–∞–µ—Ç normalizer)
            position_data = {
                "symbol": signal.symbol,
                "side": signal.side,
                "size": signal.size,
                "entryPrice": signal.price,
                "markPrice": signal.price,
                "leverage": 10,              # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                "unrealisedPnl": 0,
                "positionIdx": 0,            # One-way mode
                "marginMode": "cross",
                "timestamp": int(time.time() * 1000),
                "positionId": result.get("exchange_position_id") if isinstance(result, dict) else None
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await positions_writer.upsert_position(position_data, _TARGET_ACCOUNT_ID)

            logger.info(f"Force copy position saved to DB: {signal.symbol}")

        except Exception as e:
            logger.error(f"Failed to save force copy position: {e}")

    # ================================
    # –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ê–ù–ù–´–•
    # ================================
    
    async def show_system_status_text(self, update):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system:
                message = (
                    "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –≠–¢–ê–ü–ê 2*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n"
                    "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
                )
            else:
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    system_active = getattr(self.copy_system, 'system_active', False)
                    copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
                
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ uptime
                    start_time = getattr(self.copy_system, 'start_time', time.time())
                    if hasattr(self.copy_system, 'system_stats'):
                        start_time = self.copy_system.system_stats.get('start_time', start_time)
                    uptime_hours = (time.time() - start_time) / 3600
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    components_status = []
                    
                    # –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
                    if hasattr(self.copy_system, 'base_monitor'):
                        components_status.append("‚úÖ Base Monitor")
                    else:
                        components_status.append("‚ùå Base Monitor")
                    
                    # Kelly Calculator
                    if hasattr(self.copy_system, 'kelly_calculator'):
                        components_status.append("‚úÖ Kelly Calculator")
                    else:
                        components_status.append("‚ùå Kelly Calculator")
                    
                    # Copy Manager
                    if hasattr(self.copy_system, 'copy_manager'):
                        components_status.append("‚úÖ Copy Manager")
                    else:
                        components_status.append("‚ùå Copy Manager")
                    
                    # Drawdown Controller
                    if hasattr(self.copy_system, 'drawdown_controller'):
                        emergency_active = False
                        try:
                            emergency_active = getattr(self.copy_system.drawdown_controller, 'emergency_stop_active', False)
                        except:
                            pass
                        components_status.append(f"‚úÖ Drawdown Controller ({'üî¥ E-Stop' if emergency_active else 'üü¢ OK'})")
                    else:
                        components_status.append("‚ùå Drawdown Controller")
                
                    message = (
                        "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –≠–¢–ê–ü–ê 2*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üîÑ –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                        f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f}—á\n\n"
                        f"‚öôÔ∏è *–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:*\n"
                        f"   {components_status[0]}\n"
                        f"   {components_status[1]}\n"
                        f"   {components_status[2]}\n"
                        f"   {components_status[3]}\n\n"
                        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                    )
                
                except Exception as e:
                    logger.error(f"Status data error: {e}")
                    logger.error(traceback.format_exc())
                    message = (
                        "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –≠–¢–ê–ü–ê 2*\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                        f"–û—à–∏–±–∫–∞: {str(e)[:100]}"
                    )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"System status text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def show_balances_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system or not hasattr(self.copy_system, 'base_monitor'):
                await update.message.reply_text(
                    "üí∞ *–ë–ê–õ–ê–ù–°–´ –ê–ö–ö–ê–£–ù–¢–û–í*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
            try:
                source_balance = 0.0
                main_balance = 0.0
            
                try:
                    source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                except Exception as e:
                    logger.warning(f"Cannot get source balance: {e}")
                
                try:
                    main_balance = await self.copy_system.base_monitor.main_client.get_balance()
                except Exception as e:
                    logger.warning(f"Cannot get main balance: {e}")
                
                balance_ratio = (main_balance / source_balance * 100) if source_balance > 0 else 0
                total_balance = source_balance + main_balance
            
                message = (
                    "üí∞ *–ë–ê–õ–ê–ù–°–´ –ê–ö–ö–ê–£–ù–¢–û–í*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üéØ **–ò—Å—Ç–æ—á–Ω–∏–∫ (–∫–æ–ø–∏—Ä—É–µ–º):** ${source_balance:.2f}\n"
                    f"üè† **–û—Å–Ω–æ–≤–Ω–æ–π (–∫–æ–ø–∏–∏):** ${main_balance:.2f}\n"
                    f"üìä **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:** {balance_ratio:.1f}%\n"
                    f"üíπ **–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:** ${total_balance:.2f}\n\n"
                    f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
            
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
            except Exception as e:
                logger.error(f"Balance display error: {e}")
                logger.error(traceback.format_exc())
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)[:100]}")
            
        except Exception as e:
            logger.error(f"Balances text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

    async def show_positions_text(self, update):
        """
        –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–î–ï–õ–ö–ê —Ñ—É–Ω–∫—Ü–∏–∏ show_positions_text
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–û –¢–£ –ñ–ï –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ—Ä–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
            if not self.copy_system or not hasattr(self.copy_system, 'base_monitor'):
                await update.message.reply_text(
                    "üìà *–ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            source_summary = await self.get_account_summary(self.copy_system.base_monitor.source_client)
            main_summary = await self.get_account_summary(self.copy_system.base_monitor.main_client)
        
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime_seconds = 0
            if hasattr(self.copy_system, 'system_stats') and 'start_time' in self.copy_system.system_stats:
                uptime_seconds = time.time() - self.copy_system.system_stats['start_time']
            elif hasattr(self.copy_system, 'start_time'):
                uptime_seconds = time.time() - self.copy_system.start_time
        
            uptime_hours = int(uptime_seconds / 3600)
            uptime_minutes = int((uptime_seconds % 3600) / 60)
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢
            report = "*üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´*\n"
            report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
            # –ò–°–¢–û–ß–ù–ò–ö (—Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç)
            report += "*üéØ –ê–ö–ö–ê–£–ù–¢-–ò–°–¢–û–ß–ù–ò–ö:*\n"
            report += f"üí∞ –ë–∞–ª–∞–Ω—Å: {source_summary.get('balance', 0):.2f} USDT\n"
            report += f"üìà –ü–æ–∑–∏—Ü–∏–π: {source_summary.get('positions_count', 0)}\n"
            report += f"üíé P&L: {source_summary.get('total_unrealized_pnl', 0):+.2f} USDT\n"
        
            if source_summary.get('positions'):
                report += "\n*üìä –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò –ò–°–¢–û–ß–ù–ò–ö–ê:*\n"
                for pos in source_summary['positions']:
                    pos_info = self._format_position_info_detailed(pos)
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è Markdown
                    pos_info_escaped = pos_info.replace("_", "\\_").replace("*", "\\*")
                    report += pos_info_escaped + "\n\n"
        
            # –û–°–ù–û–í–ù–û–ô –ê–ö–ö–ê–£–ù–¢
            report += "*üè† –û–°–ù–û–í–ù–û–ô –ê–ö–ö–ê–£–ù–¢:*\n"
            report += f"üí∞ –ë–∞–ª–∞–Ω—Å: {main_summary.get('balance', 0):.2f} USDT\n"
            report += f"üìà –ü–æ–∑–∏—Ü–∏–π: {main_summary.get('positions_count', 0)}\n"
            report += f"üíé P&L: {main_summary.get('total_unrealized_pnl', 0):+.2f} USDT\n"
        
            if main_summary.get('positions'):
                report += "\n*üìä –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò –û–°–ù–û–í–ù–û–ì–û:*\n"
                for pos in main_summary['positions']:
                    pos_info = self._format_position_info_detailed(pos)
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è Markdown
                    pos_info_escaped = pos_info.replace("_", "\\_").replace("*", "\\*")
                    report += pos_info_escaped + "\n\n"
        
            # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
            if hasattr(self.copy_system, 'system_stats'):
                stats = self.copy_system.system_stats
                report += "*üîÑ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:*\n"
                report += f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {stats.get('successful_copies', 0)}\n"
                report += f"‚ùå –û—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {stats.get('failed_copies', 0)}\n"
                report += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {stats.get('total_volume', 0):.2f} USDT\n"
            
                if hasattr(self.copy_system, 'copy_ratio'):
                    report += f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {self.copy_system.copy_ratio}x\n"
            
                if hasattr(self.copy_system, 'copy_enabled'):
                    status = '–í–∫–ª—é—á–µ–Ω–æ' if self.copy_system.copy_enabled else '–í—ã–∫–ª—é—á–µ–Ω–æ'
                    report += f"üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {status}\n"
        
            # –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            report += f"\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours}—á {uptime_minutes}–º\n"
            report += f"üïê –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Positions text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")

    # ==========================================
    # 4. –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô
    # ==========================================

    async def show_positions_detailed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.copy_system.base_monitor.main_client.get_positions()
        
            if not positions or all(p.get('size', 0) == 0 for p in positions):
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                return
        
            report = "üìä **–ü–û–ó–ò–¶–ò–ò –û–°–ù–û–í–ù–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê**\n"
            report += "=" * 40 + "\n\n"
        
            total_value = 0
            total_pnl = 0
        
            for i, pos in enumerate(positions, 1):
                size = safe_float(pos.get('size', 0))
                if size <= 0:
                    continue
            
                symbol = pos['symbol']
                side = pos['side']
                avg_price = safe_float(pos.get('avgPrice', 0))
                mark_price = safe_float(pos.get('markPrice', avg_price))
                unrealized_pnl = safe_float(pos.get('unrealisedPnl', 0))
                position_value = size * mark_price
            
                report += f"**{i}. {symbol} - {side}**\n"
                report += f"üìà **–ü–æ–∑–∏—Ü–∏—è:**\n"
                report += f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {size:.6f}\n"
                report += f"  ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${position_value:.2f}\n"
                report += f"  ‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${avg_price:.2f}\n"
                report += f"  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${mark_price:.2f}\n"
                report += f"  ‚Ä¢ P&L: ${unrealized_pnl:.2f} ({unrealized_pnl/position_value*100:.1f}%)\n"
            
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ trailing stop –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(self.copy_system.copy_manager.trailing_manager, 'active_stops'):
                    stop = self.copy_system.copy_manager.trailing_manager.active_stops.get(symbol)
                    if stop:
                        report += f"\nüõ°Ô∏è **Trailing Stop:**\n"
                        report += f"  ‚Ä¢ –¶–µ–Ω–∞ —Å—Ç–æ–ø–∞: ${stop.stop_price:.2f}\n"
                        report += f"  ‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {stop.distance_percent:.2%}\n"
                        report += f"  ‚Ä¢ –°—Ç–∏–ª—å: {stop.trail_style.value}\n"
                        report += f"  ‚Ä¢ –î–æ —Å—Ç–æ–ø–∞: ${abs(mark_price - stop.stop_price):.2f} "
                        report += f"({abs(mark_price - stop.stop_price)/mark_price:.2%})\n"

            
                # Kelly –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if hasattr(self.copy_system.copy_manager, 'position_kelly_data'):
                    kelly_data = self.copy_system.copy_manager.position_kelly_data.get(symbol)
                    if kelly_data:
                        report += f"\nüí° **Kelly Data:**\n"
                        report += f"  ‚Ä¢ Kelly —Ä–∞–∑–º–µ—Ä: {kelly_data.get('recommended_size', 0):.6f}\n"
                        report += f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {kelly_data.get('confidence', 0):.1%}\n"
                        report += f"  ‚Ä¢ Win Rate: {kelly_data.get('win_rate', 0):.1%}\n"
            
                report += "\n" + "-" * 30 + "\n\n"
            
                total_value += position_value
                total_pnl += unrealized_pnl
        
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            balance = await self.copy_system.base_monitor.main_client.get_balance()
        
            report += "üí∞ **–ò–¢–û–ì–û:**\n"
            report += f"‚Ä¢ –ü–æ–∑–∏—Ü–∏–π: {len([p for p in positions if safe_float(p.get('size', 0)) > 0])}\n"
            report += f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}\n"
            report += f"‚Ä¢ –û–±—â–∏–π P&L: ${total_pnl:.2f} ({total_pnl/total_value*100:.1f}%)\n"
            report += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            report += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_value/balance*100:.1f}%\n"
        
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Show positions error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_risk_management_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # 1) –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞?
            if not getattr(self, "copy_system", None):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return

            # 2) –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ—Å–∞–¥–∫–∏
            drawdown_controller_available = hasattr(self.copy_system, "drawdown_controller")
            drawdown_info = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            emergency_active = False

            if drawdown_controller_available:
                try:
                    controller = self.copy_system.drawdown_controller

                    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    daily_limit = getattr(controller, "daily_drawdown_limit", 0.05)
                    total_limit = getattr(controller, "max_drawdown_threshold", 0.15)
                    emergency_threshold = getattr(controller, "emergency_stop_threshold", 0.08)

                    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    current_drawdown = 0
                    peak_balance = 0
                    if hasattr(controller, "get_risk_stats"):
                        risk_stats = controller.get_risk_stats()
                        current_drawdown = risk_stats.get("current_drawdown", 0) * 100  # %
                        peak_balance = risk_stats.get("peak_balance", 0)
                        emergency_active = risk_stats.get("emergency_stop_active", False)

                    drawdown_info = (
                        f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%\n"
                        f"–ü–∏–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${peak_balance:.2f}\n"
                        f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit*100:.1f}%\n"
                        f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {total_limit*100:.1f}%\n"
                        f"Emergency –ø–æ—Ä–æ–≥: {emergency_threshold*100:.1f}%"
                    )
                except Exception as e:
                    logger.error(f"Drawdown controller info error: {e}")
                    drawdown_info = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}..."

            # 3) Kelly calculator
            kelly_available = hasattr(self.copy_system, "kelly_calculator")
            kelly_info = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

            if kelly_available:
                try:
                    kelly_calc = self.copy_system.kelly_calculator
                    confidence = getattr(kelly_calc, "confidence_threshold", 0.65) * 100
                    max_fraction = getattr(kelly_calc, "max_kelly_fraction", 0.25) * 100
                    conservative = getattr(kelly_calc, "conservative_factor", 0.5) * 100

                    kelly_info = (
                        f"Confidence: {confidence:.0f}%\n"
                        f"Max Fraction: {max_fraction:.0f}%\n"
                        f"Conservative: {conservative:.0f}%"
                    )
                except Exception as e:
                    logger.error(f"Kelly calculator info error: {e}")
                    kelly_info = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}..."

            # 4) Trailing manager
            trailing_available = False
            trailing_count = 0
            if (
                hasattr(self.copy_system, "copy_manager")
                and hasattr(self.copy_system.copy_manager, "trailing_manager")
            ):
                trailing_available = True
                try:
                    trailing_count = len(
                        self.copy_system.copy_manager.trailing_manager.get_all_stops()
                    )
                except Exception:
                    pass

            # 5) –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ (–ù–ï –∫–ª–∞–¥—ë–º .replace() –≤–Ω—É—Ç—Ä—å f-—Å—Ç—Ä–æ–∫–∏)
            drawdown_info_safe = drawdown_info.replace("\n", "\n   ")
            kelly_info_safe = kelly_info.replace("\n", "\n   ")

            # 6) –°–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "‚ö†Ô∏è *–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìâ **–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if drawdown_controller_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
                f"üö® **Emergency Stop:** {'üî¥ –ê–ö–¢–ò–í–ï–ù' if emergency_active else 'üü¢ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                "üìâ **–ü–†–û–°–ê–î–ö–ê:**\n"
                f"   {drawdown_info_safe}\n\n"
                "üéØ **KELLY CRITERION:**\n"
                f"   {kelly_info_safe}\n\n"
                "üõ°Ô∏è **TRAILING STOPS:**\n"
                f"   {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' if trailing_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}\n"
                f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö trailing: {trailing_count}\n\n"
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )

            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"Risk management text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏: {e}")


    async def show_copying_controls_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system:
                await update.message.reply_text(
                    "üîÑ *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï–ú*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
            system_active = getattr(self.copy_system, 'system_active', False)
            copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
        
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            stats = getattr(self.copy_system, 'system_stats', {})
            successful_copies = stats.get('successful_copies', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            failed_copies = stats.get('failed_copies', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            total_signals = stats.get('total_signals_processed', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            success_rate = 0.0
            if total_signals > 0:
                success_rate = (successful_copies / total_signals * 100)
        
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions_count = 0
            if hasattr(self.copy_system, 'base_monitor'):
                try:
                    positions = await self.copy_system.base_monitor.main_client.get_positions()
                    positions_count = len([p for p in positions if self._safe_float(p.get('size', 0)) > 0])
                except Exception as e:
                    logger.warning(f"Failed to get positions count: {e}")
        
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_mode = "DEFAULT"
            max_positions = 10
        
            if hasattr(self.copy_system, 'copy_manager'):
                copy_mode = getattr(self.copy_system.copy_manager, 'copy_mode', "DEFAULT")
                max_positions = getattr(self.copy_system.copy_manager, 'max_positions', 10)
    
            message = (
                "üîÑ *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï–ú*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîÑ **–°–∏—Å—Ç–µ–º–∞:** {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                f"üìã **–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:** {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
            
                f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò:**\n"
                f"   –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {copy_mode}\n"
                f"   –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {max_positions}\n\n"
            
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                f"   –ü–æ–∑–∏—Ü–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {successful_copies}\n"
                f"   –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {stats.get('closed_positions', 0) or 0}\n"
                f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {positions_count}\n"
                f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
            
                f"‚öôÔ∏è **–°–ò–°–¢–ï–ú–ê:**\n"
                f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"   –û—á–µ—Ä–µ–¥—å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if copy_enabled else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n\n"
            
                "üîß **–ö–û–ú–ê–ù–î–´:**\n"
                "`/copy start` - –≤–∫–ª—é—á–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "`/copy stop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "`/copy mode DEFAULT` - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º\n"
                "`/emergency` - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
            )
    
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
        except Exception as e:
            logger.error(f"Copying controls text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")

    async def show_full_report_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system:
                await update.message.reply_text(
                    "üìã *–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            start_time = getattr(self.copy_system, 'start_time', time.time())
            if hasattr(self.copy_system, 'system_stats'):
                start_time = self.copy_system.system_stats.get('start_time', start_time)
            
            uptime_hours = (time.time() - start_time) / 3600
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            source_balance = 0.0
            main_balance = 0.0
            
            if hasattr(self.copy_system, 'base_monitor'):
                try:
                    source_balance = await self.copy_system.base_monitor.source_client.get_balance()
                except Exception as e:
                    logger.warning(f"Cannot get source balance: {e}")
                
                try:
                    main_balance = await self.copy_system.base_monitor.main_client.get_balance()
                except Exception as e:
                    logger.warning(f"Cannot get main balance: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            stats = getattr(self.copy_system, 'system_stats', {})
            successful_copies = stats.get('successful_copies', 0)
            failed_copies = stats.get('failed_copies', 0)
            total_signals = stats.get('total_signals_processed', 0)
            
            success_rate = (successful_copies / total_signals * 100) if total_signals > 0 else 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            system_active = getattr(self.copy_system, 'system_active', False)
            copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
            
            websocket_connected = False
            if hasattr(self.copy_system, 'base_monitor') and hasattr(self.copy_system.base_monitor, 'websocket_manager'):
                ws_manager = self.copy_system.base_monitor.websocket_manager
                websocket_connected = hasattr(ws_manager, 'ws') and ws_manager.ws
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
            drawdown_controller_available = hasattr(self.copy_system, 'drawdown_controller')
            emergency_active = False
            current_drawdown = 0.0
            
            if drawdown_controller_available:
                try:
                    controller = self.copy_system.drawdown_controller
                    if hasattr(controller, 'get_risk_stats'):
                        risk_stats = controller.get_risk_stats()
                        current_drawdown = risk_stats.get('current_drawdown', 0) * 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        emergency_active = risk_stats.get('emergency_stop_active', False)
                except Exception as e:
                    logger.warning(f"Failed to get risk stats: {e}")
            
            message = (
                "üìã *–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f}—á\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
                
                "üí∞ **–ë–ê–õ–ê–ù–°–´:**\n"
                f"   üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: ${source_balance:.2f}\n"
                f"   üè† –û—Å–Ω–æ–≤–Ω–æ–π: ${main_balance:.2f}\n"
                f"   üíπ –í—Å–µ–≥–æ: ${source_balance + main_balance:.2f}\n\n"
                
                "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:**\n"
                f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
                f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {successful_copies}\n"
                f"   –û—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {failed_copies}\n"
                f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
                
                "üîÑ **–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:**\n"
                f"   –≠—Ç–∞–ø 1 ‚Üí –≠—Ç–∞–ø 2: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if hasattr(self.copy_system, 'process_copy_signal') else '‚ùå –û—à–∏–±–∫–∞'}\n"
                f"   WebSocket: {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' if websocket_connected else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n"
                "   Telegram Bot: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                
                "üö® **–†–ò–°–ö–ò:**\n"
                f"   –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%\n"
                f"   Emergency Stop: {'üî¥ –ê–ö–¢–ò–í–ï–ù' if emergency_active else 'üü¢ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                
                "‚öôÔ∏è **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:**\n"
                f"   –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Full report text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    async def show_kelly_stats_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å Kelly —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system or not hasattr(self.copy_system, 'kelly_calculator'):
                await update.message.reply_text(
                    "üéØ *KELLY CRITERION –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå Kelly Calculator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            kelly_calc = self.copy_system.kelly_calculator
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            confidence_threshold = getattr(kelly_calc, 'confidence_threshold', 0.65) * 100
            max_kelly_fraction = getattr(kelly_calc, 'max_kelly_fraction', 0.25) * 100
            conservative_factor = getattr(kelly_calc, 'conservative_factor', 0.5) * 100
            lookback_period = getattr(kelly_calc, 'lookback_period', 30)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
            win_probability = 0.0
            profit_loss_ratio = 0.0
            optimal_fraction = 0.0
            
            try:
                if hasattr(kelly_calc, 'get_kelly_stats'):
                    kelly_stats = kelly_calc.get_kelly_stats()
                    win_probability = kelly_stats.get('win_probability', 0.0) * 100
                    profit_loss_ratio = kelly_stats.get('profit_loss_ratio', 0.0)
                    optimal_fraction = kelly_stats.get('optimal_fraction', 0.0) * 100
            except Exception as e:
                logger.warning(f"Failed to get Kelly stats: {e}")
            
            message = (
                "üéØ *KELLY CRITERION –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìä **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:** ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                f"üîÑ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤:** {'–í–∫–ª—é—á–µ–Ω–∞' if getattr(kelly_calc, 'enabled', True) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
                
                "üéØ **–¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:**\n"
                f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_threshold:.0f}%\n"
                f"   –ú–∞–∫—Å. –¥–æ–ª—è Kelly: {max_kelly_fraction:.0f}%\n"
                f"   –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {conservative_factor:.0f}%\n"
                f"   –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {lookback_period} –¥–Ω–µ–π\n\n"
                
                "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:**\n"
                f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: {win_probability:.1f}%\n"
                f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à: {profit_loss_ratio:.2f}\n"
                f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {optimal_fraction:.2f}%\n\n"
                
                "üîß **–ö–û–ú–ê–ù–î–´:**\n"
                "`/set_kelly confidence 70` - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
                "`/set_kelly max_fraction 20` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è\n"
                "`/set_kelly conservative 50` - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Kelly stats text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Kelly —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def show_trailing_stops_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å trailing stops –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            trailing_manager_available = False
            trailing_stops = []
            
            if self.copy_system and hasattr(self.copy_system, 'copy_manager') and hasattr(self.copy_system.copy_manager, 'trailing_manager'):
                trailing_manager_available = True
                
                try:
                    trailing_manager = self.copy_system.copy_manager.trailing_manager
                    trailing_stops = trailing_manager.get_all_stops()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    initial_distance = getattr(trailing_manager, 'default_distance_percent', 0.02) * 100
                    min_step = getattr(trailing_manager, 'min_trail_step', 0.005) * 100
                    max_distance = getattr(trailing_manager, 'max_distance_percent', 0.05) * 100
                    aggressive_mode = getattr(trailing_manager, 'aggressive_mode', False)
                    
                except Exception as e:
                    logger.warning(f"Failed to get trailing stops: {e}")
            
            if not trailing_manager_available:
                await update.message.reply_text(
                    "üõ°Ô∏è *TRAILING STOP-LOSS*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå Trailing Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ trailing stops
            stops_info = ""
            if trailing_stops:
                for i, stop in enumerate(trailing_stops[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    symbol = stop.get('symbol', 'Unknown')
                    side = stop.get('side', 'Unknown')
                    entry_price = self._safe_float(stop.get('entry_price', 0))
                    current_price = self._safe_float(stop.get('current_price', 0))
                    trailing_price = self._safe_float(stop.get('trailing_price', 0))
                    distance_percent = self._safe_float(stop.get('distance_percent', 0)) * 100
                    
                    stops_info += (
                        f"{i+1}. {symbol} ({side})\n"
                        f"   –í—Ö–æ–¥: {entry_price:.6f} | –¢–µ–∫—É—â–∞—è: {current_price:.6f}\n"
                        f"   Trailing Price: {trailing_price:.6f} | –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_percent:.2f}%\n\n"
                    )
                
                if len(trailing_stops) > 5:
                    stops_info += f"...–∏ –µ—â–µ {len(trailing_stops) - 5} trailing stops\n\n"
            else:
                stops_info = "   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö trailing stops\n\n"
            
            message = (
                "üõ°Ô∏è *TRAILING STOP-LOSS*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîÑ **–°–∏—Å—Ç–µ–º–∞:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                f"üìà **–ê–∫—Ç–∏–≤–Ω—ã—Ö trailing:** {len(trailing_stops)}\n\n"
                
                "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò:**\n"
                f"   –ù–∞—á–∞–ª—å–Ω—ã–π trailing: {initial_distance:.2f}%\n"
                f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {min_step:.2f}%\n"
                f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_distance:.2f}%\n"
                f"   –†–µ–∂–∏–º: {'–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π' if aggressive_mode else '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π'}\n\n"
                
                "üìã **–ê–ö–¢–ò–í–ù–´–ï TRAILING STOPS:**\n"
                f"{stops_info}"
                
                "üîß **–ö–û–ú–ê–ù–î–´:**\n"
                "`/set_trailing distance 2.5` - –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è\n"
                "`/set_trailing step 0.3` - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥\n"
                "`/set_trailing aggressive on` - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "`/set_trailing clear_all` - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ trailing stops\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Trailing stops text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ trailing stops: {e}")

    async def show_settings_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system:
                await update.message.reply_text(
                    "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return

            # –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_mode = "DEFAULT"
            if hasattr(self.copy_system, "copy_manager"):
                copy_mode = getattr(self.copy_system.copy_manager, "copy_mode", "DEFAULT")

            # KELLY
            kelly_enabled = hasattr(self.copy_system, "kelly_calculator")
            if kelly_enabled:
                try:
                    kelly_calc = self.copy_system.kelly_calculator
                    confidence = getattr(kelly_calc, "confidence_threshold", 0.65) * 100
                    max_fraction = getattr(kelly_calc, "max_kelly_fraction", 0.25) * 100
                    conservative = getattr(kelly_calc, "conservative_factor", 0.5) * 100
                    kelly_settings = (
                        f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence:.0f}%\n"
                        f"–ú–∞–∫—Å. –¥–æ–ª—è Kelly: {max_fraction:.0f}%\n"
                        f"–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {conservative:.0f}%"
                    )
                except Exception as e:
                    logger.error(f"Kelly settings read error: {e}")
                    kelly_settings = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Kelly: {str(e)[:50]}..."
            else:
                kelly_settings = "Kelly Calculator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

            # TRAILING
            trailing_enabled = False
            if hasattr(self.copy_system, "copy_manager") and hasattr(self.copy_system.copy_manager, "trailing_manager"):
                trailing_enabled = True
                try:
                    tm = self.copy_system.copy_manager.trailing_manager
                    initial_distance = getattr(tm, "default_distance_percent", 0.02) * 100
                    min_step = getattr(tm, "min_trail_step", 0.005) * 100
                    max_distance = getattr(tm, "max_distance_percent", 0.05) * 100
                    aggressive_mode = getattr(tm, "aggressive_mode", False)
                    trailing_settings = (
                        f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {initial_distance:.2f}%\n"
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {min_step:.2f}%\n"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {max_distance:.2f}%\n"
                        f"–†–µ–∂–∏–º: {'–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π' if aggressive_mode else '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π'}"
                    )
                except Exception as e:
                    logger.error(f"Trailing settings read error: {e}")
                    trailing_settings = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Trailing: {str(e)[:50]}..."
            else:
                trailing_settings = "Trailing Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

            # DRAWDOWN
            drawdown_enabled = hasattr(self.copy_system, "drawdown_controller")
            if drawdown_enabled:
                try:
                    controller = self.copy_system.drawdown_controller
                    daily_limit = getattr(controller, "daily_drawdown_limit", 0.05) * 100
                    total_limit = getattr(controller, "max_drawdown_threshold", 0.15) * 100
                    emergency_threshold = getattr(controller, "emergency_stop_threshold", 0.08) * 100
                    drawdown_settings = (
                        f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit:.1f}%\n"
                        f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {total_limit:.1f}%\n"
                        f"Emergency –ø–æ—Ä–æ–≥: {emergency_threshold:.1f}%"
                    )
                except Exception as e:
                    logger.error(f"Drawdown settings read error: {e}")
                    drawdown_settings = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å–∞–¥–∫–∏: {str(e)[:50]}..."
            else:
                drawdown_settings = "Drawdown Controller –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ (–Ω–∏–∫–∞–∫–∏—Ö –±—ç–∫—Å–ª—ç—à–µ–π –≤ f-—Å—Ç—Ä–æ–∫–∞—Ö)
            kelly_block     = kelly_settings.replace("\n", "\n   ")
            trailing_block  = trailing_settings.replace("\n", "\n   ")
            drawdown_block  = drawdown_settings.replace("\n", "\n   ")

            message = (
                "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîÑ **–†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:** {copy_mode}\n"
                f"üéØ **Kelly Criterion:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if kelly_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
                f"üõ°Ô∏è **Trailing Stops:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if trailing_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
                f"üìâ **–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if drawdown_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n"
                "üéØ **KELLY SETTINGS:**\n"
                f"   {kelly_block}\n\n"
                "üõ°Ô∏è **TRAILING SETTINGS:**\n"
                f"   {trailing_block}\n\n"
                "üìâ **DRAWDOWN SETTINGS:**\n"
                f"   {drawdown_block}\n\n"
                "üîß **–ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò:**\n"
                "`/set_kelly` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kelly\n"
                "`/set_trailing` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Trailing\n"
                "`/set_drawdown` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏\n\n"
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )

            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"Settings text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


    async def show_emergency_controls_text(self, update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.copy_system:
                await update.message.reply_text(
                    "üö® *–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            system_active = getattr(self.copy_system, 'system_active', False)
            copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Emergency Stop
            emergency_active = False
            if hasattr(self.copy_system, 'drawdown_controller'):
                try:
                    emergency_active = getattr(self.copy_system.drawdown_controller, 'emergency_stop_active', False)
                except Exception as e:
                    logger.warning(f"Failed to get emergency status: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions_count = 0
            if hasattr(self.copy_system, 'base_monitor'):
                try:
                    positions = await self.copy_system.base_monitor.main_client.get_positions()
                    positions_count = len([p for p in positions if self._safe_float(p.get('size', 0)) > 0])
                except Exception as e:
                    logger.warning(f"Failed to get positions count: {e}")
        
            message = (
                "üö® *–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é!\n\n"
                
                f"üìä **–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:**\n"
                f"   –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"   Emergency Stop: {'üî¥ –ê–ö–¢–ò–í–ï–ù' if emergency_active else 'üü¢ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {positions_count}\n\n"
                
                "üõë **–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**\n"
                "   ‚Ä¢ `/emergency stop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "   ‚Ä¢ `/emergency close_all` - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
                "   ‚Ä¢ `/emergency restart` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n\n"
                
                "‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
                "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏\n"
                "   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ\n"
                "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n\n"
                
                f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Emergency controls text error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    async def show_performance_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.copy_system:
                message = (
                    "üìä *–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = getattr(self.copy_system, 'system_stats', {})
                start_time = stats.get('start_time', time.time())
                uptime_hours = (time.time() - start_time) / 3600
                
                total_signals = stats.get('total_signals_processed', 0)
                successful = stats.get('successful_copies', 0)
                failed = stats.get('failed_copies', 0)
                success_rate = (successful / total_signals * 100) if total_signals > 0 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                current_balance = 0.0
                try:
                    if hasattr(self.copy_system, 'base_monitor'):
                        current_balance = await self.copy_system.base_monitor.main_client.get_balance()
                except Exception as e:
                    logger.warning(f"Failed to get balance: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                avg_latency = stats.get('average_latency_ms', 0) / 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
                max_latency = stats.get('max_latency_ms', 0) / 1000
                
                message = (
                    "üìä *–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"‚è±Ô∏è **–í–†–ï–ú–Ø –†–ê–ë–û–¢–´:**\n"
                    f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {uptime_hours:.1f} —á–∞—Å–æ–≤\n"
                    f"   –ó–∞–ø—É—â–µ–Ω–∞: {datetime.fromtimestamp(start_time).strftime('%d.%m %H:%M')}\n\n"
                    
                    f"üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:**\n"
                    f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
                    f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {successful}\n"
                    f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–ø–∏–π: {failed}\n"
                    f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
                    
                    f"‚ö° **–ó–ê–î–ï–†–ñ–ö–ò:**\n"
                    f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.3f}—Å\n"
                    f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {max_latency:.3f}—Å\n"
                    f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('missed_signals', 0)}\n\n"
                    
                    f"üí∞ **–§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**\n"
                    f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}\n"
                    f"   –û–±—â–∏–π –æ–±—ä–µ–º: ${stats.get('total_volume', 0):.2f}\n"
                    f"   Emergency –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: {stats.get('emergency_stops', 0)}\n\n"
                    
                    f"üéØ **–ö–ê–ß–ï–°–¢–í–û –†–ê–ë–û–¢–´:**\n"
                    f"   –û—Ç–∫–ª–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {'‚úÖ –û—Ç–ª–∏—á–Ω—ã–π' if success_rate > 95 else '‚úÖ –•–æ—Ä–æ—à–∏–π' if success_rate > 80 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}\n"
                    f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –í—ã—Å–æ–∫–∞—è' if failed < 5 else '‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è'}\n\n"
                    
                    f"‚è∞ –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%H:%M:%S')}"
                )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Performance report error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    async def show_risks_analysis_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        try:
            if not self.copy_system:
                message = (
                    "‚ö†Ô∏è *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                current_balance = 0.0
                try:
                    if hasattr(self.copy_system, 'base_monitor'):
                        current_balance = await self.copy_system.base_monitor.main_client.get_balance()
                except Exception as e:
                    logger.warning(f"Failed to get balance: {e}")
            
                # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
                current_drawdown = 0.0
                peak_balance = current_balance
                emergency_active = False
            
                if hasattr(self.copy_system, 'drawdown_controller'):
                    try:
                        if hasattr(self.copy_system.drawdown_controller, 'get_risk_stats'):
                            risk_stats = self.copy_system.drawdown_controller.get_risk_stats()
                            peak_balance = risk_stats.get('peak_balance', current_balance)
                            current_drawdown = ((peak_balance - current_balance) / peak_balance * 100) if peak_balance > 0 else 0
                            emergency_active = risk_stats.get('emergency_stop_active', False)
                    except Exception as e:
                        logger.warning(f"Failed to get risk stats: {e}")
            
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
                if current_drawdown < 3:
                    risk_level = "üü¢ –ù–ò–ó–ö–ò–ô"
                    recommendation = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"
                elif current_drawdown < 5:
                    risk_level = "üü° –°–†–ï–î–ù–ò–ô"
                    recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ"
                elif current_drawdown < 8:
                    risk_level = "üü† –í–´–°–û–ö–ò–ô"
                    recommendation = "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π"
                else:
                    risk_level = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
                    recommendation = "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É"
            
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
                daily_limit = 5.0
                total_limit = 15.0
                emergency_threshold = 10.0
            
                if hasattr(self.copy_system, 'drawdown_controller'):
                    controller = self.copy_system.drawdown_controller
                    daily_limit = getattr(controller, 'daily_drawdown_limit', 0.05) * 100
                    total_limit = getattr(controller, 'max_drawdown_threshold', 0.15) * 100
                    emergency_threshold = getattr(controller, 'emergency_stop_threshold', 0.1) * 100
            
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
                positions_count = 0
                max_position_size = 0.0
                total_exposure = 0.0
            
                try:
                    if hasattr(self.copy_system, 'base_monitor'):
                        positions = await self.copy_system.base_monitor.main_client.get_positions()
                        active_positions = [p for p in positions if self._safe_float(p.get('size', 0)) > 0]
                        positions_count = len(active_positions)
                    
                        for pos in active_positions:
                            position_value = self._safe_float(pos.get('positionValue', 0))
                            max_position_size = max(max_position_size, position_value)
                            total_exposure += position_value
                except Exception as e:
                    logger.warning(f"Failed to get positions: {e}")
            
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
                position_risk = (max_position_size / current_balance * 100) if current_balance > 0 else 0
                exposure_risk = (total_exposure / current_balance * 100) if current_balance > 0 else 0
            
                message = (
                    "‚ö†Ô∏è *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìä **–¢–ï–ö–£–©–ò–ï –†–ò–°–ö–ò:**\n"
                    f"   –ü—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%\n"
                    f"   –ü–∏–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${peak_balance:.2f}\n"
                    f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}\n"
                    f"   Emergency Stop: {'üî¥ –ê–∫—Ç–∏–≤–µ–Ω' if emergency_active else 'üü¢ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                
                    f"üéØ **–£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê:** {risk_level}\n\n"
                
                    f"üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:**\n"
                    f"   {recommendation}\n\n"
                
                    f"üìà **–ú–ï–¢–†–ò–ö–ò –ü–û–ó–ò–¶–ò–ô:**\n"
                    f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions_count}\n"
                    f"   –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${max_position_size:.2f} ({position_risk:.1f}%)\n"
                    f"   –û–±—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è: ${total_exposure:.2f} ({exposure_risk:.1f}%)\n\n"
                
                    f"üìã **–õ–ò–ú–ò–¢–´:**\n"
                    f"   –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit:.1f}%\n"
                    f"   –û–±—â–∏–π –ª–∏–º–∏—Ç: {total_limit:.1f}%\n"
                    f"   Emergency –ø–æ—Ä–æ–≥: {emergency_threshold:.1f}%\n\n"
                
                    f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
        
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        except Exception as e:
            logger.error(f"Risk analysis error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤: {e}")

    async def show_daily_report_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        try:
            today = datetime.now().strftime('%d.%m.%Y')
        
            if not self.copy_system:
                message = (
                    f"üìÖ *–î–ù–ï–í–ù–û–ô –û–¢–ß–ï–¢ ({today})*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
                stats = getattr(self.copy_system, 'system_stats', {})
            
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∑–∞ –¥–µ–Ω—å
                daily_signals = stats.get('daily_signals', 0)
                daily_success = stats.get('daily_successful_copies', 0)
                daily_failed = stats.get('daily_failed_copies', 0)
            
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if daily_signals == 0:
                    daily_signals = stats.get('total_signals_processed', 0)
                    daily_success = stats.get('successful_copies', 0)
                    daily_failed = stats.get('failed_copies', 0)
            
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å
                daily_pnl = 0.0
                daily_pnl_percent = 0.0
                current_balance = 0.0
            
                try:
                    if hasattr(self.copy_system, 'base_monitor'):
                        current_balance = await self.copy_system.base_monitor.main_client.get_balance()
                    
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                        if hasattr(self.copy_system, 'drawdown_controller'):
                            controller = self.copy_system.drawdown_controller
                            if hasattr(controller, 'get_daily_pnl'):
                                daily_pnl = controller.get_daily_pnl()
                                # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                                base_capital = current_balance - daily_pnl
                                if base_capital > 0:
                                    daily_pnl_percent = (daily_pnl / base_capital * 100)
                                else:
                                    daily_pnl_percent = 0
                except Exception as e:
                    logger.warning(f"Failed to get daily P&L: {e}")
            
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–¥–µ–ª–æ–∫ –¥–Ω—è
                top_trades = []
                try:
                    if hasattr(self.copy_system, 'copy_manager') and hasattr(self.copy_system.copy_manager, 'get_top_trades'):
                        top_trades = self.copy_system.copy_manager.get_top_trades(limit=3)
                
                    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                    if not top_trades:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ P&L
                        if hasattr(self.copy_system, 'base_monitor'):
                            positions = await self.copy_system.base_monitor.main_client.get_positions()
                            active_positions = [p for p in positions if self._safe_float(p.get('size', 0)) > 0]
                        
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ P&L (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                            active_positions.sort(key=lambda p: self._safe_float(p.get('unrealisedPnl', 0)), reverse=True)
                        
                            # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –ø–æ–∑–∏—Ü–∏–∏
                            for pos in active_positions[:3]:
                                symbol = pos.get('symbol', 'Unknown')
                                pnl = self._safe_float(pos.get('unrealisedPnl', 0))
                            
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
                                hold_time = "?"
                                created_time = pos.get('createdTime', 0)
                                if created_time:
                                    try:
                                        created_dt = datetime.fromtimestamp(int(created_time) / 1000)
                                        hold_seconds = (datetime.now() - created_dt).total_seconds()
                                    
                                        if hold_seconds < 3600:
                                            hold_time = f"{int(hold_seconds / 60)}m"
                                        else:
                                            hold_time = f"{hold_seconds / 3600:.1f}h"
                                    except:
                                        hold_time = "?"
                            
                                top_trades.append((symbol, pnl, hold_time))
                except Exception as e:
                    logger.warning(f"Failed to get top trades: {e}")
            
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø —Å–¥–µ–ª–∫–∏
                top_trades_text = ""
                if top_trades:
                    for i, (symbol, pnl, hold_time) in enumerate(top_trades):
                        top_trades_text += f"   {i+1}. {symbol}: ${pnl:+.2f} ({hold_time})\n"
                else:
                    top_trades_text = "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
            
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
                avg_latency = stats.get('average_latency_ms', 0) / 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
                max_latency = stats.get('max_latency_ms', 0) / 1000
            
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∏—Å–∫–∞—Ö
                max_drawdown = 0.0
                emergency_activations = 0
                trailing_activations = 0
            
                if hasattr(self.copy_system, 'drawdown_controller'):
                    controller = self.copy_system.drawdown_controller
                    if hasattr(controller, 'get_daily_max_drawdown'):
                        max_drawdown = controller.get_daily_max_drawdown() * 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    emergency_activations = stats.get('emergency_stops', 0)
            
                if hasattr(self.copy_system, 'copy_manager') and hasattr(self.copy_system.copy_manager, 'trailing_manager'):
                    trailing_activations = stats.get('trailing_activations', 0)
            
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
                success_percent_text = "0"
                if daily_signals > 0:
                    success_percent = (daily_success / daily_signals * 100)
                    success_percent_text = f"{success_percent:.0f}"
            
                message = (
                    f"üìÖ *–î–ù–ï–í–ù–û–ô –û–¢–ß–ï–¢ ({today})*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üí∞ **P&L —Å–µ–≥–æ–¥–Ω—è:** {'+' if daily_pnl >= 0 else ''}{daily_pnl:.2f} USDT ({'+' if daily_pnl_percent >= 0 else ''}{daily_pnl_percent:.1f}%)\n"
                    f"üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:** {daily_signals}\n"
                )
            
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏—è—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                if daily_signals > 0:
                    message += f"‚úÖ **–£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π:** {daily_success} ({success_percent_text}% –ø—Ä–∏ {daily_signals} —Å–∏–≥–Ω–∞–ª–∞—Ö)\n\n"
                else:
                    message += f"‚úÖ **–£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π:** {daily_success} (–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤)\n\n"
            
                message += (
                    f"üéØ **–õ–£–ß–®–ò–ï –ü–û–ó–ò–¶–ò–ò:**\n"
                    f"{top_trades_text}\n"
                
                    f"üìà **–ö–û–ü–ò–†–û–í–ê–ù–ò–ï:**\n"
                    f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {daily_signals}\n"
                    f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {daily_success}\n"
                    f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.1f}s\n"
                    f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {max_latency:.1f}s\n\n"
                
                    f"üõ°Ô∏è **–†–ò–°–ö–ò:**\n"
                    f"   –ú–∞–∫—Å –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–Ω—è: {max_drawdown:.1f}%\n"
                    f"   Emergency –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {emergency_activations}\n"
                    f"   Trailing —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {trailing_activations}\n\n"
                
                    f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
        
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            except Exception as md_error:
                if "Can't parse entities" in str(md_error):
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    logger.warning(f"Markdown formatting error: {md_error}. Sending without formatting.")
                    await update.message.reply_text(message, parse_mode=None)
                else:
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                    raise
        
        except Exception as e:
            logger.error(f"Daily report error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def show_health_check_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_results = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.copy_system:
                health_results.append("‚úÖ Copy System: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
                if hasattr(self.copy_system, 'base_monitor'):
                    health_results.append("‚úÖ Base Monitor: –ê–∫—Ç–∏–≤–µ–Ω")
                    
                    # –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    try:
                        balance = await self.copy_system.base_monitor.main_client.get_balance()
                        health_results.append(f"‚úÖ API Connection: –†–∞–±–æ—Ç–∞–µ—Ç (${balance:.2f})")
                    except Exception as e:
                        health_results.append(f"‚ùå API Connection: –û—à–∏–±–∫–∞ ({str(e)[:30]})")
                else:
                    health_results.append("‚ùå Base Monitor: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Kelly Calculator
                if hasattr(self.copy_system, 'kelly_calculator'):
                    health_results.append("‚úÖ Kelly Calculator: –ê–∫—Ç–∏–≤–µ–Ω")
                else:
                    health_results.append("‚ùå Kelly Calculator: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Copy Manager
                if hasattr(self.copy_system, 'copy_manager'):
                    health_results.append("‚úÖ Copy Manager: –ê–∫—Ç–∏–≤–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Trailing Manager
                    if hasattr(self.copy_system.copy_manager, 'trailing_manager'):
                        health_results.append("‚úÖ Trailing Manager: –ê–∫—Ç–∏–≤–µ–Ω")
                    else:
                        health_results.append("‚ùå Trailing Manager: –ù–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    health_results.append("‚ùå Copy Manager: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Drawdown Controller
                if hasattr(self.copy_system, 'drawdown_controller'):
                    health_results.append("‚úÖ Drawdown Controller: –ê–∫—Ç–∏–≤–µ–Ω")
                else:
                    health_results.append("‚ùå Drawdown Controller: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
                if hasattr(self.copy_system, 'base_monitor') and hasattr(self.copy_system.base_monitor, 'websocket_manager'):
                    ws_manager = self.copy_system.base_monitor.websocket_manager
                    if hasattr(ws_manager, 'ws') and ws_manager.ws:
                        health_results.append("‚úÖ WebSocket: –ü–æ–¥–∫–ª—é—á–µ–Ω")
                    else:
                        health_results.append("‚ùå WebSocket: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    health_results.append("‚ùå WebSocket: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
                if hasattr(self.copy_system, 'system_stats'):
                    health_results.append("‚úÖ System Stats: –ê–∫—Ç–∏–≤–Ω—ã")
                else:
                    health_results.append("‚ùå System Stats: –ù–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ handler —Ñ—É–Ω–∫—Ü–∏–π
                if hasattr(self.copy_system, 'process_copy_signal'):
                    health_results.append("‚úÖ Signal Handler: –ê–∫—Ç–∏–≤–µ–Ω")
                else:
                    health_results.append("‚ùå Signal Handler: –ù–µ –Ω–∞–π–¥–µ–Ω")
                    
            else:
                health_results.append("‚ùå Copy System: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot
            health_results.append(f"‚úÖ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω ({len(self.authorized_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            try:
                test_file = "test_write.tmp"
                with open(test_file, 'w') as f:
                    f.write("test")
                os.remove(test_file)
                health_results.append("‚úÖ File System: –î–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                health_results.append(f"‚ùå File System: –û—à–∏–±–∫–∞ ({str(e)[:30]})")
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            error_count = len([r for r in health_results if r.startswith("‚ùå")])
            warning_count = len([r for r in health_results if r.startswith("‚ö†Ô∏è")])
            
            if error_count == 0 and warning_count == 0:
                overall_status = "üü¢ –û–¢–õ–ò–ß–ù–û"
            elif error_count == 0:
                overall_status = "üü° –•–û–†–û–®–û"
            elif error_count <= 2:
                overall_status = "üü† –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´"
            else:
                overall_status = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´"
            
            message = (
                "üîß *–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üéØ **–û–ë–©–ò–ô –°–¢–ê–¢–£–°:** {overall_status}\n\n"
                
                f"üìã **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:**\n"
                f"{chr(10).join(['   ' + result for result in health_results])}\n\n"
                
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                f"   –û—à–∏–±–æ–∫: {error_count}\n"
                f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}\n"
                f"   –£—Å–ø–µ—à–Ω—ã—Ö: {len(health_results) - error_count - warning_count}\n\n"
                
                f"‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Health check error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def show_sync_status_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.copy_system:
                message = (
                    "üîÑ *–°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                stats = getattr(self.copy_system, 'system_stats', {})
                total_signals = stats.get('total_signals_processed', 0)
                successful = stats.get('successful_copies', 0)
                failed = stats.get('failed_copies', 0)
                
                success_rate = (successful / total_signals * 100) if total_signals > 0 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
                avg_latency = stats.get('average_latency_ms', 0) / 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
                max_latency = stats.get('max_latency_ms', 0) / 1000
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å WebSocket
                websocket_connected = False
                if hasattr(self.copy_system, 'base_monitor') and hasattr(self.copy_system.base_monitor, 'websocket_manager'):
                    ws_manager = self.copy_system.base_monitor.websocket_manager
                    websocket_connected = hasattr(ws_manager, 'ws') and ws_manager.ws
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                system_active = getattr(self.copy_system, 'system_active', False)
                copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                last_syncs = []
                
                try:
                    if hasattr(self.copy_system, 'system_stats') and 'recent_copies' in stats:
                        recent_copies = stats['recent_copies']
                        for copy_info in recent_copies[:3]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                            time_str = copy_info.get('timestamp', '')
                            if isinstance(time_str, (int, float)):
                                try:
                                    time_str = datetime.fromtimestamp(time_str).strftime('%H:%M:%S')
                                except:
                                    time_str = str(time_str)
                            
                            symbol = copy_info.get('symbol', 'Unknown')
                            action = copy_info.get('action', 'Unknown')
                            size = copy_info.get('size', 0)
                            status = '‚úÖ' if copy_info.get('success', True) else '‚ùå'
                            
                            action_str = f"{action} {'+' if size > 0 else ''}{size}" if action != 'Close' else 'Close'
                            last_syncs.append((time_str, symbol, action_str, status))
                except Exception as e:
                    logger.warning(f"Failed to get recent copies: {e}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–ø–∏—è—Ö, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not last_syncs:
                    current_time = datetime.now()
                    last_syncs = [
                        (current_time.strftime('%H:%M:%S'), "Unknown", "No data", "‚ö†Ô∏è")
                    ]
                
                message = (
                    "üîÑ *–°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"‚ö° **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**\n"
                    f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.3f}s\n"
                    f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {max_latency:.3f}s\n"
                    f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
                    f"   WebSocket: {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' if websocket_connected else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n"
                    
                    f"üìà **–ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:**\n"
                )
                
                for time_str, symbol, action, status in last_syncs:
                    message += f"   {time_str} {symbol} {action} {status}\n"
                
                message += (
                    f"\nüìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                    f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
                    f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–ø–∏–π: {successful}\n"
                    f"   –û—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {failed}\n"
                    f"   –°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                    f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                    
                    f"‚ùå **–ü–†–û–ë–õ–ï–ú–´:**\n"
                    f"   {'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º' if success_rate > 95 and websocket_connected else '–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'}\n\n"
                    
                    f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Sync status error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def show_kelly_settings_text(self, update):
        """üÜï –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly Criterion"""
        try:
            if not self.copy_system or not hasattr(self.copy_system, 'kelly_calculator'):
                message = (
                    "üéØ *–ù–ê–°–¢–†–û–ô–ö–ò KELLY CRITERION*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùå Kelly Calculator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
                    "üìä **–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                    "`/set_kelly confidence 70` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 70%\n"
                    "`/set_kelly max_fraction 20` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è 20%\n"
                    "`/set_kelly conservative 40` - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä 40%"
                )
            else:
                kelly_calc = self.copy_system.kelly_calculator
                confidence = getattr(kelly_calc, 'confidence_threshold', 0.65) * 100
                max_fraction = getattr(kelly_calc, 'max_kelly_fraction', 0.25) * 100
                conservative = getattr(kelly_calc, 'conservative_factor', 0.5) * 100
                lookback = getattr(kelly_calc, 'lookback_period', 30)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ Kelly —Ä–∞—Å—á–µ—Ç–∞—Ö
                win_probability = 0.0
                profit_loss_ratio = 0.0
                optimal_fraction = 0.0
                
                try:
                    if hasattr(kelly_calc, 'get_kelly_stats'):
                        kelly_stats = kelly_calc.get_kelly_stats()
                        win_probability = kelly_stats.get('win_probability', 0.0) * 100
                        profit_loss_ratio = kelly_stats.get('profit_loss_ratio', 0.0)
                        optimal_fraction = kelly_stats.get('optimal_fraction', 0.0) * 100
                except Exception as e:
                    logger.warning(f"Failed to get Kelly stats: {e}")
                
                message = (
                    "üéØ *–ù–ê–°–¢–†–û–ô–ö–ò KELLY CRITERION*\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìä **–¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:**\n"
                    f"   Confidence Threshold: {confidence:.0f}%\n"
                    f"   Max Kelly Fraction: {max_fraction:.0f}%\n"
                    f"   Conservative Factor: {conservative:.0f}%\n"
                    f"   Lookback Period: {lookback} –¥–Ω–µ–π\n\n"
                    
                    f"üìà **–¢–ï–ö–£–©–ò–ï –†–ê–°–ß–ï–¢–´:**\n"
                    f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: {win_probability:.1f}%\n"
                    f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à: {profit_loss_ratio:.2f}\n"
                    f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {optimal_fraction:.2f}%\n\n"
                    
                    "üîß **–ö–û–ú–ê–ù–î–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:**\n"
                    "`/set_kelly confidence 70` - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
                    "`/set_kelly max_fraction 20` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è\n"
                    "`/set_kelly conservative 40` - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä\n"
                    "`/set_kelly lookback 30` - –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    
                    "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
                    "   ‚Ä¢ Confidence: 60-70% (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞)\n"
                    "   ‚Ä¢ Max Fraction: 20-25% (–º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏)\n"
                    "   ‚Ä¢ Conservative: 40-60% (—É—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏)\n"
                    "   ‚Ä¢ Lookback: 30-60 –¥–Ω–µ–π (–ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞)\n\n"
                    
                    f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Kelly settings error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Kelly: {e}")
    
    # ================================
    # –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–ï–ú
    # ================================
    
    async def copy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /copy - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        sys_logger.log_telegram_command("/copy", update.effective_user.id)

        if not self.check_authorization(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            if not self.copy_system:
                await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return
            
            args = context.args
            if not args:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                system_active = getattr(self.copy_system, 'system_active', False)
                copy_enabled = getattr(self.copy_system, 'copy_enabled', False)
                
                message = (
                    "üîÑ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï–ú**\n\n"
                    f"–°–∏—Å—Ç–µ–º–∞: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if system_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                    f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if copy_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "`/copy start` - –≤–∫–ª—é—á–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    "`/copy stop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    "`/copy restart` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    "`/copy mode DEFAULT` - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
                return
            
            command = args[0].lower()
            
            # –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if command == 'start':
                self.copy_system.system_active = True
                self.copy_system.copy_enabled = True
                
                if hasattr(self.copy_system, 'copy_manager'):
                    await self.copy_system.copy_manager.start_copying()
                
                await update.message.reply_text("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
                await send_telegram_alert("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            elif command == 'stop':
                self.copy_system.copy_enabled = False
                
                if hasattr(self.copy_system, 'copy_manager'):
                    await self.copy_system.copy_manager.stop_copying()
                
                await update.message.reply_text("‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                await send_telegram_alert("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            elif command == 'restart':
                # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                self.copy_system.copy_enabled = False
                if hasattr(self.copy_system, 'copy_manager'):
                    await self.copy_system.copy_manager.stop_copying()
                
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
                # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞
                self.copy_system.system_active = True
                self.copy_system.copy_enabled = True
                if hasattr(self.copy_system, 'copy_manager'):
                    await self.copy_system.copy_manager.start_copying()
                
                await update.message.reply_text("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ")
                await send_telegram_alert("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            elif command == 'mode' and len(args) > 1:
                mode = args[1].upper()
                
                if not hasattr(self.copy_system, 'copy_manager'):
                    await update.message.reply_text("‚ùå Copy Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                valid_modes = ['DEFAULT', 'AGGRESSIVE', 'CONSERVATIVE', 'CUSTOM']
                
                if mode not in valid_modes:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {', '.join(valid_modes)}"
                    )
                    return
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                self.copy_system.copy_manager.copy_mode = mode
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if mode == 'AGGRESSIVE':
                    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏–π, –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    self.copy_system.copy_manager.max_positions = 15
                    self.copy_system.copy_manager.position_scaling = 1.5
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å Kelly Calculator, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                    if hasattr(self.copy_system, 'kelly_calculator'):
                        self.copy_system.kelly_calculator.max_kelly_fraction = 0.3
                        self.copy_system.kelly_calculator.conservative_factor = 0.4
                    
                elif mode == 'CONSERVATIVE':
                    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –º–µ–Ω—å—à–µ –ø–æ–∑–∏—Ü–∏–π, –º–µ–Ω—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    self.copy_system.copy_manager.max_positions = 5
                    self.copy_system.copy_manager.position_scaling = 0.5
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å Kelly Calculator, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                    if hasattr(self.copy_system, 'kelly_calculator'):
                        self.copy_system.kelly_calculator.max_kelly_fraction = 0.15
                        self.copy_system.kelly_calculator.conservative_factor = 0.7
                    
                elif mode == 'DEFAULT':
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º: —É–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    self.copy_system.copy_manager.max_positions = 10
                    self.copy_system.copy_manager.position_scaling = 1.0
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å Kelly Calculator, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                    if hasattr(self.copy_system, 'kelly_calculator'):
                        self.copy_system.kelly_calculator.max_kelly_fraction = 0.25
                        self.copy_system.kelly_calculator.conservative_factor = 0.5
                
                await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}")
                await send_telegram_alert(f"üîÑ –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode} —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ: start, stop, restart, mode"
                )
                
        except Exception as e:
            logger.error(f"Copy command error: {e}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")

    # ================================
    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î
    # ================================
    


    def register_commands(self, application):
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ensure_commands_registered()
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        """
        # üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.ensure_commands_registered(application)
        
        # ‚ö†Ô∏è –í–ê–ñ–ù–û: /keys –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        # –ú–µ–Ω—é –∫–ª—é—á–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è:
        #  - –≤ Stage2TelegramBot.start() (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π tg_keys_menu, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω)
        #  - –≤ integrated_launch_system._initialize_telegram_bot() —Å—Ä–∞–∑—É –ü–û–°–õ–ï start()
        #    (fallback, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω).
        km_registered = application.bot_data.get("keys_menu_registered")
        km_fallback = application.bot_data.get("keys_menu_fallback", False)
        if km_registered:
            logger.debug("register_commands: /keys already registered (fallback=%s)", km_fallback)
        else:
            logger.debug("register_commands: /keys not registered yet ‚Äî launcher guard will handle it")

# ==========================================
# –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
# ==========================================
logger.info("üîß stage2_telegram_bot.py loaded with fixes:")
logger.info(f"   ‚úÖ TELEGRAM_TOKEN: {'‚úì Found' if TELEGRAM_TOKEN else '‚ùå Missing'}")
logger.info(f"   ‚úÖ ADMIN_IDS: {len(ADMIN_IDS)} administrators")
logger.info(f"   ‚úÖ TG_KEYS_MENU: {'‚úì Available' if tg_keys_available else '‚ùå Fallback mode'}")
logger.info(f"   ‚úÖ Configuration source: {TELEGRAM_TOKEN_SOURCE}")


# ================================
# –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
# ================================

async def run_stage2_telegram_bot(copy_system=None):
    """
    üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram Bot –¥–ª—è Stage 2 v2.2
    PRODUCTION-READY –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    """
    try:
        logger.info("Starting Stage 2 Telegram Bot v2.2...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Stage2TelegramBot(copy_system)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() –≤ production
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ event loop
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        bot.register_commands(application)
        
        # üîß PRODUCTION FIX: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ loop
        await application.initialize()
        await application.start()
        
        bot.bot_active = True
        logger.info("‚úÖ Stage 2 Telegram Bot v2.2 started successfully")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await send_telegram_alert(
            "ü§ñ **STAGE 2 TELEGRAM BOT v2.2 –ó–ê–ü–£–©–ï–ù**\n"
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞\n"
            "üÜï –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n"
            "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
            "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã\n"
            "   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Å–∞–¥–∫–∏\n"
            "   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trailing stops\n"
            "   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n"
            "   ‚Ä¢ Backup/Restore –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
        )
        
        # üîß PRODUCTION FIX: –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ loop
        await application.updater.start_polling(drop_pending_updates=True)
        
        # üîß PRODUCTION FIX: –û–∂–∏–¥–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º loop, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        try:
            # –†–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º event loop
            while bot.bot_active:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("Bot shutdown requested")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ loop
            bot.bot_active = False
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            logger.info("Stage 2 Telegram Bot stopped")
        
    except Exception as e:
        logger.error(f"Telegram Bot error: {e}")
        logger.error(traceback.format_exc())
        raise

if __name__ == "__main__":
    # üîß STANDALONE —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot –¥–ª—è –≠—Ç–∞–ø–∞ 2 v2.2 (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
        print("üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò v2.2:")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kelly Criterion")
        print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏") 
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
        print("   ‚Ä¢ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
        print("   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ó –ü–õ–ê–ù–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        print("   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
        print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Å–∞–¥–∫–∏")
        print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trailing stops")
        print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
        print("   ‚Ä¢ Backup/Restore –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        # üîß –¢–û–õ–¨–ö–û –≤ standalone —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run()
        import asyncio
        asyncio.run(run_stage2_telegram_bot())
    except KeyboardInterrupt:
        print("\nüõë Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        traceback.print_exc()

