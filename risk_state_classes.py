# risk_state_classes.py
from __future__ import annotations

import asyncio
import time
from enum import Enum
from typing import Optional, Callable, Awaitable, Any


class RiskMode(Enum):
    NORMAL = "normal"
    RECOVERY = "recovery"
    EMERGENCY = "emergency"


class RiskDataContext:
    """
    –•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Ö –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DrawdownController/Stage2 –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –æ–± –∞–ª–µ—Ä—Ç–∞—Ö/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.
    """

    def __init__(self, config: dict):
        # –ö–æ–Ω—Ñ–∏–≥ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –æ–±—ë—Ä—Ç–∫–µ {'RISK': {...}, 'SAFE_MODE': {...}}
        risk_cfg = (config or {}).get("RISK", config or {})
        safe_cfg = (config or {}).get("SAFE_MODE", {})

        self.drawdown_limit: float = float(risk_cfg.get("drawdown_limit", 0.15))  # 15% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.data_stale_ttl_sec: float = float(safe_cfg.get("data_stale_ttl_sec", 10.0))
        self.risk_confirm_reads: int = int(safe_cfg.get("risk_confirm_reads", 2))
        self.risk_hysteresis: float = float(safe_cfg.get("risk_hysteresis", 0.01))  # 1%

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self._last_equity: Optional[float] = None
        self._last_equity_ts: float = 0.0

        # –î–Ω–µ–≤–Ω–æ–π high –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π DD (–µ–≥–æ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ –≤–Ω–µ—à–Ω—è—è –ª–æ–≥–∏–∫–∞; –º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º)
        self._daily_high: Optional[float] = None
        self.daily_dd_percent: float = 0.0

        # –¢–µ–∫—É—â–µ–µ "–Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ DD (–º–æ–∂–µ—Ç –±—ã—Ç—å max(total,daily,position))
        self.dd_percent: float = 0.0

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è DD –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ —á—Ç–µ–Ω–∏—è–º–∏
        self._confirm_counter: int = 0
        self._last_dd_over_limit: bool = False

        # –°—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è ‚Äî –≤–ª–∏—è–µ—Ç –Ω–∞ is_data_reliable()
        self._consecutive_failures: int = 0
        self._last_failure_ts: float = 0.0
        self._last_success_ts: float = 0.0

    # --- –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

    def update_equity(self, equity: Optional[float]) -> None:
        """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (equity)."""
        if equity is None or equity <= 0:
            # –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º success-–º–µ—Ç–∫–∏; –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ—Ç
            return
        self._last_equity = float(equity)
        self._last_equity_ts = time.time()
        self._consecutive_failures = 0
        self._last_success_ts = self._last_equity_ts

    def update_daily_dd(self, equity: float, daily_high: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É –∏ —Ç–µ–∫—É—â–µ–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DD."""
        if equity is None or equity <= 0 or daily_high is None or daily_high <= 0:
            return
        self._daily_high = max(daily_high, equity)
        self.daily_dd_percent = max(0.0, (self._daily_high - equity) / self._daily_high)
        # —Ç–µ–∫—É—â–µ–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dd (–µ—Å–ª–∏ –≤–Ω–µ—à–Ω—è—è –ª–æ–≥–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç total ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω—É—é)
        self.dd_percent = max(self.dd_percent, self.daily_dd_percent)

    # --- –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö / –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ DD ---

    def is_data_reliable(self) -> bool:
        """–°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥—ë–∂–Ω—ã–º–∏, –µ—Å–ª–∏:
        - –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ equity –∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ
        - –Ω–µ—Ç —Å–µ—Ä–∏–∏ –æ—Ç–∫–∞–∑–æ–≤, –¥–µ–ª–∞—é—â–µ–π –¥–∞–Ω–Ω—ã–µ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏
        """
        now = time.time()
        if self._last_equity is None:
            return False
        if (now - self._last_equity_ts) > self.data_stale_ttl_sec:
            return False
        # –¥–æ–ø—É—Å–∫–∞–µ–º 1-2 —Å–±–æ—è –ø–æ–¥—Ä—è–¥ –∫–∞–∫ ¬´—à—É–º¬ª
        if self._consecutive_failures >= 3:
            return False
        return True

    def register_failure(self) -> None:
        self._consecutive_failures += 1
        self._last_failure_ts = time.time()

    def register_success(self) -> None:
        self._consecutive_failures = 0
        self._last_success_ts = time.time()

    def dd_confirmed(self, positional_dd: Optional[float] = None) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏: –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ –ª–∏–º–∏—Ç–∞ N –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑
        –ø—Ä–∏ –Ω–∞–¥—ë–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å (‚Äî1%) –¥–ª—è –æ—Ç–ª–∏–ø–∞–Ω–∏—è.
        """
        if positional_dd is not None:
            observed = max(self.dd_percent, float(positional_dd))
        else:
            observed = self.dd_percent

        over_limit = observed >= self.drawdown_limit
        hysteresis_ok = observed >= max(0.0, self.drawdown_limit - self.risk_hysteresis)

        if self.is_data_reliable() and hysteresis_ok:
            if over_limit:
                self._confirm_counter += 1
                self._last_dd_over_limit = True
            else:
                # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞-–≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ ‚Äî —Å–±—Ä–æ—Å
                if not hysteresis_ok:
                    self._confirm_counter = 0
                    self._last_dd_over_limit = False
        else:
            # —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç
            self._confirm_counter = 0
            self._last_dd_over_limit = False

        return self._confirm_counter >= max(1, self.risk_confirm_reads)


class HealthSupervisor:
    """
    –ù–µ–±–æ–ª—å—à–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π: NORMAL/RECOVERY/EMERGENCY.
    –†–µ—à–∞–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –∫–æ–≥–¥–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å Emergency Stop.
    """

    def __init__(
        self,
        config: dict,
        risk_ctx: RiskDataContext,
        notifier: Optional[Callable[[str], Awaitable[Any] | Any]] = None,
    ):
        safe_cfg = (config or {}).get("SAFE_MODE", {})
        self.risk_ctx = risk_ctx
        self.notifier = notifier

        # —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        self.fail_window_sec = float(safe_cfg.get("fail_window_sec", 30.0))
        self.max_consecutive_failures_for_recovery = int(safe_cfg.get("max_failures_for_recovery", 3))

        self.mode: RiskMode = RiskMode.NORMAL
        self.copy_enabled: bool = True  # –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–∑–≤–Ω–µ

        self._failure_log: list[float] = []

    # --- —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è API ---

    async def on_api_success(self) -> None:
        self.risk_ctx.register_success()
        # –ø—Ä–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NORMAL
        if self.mode is not RiskMode.EMERGENCY:
            self.mode = RiskMode.NORMAL

    async def on_api_failure(self, reason: str = "") -> None:
        self.risk_ctx.register_failure()
        now = time.time()
        self._failure_log.append(now)
        # –≤—ã—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        cutoff = now - self.fail_window_sec
        self._failure_log = [t for t in self._failure_log if t >= cutoff]

        if len(self._failure_log) >= self.max_consecutive_failures_for_recovery:
            # —Å–µ—Ç—å/–∞–ø–∏ –¥–µ–≥—Ä–∞–¥–∏—Ä—É—é—Ç ‚Üí —É—Ö–æ–¥–∏–º –≤ RECOVERY, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è
            if self.mode is not RiskMode.EMERGENCY:
                self.mode = RiskMode.RECOVERY

    # --- —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ ---

    def can_open_positions(self) -> bool:
        """–ì–µ–π—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: –Ω–µ–ª—å–∑—è –≤ EMERGENCY; –≤ RECOVERY —Ä–µ—à–∞–µ—Ç –≤–Ω–µ—à–Ω—è—è –ª–æ–≥–∏–∫–∞."""
        if not self.copy_enabled:
            return False
        if self.mode is RiskMode.EMERGENCY:
            return False
        # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å ¬´–∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ–µ¬ª –¥–µ–π—Å—Ç–≤–∏–µ,
        # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ –ø–æ –º–µ—Å—Ç—É (—Å–º. Patch H/I).
        return True

    async def trigger_emergency_stop(self, reason: str = "Confirmed drawdown breach") -> None:
        self.mode = RiskMode.EMERGENCY
        self.copy_enabled = False
        if self.notifier:
            try:
                maybe_coro = self.notifier(
                    f"üõë **EMERGENCY STOP**\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–†–µ–∂–∏–º: {self.mode.value}"
                )
                if asyncio.iscoroutine(maybe_coro):
                    await maybe_coro
            except Exception:
                # –Ω–µ–ª—å–∑—è –≤–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞
                pass
