#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://bybit-exchange.github.io/docs/v5/ws/connect
"""

import asyncio
import websockets
import json
import hmac
import hashlib
import time
from datetime import datetime

# ==============================================================================
# –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò –ö–õ–Æ–ß–ò –ó–î–ï–°–¨
# ==============================================================================
API_KEY = "YOUR_API_KEY_HERE"
API_SECRET = "YOUR_API_SECRET_HERE"

# ==============================================================================
# –¢–ï–°–¢–ï–†
# ==============================================================================

async def test_websocket_connection():
    """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    # URL –¥–ª—è private WebSocket (mainnet)
    uri = "wss://stream.bybit.com/v5/private"
    
    print("="*80)
    print("üöÄ BYBIT WEBSOCKET TESTER (FIXED)")
    print("="*80)
    print(f"üìç Connecting to: {uri}")
    print(f"üîë API Key: {API_KEY[:8]}...{API_KEY[-4:]}")
    print(f"‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*80)
    
    try:
        async with websockets.connect(uri, ping_interval=20, ping_timeout=10) as ws:
            print("‚úÖ Connected to WebSocket")
            
            # ==================================================================
            # –®–ê–ì 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
            # ==================================================================
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º expires (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å)
            expires = int((time.time() + 3600) * 1000)
            
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # signature = HMAC_SHA256(secret, 'GET/realtime' + expires)
            _val = f"GET/realtime{expires}"
            
            signature = hmac.new(
                bytes(API_SECRET, "utf-8"),
                bytes(_val, "utf-8"),
                hashlib.sha256
            ).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_message = {
                "op": "auth",
                "args": [API_KEY, expires, signature]
            }
            
            print(f"\nüì§ Sending authentication...")
            print(f"   Expires: {expires}")
            print(f"   Signature payload: 'GET/realtime{expires}'")
            
            await ws.send(json.dumps(auth_message))
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_response = await asyncio.wait_for(ws.recv(), timeout=5)
            auth_data = json.loads(auth_response)
            
            print(f"\nüì• Auth response:")
            print(f"   {json.dumps(auth_data, indent=2)}")
            
            if auth_data.get('success') == True:
                print("\n‚úÖ AUTHENTICATION SUCCESSFUL!")
            else:
                print(f"\n‚ùå AUTHENTICATION FAILED!")
                print(f"   Error: {auth_data.get('ret_msg', 'Unknown error')}")
                return
            
            # ==================================================================
            # –®–ê–ì 2: –ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ–´
            # ==================================================================
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            subscribe_message = {
                "op": "subscribe",
                "args": [
                    "position",      # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
                    "execution",     # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
                    "order",         # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
                    "wallet"         # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                ]
            }
            
            print(f"\nüì§ Subscribing to channels...")
            print(f"   Channels: {subscribe_message['args']}")
            
            await ws.send(json.dumps(subscribe_message))
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            sub_response = await asyncio.wait_for(ws.recv(), timeout=5)
            sub_data = json.loads(sub_response)
            
            print(f"\nüì• Subscribe response:")
            print(f"   {json.dumps(sub_data, indent=2)}")
            
            if sub_data.get('success') == True:
                print("\n‚úÖ SUBSCRIPTION SUCCESSFUL!")
            else:
                print(f"\n‚ùå SUBSCRIPTION FAILED!")
                print(f"   Error: {sub_data.get('ret_msg', 'Unknown error')}")
                return
            
            # ==================================================================
            # –®–ê–ì 3: –°–õ–£–®–ê–ï–ú –°–û–ë–´–¢–ò–Ø
            # ==================================================================
            
            print("\n" + "="*80)
            print("‚è≥ WAITING FOR EVENTS...")
            print("   üí° TIP: Open/close/modify a position to see events")
            print("="*80 + "\n")
            
            # –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            event_count = {
                "position": 0,
                "execution": 0,
                "order": 0,
                "wallet": 0,
                "ping": 0,
                "pong": 0
            }
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ping –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            async def send_ping():
                while True:
                    await asyncio.sleep(20)
                    ping_message = {"op": "ping"}
                    await ws.send(json.dumps(ping_message))
                    event_count["ping"] += 1
                    print(".", end="", flush=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º ping –≤ —Ñ–æ–Ω–µ
            ping_task = asyncio.create_task(send_ping())
            
            try:
                while True:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await ws.recv()
                    data = json.loads(message)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                    if data.get('topic'):
                        # –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                        topic = data['topic']
                        event_count[topic] = event_count.get(topic, 0) + 1
                        
                        print(f"\nüéØ EVENT #{event_count[topic]}: {topic.upper()}")
                        print(f"   Time: {datetime.now().strftime('%H:%M:%S')}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                        event_data = data.get('data', [])
                        if isinstance(event_data, list):
                            for item in event_data[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
                                if topic == "position":
                                    print(f"   üìä Position:")
                                    print(f"      Symbol: {item.get('symbol')}")
                                    print(f"      Side: {item.get('side')}")
                                    print(f"      Size: {item.get('size')}")
                                    print(f"      Entry: {item.get('avgPrice')}")
                                    print(f"      PnL: {item.get('unrealisedPnl')}")
                                elif topic == "order":
                                    print(f"   üìù Order:")
                                    print(f"      Symbol: {item.get('symbol')}")
                                    print(f"      Side: {item.get('side')}")
                                    print(f"      Price: {item.get('price')}")
                                    print(f"      Qty: {item.get('qty')}")
                                    print(f"      Status: {item.get('orderStatus')}")
                                elif topic == "execution":
                                    print(f"   ‚ö° Execution:")
                                    print(f"      Symbol: {item.get('symbol')}")
                                    print(f"      Side: {item.get('side')}")
                                    print(f"      Price: {item.get('execPrice')}")
                                    print(f"      Qty: {item.get('execQty')}")
                                elif topic == "wallet":
                                    print(f"   üí∞ Wallet:")
                                    for coin in item.get('coin', [])[:1]:
                                        print(f"      {coin.get('coin')}: {coin.get('walletBalance')}")
                        
                    elif data.get('op') == 'pong':
                        # –û—Ç–≤–µ—Ç –Ω–∞ ping
                        event_count["pong"] += 1
                        # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
                        
                    elif data.get('ret_msg'):
                        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        print(f"\nüì® System message: {data.get('ret_msg')}")
                        
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        print(f"\n‚ùì Unknown message: {json.dumps(data, indent=2)[:200]}")
                        
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è Stopped by user")
            finally:
                ping_task.cancel()
                
            # ==================================================================
            # –ò–¢–û–ì–ò
            # ==================================================================
            
            print("\n" + "="*80)
            print("üìä EVENT STATISTICS:")
            for event_type, count in event_count.items():
                if count > 0:
                    print(f"   {event_type}: {count}")
            print("="*80)
                    
    except websockets.exceptions.ConnectionClosed as e:
        print(f"\n‚ùå Connection closed: {e}")
        
    except asyncio.TimeoutError:
        print(f"\n‚ùå Timeout waiting for response")
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    if API_KEY == "YOUR_API_KEY_HERE":
        print("‚ùå ERROR: Please insert your API keys!")
        print("   Edit this file and replace:")
        print('   API_KEY = "YOUR_API_KEY_HERE" with your actual key')
        print('   API_SECRET = "YOUR_API_SECRET_HERE" with your actual secret')
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await test_websocket_connection()


if __name__ == "__main__":
    print("üîå Bybit WebSocket Tester (Based on Official Documentation)")
    print("üìñ Docs: https://bybit-exchange.github.io/docs/v5/ws/connect")
    asyncio.run(main())
