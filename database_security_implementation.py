#!/usr/bin/env python3
"""
üîê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
–í–µ—Ä—Å–∏—è 2.0 - Production-Ready Trading System Database (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)

üéØ –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- ‚úÖ PostgreSQL —Å SQLAlchemy 2.0+ –∏ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏
- ‚úÖ AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π
- ‚úÖ Comprehensive –∞—É–¥–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- ‚úÖ Multi-environment –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (testnet/prod)
- ‚úÖ Production-ready session management
- ‚úÖ Enterprise-grade –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üìÅ –°–¢–†–£–ö–¢–£–†–ê:
project_root/
  db/
    alembic.ini
    env.py
    versions/
  app/
    db_models.py
    db_session.py
    crypto_store.py
    config_loader.py
"""

import os
import sys
import asyncio
import logging
import secrets
import base64
from pathlib import Path
from datetime import datetime as _dt
from typing import Optional, Dict, Any, List, Tuple
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –£–°–¢–û–ô–ß–ò–í–´–ï –ò–ú–ü–û–†–¢–´ –ë–î (–±–µ–∑ EventLevelEnum) ---
try:
    # –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
    from app.db_session import SessionLocal
    from app.db_models import ApiCredentials, SysEvents
except Exception:
    try:
        # –¢–æ–ø-–ª–µ–≤–µ–ª –∑–∞–ø—É—Å–∫
        from db_session import SessionLocal
        from db_models import ApiCredentials, SysEvents
    except Exception as e:
        logger.exception("DB imports failed")
        raise


# ================================
# –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê
# ================================

def create_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    base_path = Path.cwd()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        'db',
        'db/versions',
        'app',
        'logs',
        'backups'
    ]
    
    for directory in directories:
        dir_path = base_path / directory
        dir_path.mkdir(exist_ok=True, parents=True)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    return base_path


# ================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –®–ò–§–†–û–í–ê–ù–ò–ï–ú
# ================================

class CredentialsStore:
    """
    Enhanced credentials store –ø–æ –¢–ó —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –®–∏—Ñ—Ä—É–µ—Ç/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–ª—é—á–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ –ë–î
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º –∏–∑ BOT_MASTER_KEY"""
        key_b64 = os.getenv("BOT_MASTER_KEY")
        if not key_b64:
            raise ValueError("BOT_MASTER_KEY is required")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–ª—é—á–∞
        if key_b64 == "DEV_RANDOM":
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
            from cryptography.hazmat.primitives.ciphers.aead import AESGCM
            self._key = AESGCM(os.urandom(32))
            logger.warning("Using DEV_RANDOM key - not for production!")
        else:
            try:
                from cryptography.hazmat.primitives.ciphers.aead import AESGCM
                # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ base64
                key_bytes = base64.b64decode(key_b64)
                if len(key_bytes) != 32:
                    raise ValueError("Decoded key must be 32 bytes")
                self._key = AESGCM(key_bytes)
                logger.info("Using base64 decoded master key")
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ base64, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞ –∫–∞–∫ UTF-8
                key_bytes = key_b64.encode("utf-8")[:32]
                if len(key_bytes) < 32:
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 32 –±–∞–π—Ç
                    key_bytes = key_bytes.ljust(32, b'\0')
                self._key = AESGCM(key_bytes)
                logger.info("Using UTF-8 encoded master key")
    
    def encrypt_pair(self, api_key: str, api_secret: str) -> Tuple[bytes, bytes, bytes]:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã API –∫–ª—é—á/—Å–µ–∫—Ä–µ—Ç
        
        Args:
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç
            
        Returns:
            tuple[bytes, bytes, bytes]: (enc_key, enc_secret, nonce)
        """
        try:
            nonce = secrets.token_bytes(12)  # 96-bit nonce –¥–ª—è GCM
            enc_key = self._key.encrypt(nonce, api_key.encode('utf-8'), None)
            enc_secret = self._key.encrypt(nonce, api_secret.encode('utf-8'), None)
            
            logger.debug("Credentials encrypted successfully")
            return enc_key, enc_secret, nonce
            
        except Exception as e:
            logger.error(f"Encryption failed: {e}")
            raise
    
    def decrypt_pair(self, enc_key: bytes, enc_secret: bytes, nonce: bytes) -> Tuple[str, str]:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä—ã API –∫–ª—é—á/—Å–µ–∫—Ä–µ—Ç
        
        Args:
            enc_key: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
            enc_secret: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
            nonce: Nonce
            
        Returns:
            tuple[str, str]: (api_key, api_secret)
        """
        try:
            key = self._key.decrypt(nonce, enc_key, None).decode('utf-8')
            secret = self._key.decrypt(nonce, enc_secret, None).decode('utf-8')
            
            logger.debug("Credentials decrypted successfully")
            return key, secret
            
        except Exception as e:
            logger.error(f"Decryption failed: {e}")
            raise
    
    def set_account_credentials(self, account_id: int, api_key: str, api_secret: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials –≤ —Ç–∞–±–ª–∏—Ü–µ ApiCredentials.
        –ü–∏—à–µ—Ç –∑–∞–ø–∏—Å—å –≤ SysEvents. –ë–µ–∑ –ú–û–ö–æ–≤.
        """
        if not account_id:
            raise ValueError("account_id is required")

        # –£—Å—Ç–æ–π—á–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤)
        try:
            from app.db_session import SessionLocal as _SessionLocal
            from app.db_models import ApiCredentials as _ApiCredentials, SysEvents as _SysEvents
        except Exception:
            try:
                from db_session import SessionLocal as _SessionLocal
                from db_models import ApiCredentials as _ApiCredentials, SysEvents as _SysEvents
            except Exception as e:
                logger.exception("DB imports failed inside set_account_credentials")
                raise

        try:
            enc_key, enc_secret, nonce = self.encrypt_pair(api_key, api_secret)

            with _SessionLocal() as session:
                row = session.query(_ApiCredentials).filter_by(account_id=account_id).first()
                if row is None:
                    row = _ApiCredentials(
                        account_id=account_id,
                        enc_key=enc_key,
                        enc_secret=enc_secret,
                        nonce=nonce,
                        key_hint=api_key[:8] + "*" * (len(api_key) - 8) if len(api_key) > 8 else api_key
                    )
                    session.add(row)
                    action = "created"
                else:
                    row.enc_key = enc_key
                    row.enc_secret = enc_secret
                    row.nonce = nonce
                    row.key_hint = api_key[:8] + "*" * (len(api_key) - 8) if len(api_key) > 8 else api_key
                    try:
                        from datetime import datetime as _dt
                        row.updated_at = _dt.utcnow()
                    except Exception:
                        pass
                    action = "updated"

                event = _SysEvents(
                    level="INFO",                        # <--- –±—ã–ª–æ EventLevelEnum.INFO
                    component="CredentialsStore",
                    message=f"Credentials {action}",
                    details_json={"account_id": account_id, "action": action}
                )
                session.add(event)
                session.commit()

            logger.info("Credentials %s for account %s", action, account_id)

        except Exception as e:
            logger.exception("Failed to set credentials for account %s: %s", account_id, e)
            raise


    
    def get_account_credentials(self, account_id: int) -> Optional[Tuple[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (api_key, api_secret) –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.
        """
        if not account_id:
            raise ValueError("account_id is required")

        try:
            from app.db_session import SessionLocal as _SessionLocal
            from app.db_models import ApiCredentials as _ApiCredentials
        except Exception:
            try:
                from db_session import SessionLocal as _SessionLocal
                from db_models import ApiCredentials as _ApiCredentials
            except Exception as e:
                logger.exception("DB imports failed inside get_account_credentials")
                raise

        try:
            with _SessionLocal() as session:
                row = session.query(_ApiCredentials).filter_by(account_id=account_id).first()
                if not row:
                    logger.debug("No credentials found for account %s", account_id)
                    return None

                api_key, api_secret = self.decrypt_pair(row.enc_key, row.enc_secret, row.nonce)

                try:
                    from datetime import datetime as _dt
                    row.last_used = _dt.utcnow()
                    session.commit()
                except Exception:
                    pass

                logger.debug("Credentials retrieved for account %s", account_id)
                return api_key, api_secret

        except Exception as e:
            logger.exception("Failed to get credentials for account %s: %s", account_id, e)
            raise


    
    def delete_account_credentials(self, account_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç credentials –ø–æ account_id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        –û—à–∏–±–∫–∏ –Ω–µ –ø–æ–¥–∞–≤–ª—è—é—Ç—Å—è.
        """
        if not account_id:
            raise ValueError("account_id is required")

        try:
            from app.db_session import SessionLocal as _SessionLocal
            from app.db_models import ApiCredentials as _ApiCredentials, SysEvents as _SysEvents
        except Exception:
            try:
                from db_session import SessionLocal as _SessionLocal
                from db_models import ApiCredentials as _ApiCredentials, SysEvents as _SysEvents
            except Exception as e:
                logger.exception("DB imports failed inside delete_account_credentials")
                raise

        try:
            with _SessionLocal() as session:
                row = session.query(_ApiCredentials).filter_by(account_id=account_id).first()
                if not row:
                    return False

                session.delete(row)
                event = _SysEvents(
                    level="INFO",                        # <--- –±—ã–ª–æ EventLevelEnum.INFO
                    component="CredentialsStore",
                    message="Credentials deleted",
                    details_json={"account_id": account_id}
                )
                session.add(event)
                session.commit()

            logger.info("Credentials deleted for account %s", account_id)
            return True

        except Exception as e:
            logger.exception("Failed to delete credentials for account %s: %s", account_id, e)
            raise


    
    def list_accounts_with_credentials(self) -> List[int]:
        """
        –°–ø–∏—Å–æ–∫ account_id, –∏–º–µ—é—â–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ credentials.
        """
        try:
            from app.db_session import SessionLocal as _SessionLocal
            from app.db_models import ApiCredentials as _ApiCredentials
        except Exception:
            try:
                from db_session import SessionLocal as _SessionLocal
                from db_models import ApiCredentials as _ApiCredentials
            except Exception as e:
                logger.exception("DB imports failed inside list_accounts_with_credentials")
                raise

        try:
            with _SessionLocal() as session:
                rows = session.query(_ApiCredentials.account_id).all()
                return [r[0] for r in rows]
        except Exception as e:
            logger.exception("Failed to list accounts with credentials: %s", e)
            raise



# ================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ï–ô
# ================================

class CryptoStore:
    """
    Professional-grade encryption store –¥–ª—è API credentials
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AES-GCM –¥–ª—è authenticated encryption
    """
    
    def __init__(self, master_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º –∏–∑ environment
        
        Args:
            master_key: –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ BOT_MASTER_KEY)
        """
        self.master_key = master_key or os.getenv("BOT_MASTER_KEY")
        
        if not self.master_key:
            raise ValueError("BOT_MASTER_KEY environment variable not set")
        
        if len(self.master_key) < 32:
            raise ValueError("Master key must be at least 32 characters long")
        
        self._aesgcm = None
        self._initialize_cipher()
    
    def _initialize_cipher(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AES-GCM —à–∏—Ñ—Ä–∞"""
        try:
            from cryptography.hazmat.primitives.ciphers.aead import AESGCM
            from cryptography.hazmat.primitives import hashes
            from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
            
            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PBKDF2
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,  # 256-bit –∫–ª—é—á
                salt=b'bybit_trading_salt_2024',  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Å–æ–ª—å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                iterations=100000,  # OWASP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            )
            
            key = kdf.derive(self.master_key.encode('utf-8'))
            self._aesgcm = AESGCM(key)
            
            logger.info("Crypto store initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize crypto store: {e}")
            raise
    
    def encrypt_credentials(self, api_key: str, api_secret: str) -> Tuple[bytes, bytes, bytes]:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API credentials
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            api_secret: API —Å–µ–∫—Ä–µ—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            Tuple[bytes, bytes, bytes]: (encrypted_key, encrypted_secret, nonce)
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π nonce –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            nonce = secrets.token_bytes(12)  # 96-bit nonce –¥–ª—è GCM
            
            # –®–∏—Ñ—Ä—É–µ–º API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç
            encrypted_key = self._aesgcm.encrypt(nonce, api_key.encode('utf-8'), None)
            encrypted_secret = self._aesgcm.encrypt(nonce, api_secret.encode('utf-8'), None)
            
            logger.debug("API credentials encrypted successfully")
            return encrypted_key, encrypted_secret, nonce
            
        except Exception as e:
            logger.error(f"Encryption failed: {e}")
            raise
    
    def decrypt_credentials(self, enc_key: bytes, enc_secret: bytes, nonce: bytes) -> Tuple[str, str]:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ API credentials
        
        Args:
            enc_key: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á
            enc_secret: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å–µ–∫—Ä–µ—Ç
            nonce: Nonce, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
        
        Returns:
            Tuple[str, str]: (api_key, api_secret)
        """
        try:
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            api_key = self._aesgcm.decrypt(nonce, enc_key, None).decode('utf-8')
            api_secret = self._aesgcm.decrypt(nonce, enc_secret, None).decode('utf-8')
            
            logger.debug("API credentials decrypted successfully")
            return api_key, api_secret
            
        except Exception as e:
            logger.error(f"Decryption failed: {e}")
            raise
    
    def encrypt_json_data(self, data: Dict[str, Any]) -> Tuple[bytes, bytes]:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            Tuple[bytes, bytes]: (encrypted_data, nonce)
        """
        try:
            nonce = secrets.token_bytes(12)
            json_data = json.dumps(data, ensure_ascii=False)
            encrypted_data = self._aesgcm.encrypt(nonce, json_data.encode('utf-8'), None)
            
            return encrypted_data, nonce
            
        except Exception as e:
            logger.error(f"JSON encryption failed: {e}")
            raise
    
    def decrypt_json_data(self, encrypted_data: bytes, nonce: bytes) -> Dict[str, Any]:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            encrypted_data: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            nonce: Nonce
        
        Returns:
            Dict[str, Any]: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            decrypted_data = self._aesgcm.decrypt(nonce, encrypted_data, None)
            json_str = decrypted_data.decode('utf-8')
            return json.loads(json_str)
            
        except Exception as e:
            logger.error(f"JSON decryption failed: {e}")
            raise
    
    def generate_key_hint(self, api_key: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è API –∫–ª—é—á–∞ (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
        
        Args:
            api_key: API –∫–ª—é—á
        
        Returns:
            str: –ü–æ–¥—Å–∫–∞–∑–∫–∞ (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        if len(api_key) < 8:
            return api_key
        return api_key[:8] + "*" * (len(api_key) - 8)
    
    @staticmethod
    def generate_master_key() -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞
        
        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–ª—é—á (512 –±–∏—Ç)
        key_bytes = secrets.token_bytes(32)
        return base64.urlsafe_b64encode(key_bytes).decode('ascii')
    
    def test_encryption(self) -> bool:
        """
        –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            test_key = "test_api_key_12345"
            test_secret = "test_api_secret_67890"
            
            # –®–∏—Ñ—Ä—É–µ–º
            enc_key, enc_secret, nonce = self.encrypt_credentials(test_key, test_secret)
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            dec_key, dec_secret = self.decrypt_credentials(enc_key, enc_secret, nonce)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            if dec_key == test_key and dec_secret == test_secret:
                logger.info("Encryption test passed")
                return True
            else:
                logger.error("Encryption test failed: data mismatch")
                return False
                
        except Exception as e:
            logger.error(f"Encryption test failed: {e}")
            return False


# ================================
# UTILITY FUNCTIONS
# ================================

def create_crypto_store() -> CryptoStore:
    """Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CryptoStore"""
    try:
        return CryptoStore()
    except Exception as e:
        logger.error(f"Failed to create crypto store: {e}")
        raise

def create_credentials_store() -> CredentialsStore:
    """Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CredentialsStore"""
    try:
        return CredentialsStore()
    except Exception as e:
        logger.error(f"Failed to create credentials store: {e}")
        raise

def encrypt_api_credentials(api_key: str, api_secret: str) -> Dict[str, bytes]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API credentials
    
    Returns:
        Dict —Å–æ–¥–µ—Ä–∂–∞—â–∏–π enc_key, enc_secret, nonce
    """
    crypto = create_crypto_store()
    enc_key, enc_secret, nonce = crypto.encrypt_credentials(api_key, api_secret)
    
    return {
        'enc_key': enc_key,
        'enc_secret': enc_secret,
        'nonce': nonce,
        'key_hint': crypto.generate_key_hint(api_key)
    }

def decrypt_api_credentials(enc_key: bytes, enc_secret: bytes, nonce: bytes) -> Tuple[str, str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ API credentials"""
    crypto = create_crypto_store()
    return crypto.decrypt_credentials(enc_key, enc_secret, nonce)


# ================================
# TESTING FUNCTIONS
# ================================

def test_credentials_store():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CredentialsStore (–±–µ–∑ MOCK)."""
    try:
        store = CredentialsStore()

        # –¢–µ—Å—Ç encrypt/decrypt
        test_key = "test_api_key_12345"
        test_secret = "test_api_secret_67890"

        enc_key, enc_secret, nonce = store.encrypt_pair(test_key, test_secret)
        dec_key, dec_secret = store.decrypt_pair(enc_key, enc_secret, nonce)
        assert dec_key == test_key, "Decrypted key mismatch"
        assert dec_secret == test_secret, "Decrypted secret mismatch"
        print("‚úÖ Encrypt/decrypt test passed")

        # –¢–µ—Å—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ check_db_health –ø—Ä–æ—Ö–æ–¥–∏—Ç)
        if _db_health_check():
            test_account_id = 999_999

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            store.set_account_credentials(test_account_id, test_key, test_secret)

            # –ß–∏—Ç–∞–µ–º
            api = store.get_account_credentials(test_account_id)
            assert api is not None, "Credentials not found in DB"
            assert api[0] == test_key, "Retrieved key mismatch"
            assert api[1] == test_secret, "Retrieved secret mismatch"

            # –£–¥–∞–ª—è–µ–º
            assert store.delete_account_credentials(test_account_id) is True, "Delete returned False"
            print("‚úÖ Database integration test passed")
        else:
            print("‚ö†Ô∏è Database health check failed ‚Äî DB tests skipped")

        return True

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False



def check_db_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î (–±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫)."""
    try:
        return _db_health_check()
    except Exception as e:
        logger.exception("DB health check failed: %s", e)
        return False



# ================================
# MAIN EXECUTION
# ================================

if __name__ == "__main__":
    print("üîê TESTING DATABASE SECURITY IMPLEMENTATION")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not os.getenv("BOT_MASTER_KEY"):
        test_key = CryptoStore.generate_master_key()
        os.environ["BOT_MASTER_KEY"] = test_key
        print(f"Generated test master key: {test_key[:16]}...")
    
    # –¢–µ—Å—Ç CryptoStore
    print("\nüì¶ Testing CryptoStore...")
    try:
        crypto = create_crypto_store()
        if crypto.test_encryption():
            print("‚úÖ CryptoStore test passed")
        else:
            print("‚ùå CryptoStore test failed")
    except Exception as e:
        print(f"‚ùå CryptoStore error: {e}")
    
    # –¢–µ—Å—Ç CredentialsStore
    print("\nüîë Testing CredentialsStore...")
    if test_credentials_store():
        print("‚úÖ CredentialsStore test passed")
    else:
        print("‚ùå CredentialsStore test failed")
    
    print("\n" + "=" * 60)
    print("‚ú® Testing completed!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
    print("\nüóÑÔ∏è Checking database health...")
    if check_db_health():
        print("‚úÖ Database is healthy")
    else:
        print("‚ö†Ô∏è Database is not available or not configured")
    
    print("\nüìå Note: For production use, set BOT_MASTER_KEY environment variable")
    print("   with a secure 32+ character key")